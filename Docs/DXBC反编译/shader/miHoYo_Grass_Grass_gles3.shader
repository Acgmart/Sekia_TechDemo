//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Grass/Grass" {
Properties {
[Header(Element View)] _ElementViewEleID ("Element ID", Float) = 0
}
SubShader {
 LOD 100
 Tags { "QUEUE" = "AlphaTest-1" "RenderType" = "Opaque" }
 Pass {
  LOD 100
  Tags { "LIGHTMODE" = "FORWARDBASE" "QUEUE" = "AlphaTest-1" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 47943
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat38 = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9 = vec4(u_xlat38) * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat2.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat26) * u_xlat16_4 + u_xlat3;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat1.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_22 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1.x * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_4 = u_xlat16_10.xxxx * u_xlat16_4 + vec4(u_xlat16_46);
    u_xlat4 = u_xlat16_4 * vec4(u_xlat16_22);
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_4 * vec4(u_xlat13);
    u_xlat13 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat13 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat2 = vec4(u_xlat13) * u_xlat4;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = u_xlat1.xxxx * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat38 = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9 = vec4(u_xlat38) * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat2.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat26) * u_xlat16_4 + u_xlat3;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat1.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_22 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1.x * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_4 = u_xlat16_10.xxxx * u_xlat16_4 + vec4(u_xlat16_46);
    u_xlat4 = u_xlat16_4 * vec4(u_xlat16_22);
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_4 * vec4(u_xlat13);
    u_xlat13 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat13 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat2 = vec4(u_xlat13) * u_xlat4;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = u_xlat1.xxxx * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat38 = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9 = vec4(u_xlat38) * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat2.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat26) * u_xlat16_4 + u_xlat3;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat1.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_22 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1.x * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_4 = u_xlat16_10.xxxx * u_xlat16_4 + vec4(u_xlat16_46);
    u_xlat4 = u_xlat16_4 * vec4(u_xlat16_22);
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_4 * vec4(u_xlat13);
    u_xlat13 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat13 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat2 = vec4(u_xlat13) * u_xlat4;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = u_xlat1.xxxx * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
mediump vec4 u_xlat16_1;
vec4 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
float u_xlat13;
mediump float u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat38 = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9 = vec4(u_xlat38) * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat2.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat26) * u_xlat16_4 + u_xlat3;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat1.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_22 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1.x * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_4 = u_xlat16_10.xxxx * u_xlat16_4 + vec4(u_xlat16_46);
    u_xlat4 = u_xlat16_4 * vec4(u_xlat16_22);
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat13 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_4 * vec4(u_xlat13);
    u_xlat13 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13 = u_xlat2.x * u_xlat13 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat2 = vec4(u_xlat13) * u_xlat4;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = u_xlat1.xxxx * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump float u_xlat16_22;
float u_xlat25;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat2.x = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.xxxx * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat13.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat37) * u_xlat16_4 + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat2.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_22 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1 * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_2 = u_xlat16_10.xxxx * u_xlat16_2 + vec4(u_xlat16_46);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_22);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat25 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat16_2 * vec4(u_xlat25);
    u_xlat25 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat25 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat2 = u_xlat13.xxxx * u_xlat2;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = vec4(u_xlat1) * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump float u_xlat16_22;
float u_xlat25;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat2.x = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.xxxx * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat13.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat37) * u_xlat16_4 + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat2.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_22 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1 * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_2 = u_xlat16_10.xxxx * u_xlat16_2 + vec4(u_xlat16_46);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_22);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat25 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat16_2 * vec4(u_xlat25);
    u_xlat25 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat25 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat2 = u_xlat13.xxxx * u_xlat2;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = vec4(u_xlat1) * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump float u_xlat16_22;
float u_xlat25;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat2.x = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.xxxx * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat13.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat37) * u_xlat16_4 + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat2.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_22 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1 * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_2 = u_xlat16_10.xxxx * u_xlat16_2 + vec4(u_xlat16_46);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_22);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat25 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat16_2 * vec4(u_xlat25);
    u_xlat25 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat25 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat2 = u_xlat13.xxxx * u_xlat2;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = vec4(u_xlat1) * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
float u_xlat4;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat4 = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.w = u_xlat4 * 0.5;
    vs_TEXCOORD3.xy = u_xlat1.zz + u_xlat1.xw;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.x = unity_SHAr.w;
    vs_TEXCOORD0.y = unity_SHAg.w;
    vs_TEXCOORD0.z = unity_SHAb.w;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	mediump vec4 unity_SHAr;
uniform 	mediump vec4 unity_SHAg;
uniform 	mediump vec4 unity_SHAb;
uniform 	mediump vec4 unity_SHBr;
uniform 	mediump vec4 unity_SHBg;
uniform 	mediump vec4 unity_SHBb;
uniform 	mediump vec4 unity_SHC;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD3;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
float u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump float u_xlat16_22;
float u_xlat25;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD3 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9 = u_xlat9.xyzz * _WindParams0.wwww + u_xlat7.xyzz;
    u_xlat9 = u_xlat9 * _WindParams0.zzzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyzz;
    u_xlat2.x = dot(u_xlat9.xyw, u_xlat9.xyw);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9 = u_xlat2.xxxx * u_xlat9;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat4.xz = u_xlat0.xw * vec2(0.5, 0.5);
    u_xlat38 = u_xlat0.y * _ProjectionParams.x;
    u_xlat4.w = u_xlat38 * 0.5;
    vs_TEXCOORD3.xy = u_xlat4.zz + u_xlat4.xw;
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_4 = _Color + (-_Color2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _Color2;
    u_xlat16_5 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_5 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_5 + _LowLODColor2;
    u_xlat16_4 = u_xlat16_4 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_3 = u_xlat3.xxxx * u_xlat16_4 + _AOColor;
    u_xlat3 = (-u_xlat16_5) + u_xlat16_3;
    u_xlat3 = u_xlat13.yyyy * u_xlat3 + u_xlat16_5;
    u_xlat16_4 = (-u_xlat3) + _BurnedColor;
    u_xlat16_3 = vec4(u_xlat37) * u_xlat16_4 + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_10.x = u_xlat16_10.x + u_xlat16_10.x;
    u_xlat16_10.x = u_xlat9.y * (-u_xlat16_10.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_10.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_10.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_10.x = inversesqrt(u_xlat16_10.x);
    u_xlat16_10.xyz = u_xlat6.xyz * u_xlat16_10.xxx + u_xlat2.xyz;
    u_xlat16_46 = dot(u_xlat16_10.xyz, u_xlat16_10.xyz);
    u_xlat16_46 = inversesqrt(u_xlat16_46);
    u_xlat16_10.xyz = vec3(u_xlat16_46) * u_xlat16_10.xyz;
    u_xlat16_46 = dot(u_xlat9.xyw, u_xlat16_10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_46 = min(max(u_xlat16_46, 0.0), 1.0);
#else
    u_xlat16_46 = clamp(u_xlat16_46, 0.0, 1.0);
#endif
    u_xlat16_10.x = dot(u_xlat16_10.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyw, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_3 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_22 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat16_22 * u_xlat16_22;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + -1.0;
    u_xlat16_22 = u_xlat16_46 * u_xlat16_22 + 1.0;
    u_xlat16_34 = u_xlat16_34 * 0.5;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_22 + 9.99999975e-05;
    u_xlat16_22 = float(1.0) / float(u_xlat16_22);
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34;
    u_xlat16_22 = u_xlat1 * u_xlat16_22;
    u_xlat16_22 = min(u_xlat16_22, 16.0);
    u_xlat16_10.x = (-u_xlat16_10.x) + 1.0;
    u_xlat16_34 = u_xlat16_10.x * u_xlat16_10.x;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_10.x;
    u_xlat16_10.x = (-u_xlat16_10.x) * u_xlat16_34 + 1.0;
    u_xlat16_2 = u_xlat16_10.xxxx * u_xlat16_2 + vec4(u_xlat16_46);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_22);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat25 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat16_2 * vec4(u_xlat25);
    u_xlat25 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat13.x = u_xlat13.x * u_xlat25 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat2 = u_xlat13.xxxx * u_xlat2;
    u_xlat2 = u_xlat2 * _LightColor0;
    u_xlat16_10.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2 = u_xlat2 * u_xlat16_10.xxxx;
    u_xlat4.xyz = u_xlat9.xyw;
    u_xlat4.w = 1.0;
    u_xlat16_10.x = dot(unity_SHAr, u_xlat4);
    u_xlat16_10.y = dot(unity_SHAg, u_xlat4);
    u_xlat16_10.z = dot(unity_SHAb, u_xlat4);
    u_xlat16_5 = u_xlat9.ywzx * u_xlat9;
    u_xlat16_11.x = dot(unity_SHBr, u_xlat16_5);
    u_xlat16_11.y = dot(unity_SHBg, u_xlat16_5);
    u_xlat16_11.z = dot(unity_SHBb, u_xlat16_5);
    u_xlat16_46 = u_xlat4.y * u_xlat4.y;
    u_xlat16_46 = u_xlat4.x * u_xlat4.x + (-u_xlat16_46);
    u_xlat16_11.xyz = unity_SHC.xyz * vec3(u_xlat16_46) + u_xlat16_11.xyz;
    vs_TEXCOORD0.xyz = u_xlat16_10.xyz + u_xlat16_11.xyz;
    u_xlat16_1 = vec4(u_xlat1) * _LightColor0;
    vs_TEXCOORD1 = u_xlat16_1 * u_xlat16_3 + u_xlat2;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.w = 0.0;
    vs_TEXCOORD3.zw = u_xlat0.zw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
in mediump vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
void main()
{
    SV_Target0 = vs_TEXCOORD0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
}
}
 Pass {
  LOD 100
  Tags { "DebugView" = "On" "LIGHTMODE" = "HYBRIDDEFERRED" "QUEUE" = "AlphaTest-1" "RenderType" = "Opaque" }
  Cull Off
  GpuProgramID 102292
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb28;
vec2 u_xlat29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb28.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat4.xy;
    u_xlat27.x = (u_xlatb28.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb28.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat39) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
float u_xlat13;
mediump vec3 u_xlat16_22;
float u_xlat26;
vec2 u_xlat27;
vec2 u_xlat29;
bvec2 u_xlatb29;
mediump float u_xlat16_34;
float u_xlat37;
int u_xlati37;
float u_xlat38;
float u_xlat39;
float u_xlat40;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati37 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati37 = u_xlati37 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat26 = in_COLOR0.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat26);
#else
    u_xlatb2 = u_xlat2.x<u_xlat26;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat26 = _Time.y + (-unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat26 = u_xlat26 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat38 = fract(abs(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat26 = u_xlat38 * u_xlat26;
    u_xlat38 = 10000.0 * unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat38 = fract(u_xlat38);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat27.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat27.x = u_xlat27.x * _Lightings.z;
    u_xlat39 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat27.x + u_xlat39;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat27.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat27.xy = min(max(u_xlat27.xy, 0.0), 1.0);
#else
    u_xlat27.xy = clamp(u_xlat27.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb29.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat27.xy = u_xlat27.xy * u_xlat5.xy;
    u_xlat27.x = (u_xlatb29.x) ? float(1.0) : u_xlat27.x;
    u_xlat27.y = (u_xlatb29.y) ? float(1.0) : u_xlat27.y;
    u_xlat27.x = u_xlat27.y + u_xlat27.x;
    u_xlat27.x = u_xlat27.x * 0.5;
    u_xlat27.x = min(u_xlat38, u_xlat27.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat39 = (-u_xlat27.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat39) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat39 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat39 = u_xlat39 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat38 * u_xlat27.x;
    u_xlat38 = _WindParams1.y * 0.100000001;
    u_xlat27.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat2.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat39 = u_xlat39 * 6.28299999;
    u_xlat5.x = dot(u_xlat5.xy, _MiHoYoWind.xz);
    u_xlat5.x = (-u_xlat5.x) * _WindParams0.y;
    u_xlat5.x = _Time.y * _WindParams2.x + u_xlat5.x;
    u_xlat38 = u_xlat39 * u_xlat38 + u_xlat5.x;
    u_xlat5.x = u_xlat38 + _WindParams2.y;
    u_xlat38 = _Time.y * _MiHoYoTimeScale.x + u_xlat39;
    u_xlat5.y = u_xlat38 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat29.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat29.xy;
    u_xlat6.xy = vec2(u_xlat40) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat29.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat29.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat27.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat27.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat38 = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = vec3(u_xlat38) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat38 = u_xlat40 * _MiHoYoWind.w;
    u_xlat38 = u_xlat38 * _WindParams1.x + 1.0;
    u_xlat38 = u_xlat38 * u_xlat38 + (-u_xlat38);
    u_xlat27.xy = u_xlat29.xy * vec2(u_xlat38);
    u_xlat5.xz = u_xlat6.zz * u_xlat27.xy;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat38 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat38 = max(u_xlat38, 0.00100000005);
    u_xlat38 = inversesqrt(u_xlat38);
    u_xlat9.xyz = vec3(u_xlat38) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyz = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat38 = u_xlat16_0.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / vec3(u_xlat38);
    u_xlat1.xyz = u_xlat4.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat2.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati37 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat26) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat37 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat37 = inversesqrt(u_xlat37);
    u_xlat1.xyz = vec3(u_xlat37) * u_xlat1.xyz;
    u_xlat16_10.x = dot(u_xlat1.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat1.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat1.y);
    u_xlat37 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat37 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat1.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat13 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat13 = u_xlat2.y * u_xlat13 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat13 = (-u_xlat13) + 1.0;
    u_xlat13 = u_xlat13 * u_xlat13;
    u_xlat16_34 = u_xlat13 * u_xlat13;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1.x * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_1 = u_xlat16_22.xxxx * u_xlat16_3 + vec4(u_xlat16_11);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_34);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat26 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat26);
    u_xlat26 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat26 = u_xlat2.x * u_xlat26 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat26 = min(max(u_xlat26, 0.0), 1.0);
#else
    u_xlat26 = clamp(u_xlat26, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat26) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat26 = u_xlat3.w * u_xlat16_22.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat38 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat38 = max(u_xlat38, 0.0);
    u_xlat16_10.x = u_xlat2.x * u_xlat38;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat26 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_1;
    u_xlat9.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat11;
vec2 u_xlat20;
bvec2 u_xlatb21;
vec2 u_xlat22;
int u_xlati28;
float u_xlat29;
float u_xlat30;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati28 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati28 = u_xlati28 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat11.x = in_COLOR0.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat11.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat11.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat11.x = 10000.0 * unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat11.x = fract(u_xlat11.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat20.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat20.xy = min(max(u_xlat20.xy, 0.0), 1.0);
#else
    u_xlat20.xy = clamp(u_xlat20.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb21.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat20.xy = u_xlat20.xy * u_xlat3.xy;
    u_xlat20.x = (u_xlatb21.x) ? float(1.0) : u_xlat20.x;
    u_xlat20.y = (u_xlatb21.y) ? float(1.0) : u_xlat20.y;
    u_xlat20.x = u_xlat20.y + u_xlat20.x;
    u_xlat20.x = u_xlat20.x * 0.5;
    u_xlat20.x = min(u_xlat11.x, u_xlat20.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat29 = (-u_xlat20.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat29) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat29 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.w = u_xlat29 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat20.x * u_xlat11.x;
    u_xlat11.x = _WindParams1.y * 0.100000001;
    u_xlat20.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.xw = u_xlat2.xw * vec2(1.10000002, 6.28299999);
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat30 = dot(u_xlat4.xy, _MiHoYoWind.xz);
    u_xlat30 = (-u_xlat30) * _WindParams0.y;
    u_xlat30 = _Time.y * _WindParams2.x + u_xlat30;
    u_xlat11.x = u_xlat2.w * u_xlat11.x + u_xlat30;
    u_xlat4.x = u_xlat11.x + _WindParams2.y;
    u_xlat11.x = _Time.y * _MiHoYoTimeScale.x + u_xlat2.w;
    u_xlat4.y = u_xlat11.x + _MiHoYoTimeScale.y;
    u_xlat11.xz = u_xlat4.xy + vec2(0.5, 0.5);
    u_xlat11.xz = fract(u_xlat11.xz);
    u_xlat11.xz = u_xlat11.xz * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat4.xy = abs(u_xlat11.xz) * abs(u_xlat11.xz);
    u_xlat11.xz = -abs(u_xlat11.xz) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat11.xz = u_xlat11.xz * u_xlat4.xy;
    u_xlat5.xy = u_xlat11.xz * u_xlat2.xx;
    u_xlat11.xz = u_xlat5.zz * u_xlat5.xz;
    u_xlat4.xy = _MiHoYoWind.xz;
    u_xlat22.xy = u_xlat11.xx * u_xlat4.xy;
    u_xlat6.xz = u_xlat20.xx * u_xlat22.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat11.xxx * u_xlat7.xyz;
    u_xlat7.xyz = u_xlat20.xxx * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat11.x = u_xlat5.y * u_xlat11.z;
    u_xlat11.xyz = u_xlat11.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat2.x * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat4.xy = u_xlat4.xy * u_xlat2.xx;
    u_xlat4.xz = u_xlat5.zz * u_xlat4.xy;
    u_xlat4.y = 0.0;
    u_xlat5.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat5.xyz = u_xlat5.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat5.xyz = u_xlat2.xxx * u_xlat5.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat11.xyz * _WindParams2.www + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat4.xyz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat3.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat29 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat29);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati28 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat5.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
bvec2 u_xlatb39;
vec2 u_xlat40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat5.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat5.xy;
    u_xlat38.x = (u_xlatb39.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb39.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat38.xxx + in_POSITION0.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
bvec2 u_xlatb39;
vec2 u_xlat40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat5.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat5.xy;
    u_xlat38.x = (u_xlatb39.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb39.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat38.xxx + in_POSITION0.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
bvec2 u_xlatb39;
vec2 u_xlat40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat5.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat5.xy;
    u_xlat38.x = (u_xlatb39.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb39.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat38.xxx + in_POSITION0.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
bvec2 u_xlatb39;
vec2 u_xlat40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat5.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat5.xy;
    u_xlat38.x = (u_xlatb39.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb39.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat5.xyz * u_xlat38.xxx + in_POSITION0.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
vec2 u_xlat40;
bvec2 u_xlatb40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat6.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat6.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat6.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat6.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb40.xy = greaterThanEqual(u_xlat6.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat6.xy;
    u_xlat38.x = (u_xlatb40.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb40.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.y = in_POSITION0.y;
    u_xlat6.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat6.xyz * u_xlat38.xxx + u_xlat5.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
vec2 u_xlat40;
bvec2 u_xlatb40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat6.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat6.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat6.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat6.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb40.xy = greaterThanEqual(u_xlat6.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat6.xy;
    u_xlat38.x = (u_xlatb40.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb40.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.y = in_POSITION0.y;
    u_xlat6.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat6.xyz * u_xlat38.xxx + u_xlat5.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
vec2 u_xlat40;
bvec2 u_xlatb40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat6.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat6.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat6.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat6.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb40.xy = greaterThanEqual(u_xlat6.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat6.xy;
    u_xlat38.x = (u_xlatb40.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb40.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.y = in_POSITION0.y;
    u_xlat6.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat6.xyz * u_xlat38.xxx + u_xlat5.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
vec3 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec4 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec4 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
float u_xlat18;
float u_xlat19;
bool u_xlatb19;
float u_xlat26;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
float u_xlat37;
vec2 u_xlat38;
vec2 u_xlat40;
bvec2 u_xlatb40;
mediump float u_xlat16_49;
float u_xlat52;
int u_xlati52;
float u_xlat53;
bool u_xlatb53;
float u_xlat54;
int u_xlati54;
float u_xlat55;
float u_xlat56;
bool u_xlatb56;
float u_xlat57;
float u_xlat59;
bool u_xlatb59;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati52 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati52 = u_xlati52 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat53 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat53 = sqrt(u_xlat53);
    u_xlat3.xy = vec2(u_xlat53) * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.xy = min(max(u_xlat3.xy, 0.0), 1.0);
#else
    u_xlat3.xy = clamp(u_xlat3.xy, 0.0, 1.0);
#endif
    u_xlat53 = in_COLOR0.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat3.x = u_xlat3.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb53 = !!(u_xlat3.x<u_xlat53);
#else
    u_xlatb53 = u_xlat3.x<u_xlat53;
#endif
    if(u_xlatb53){
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat4;
        u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat4;
        gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat53 = in_POSITION0.y * _Height.x;
    u_xlat53 = max(u_xlat53, 9.99999975e-05);
    u_xlat3.x = _Time.y + (-unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat3.x = u_xlat3.x * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat37 = fract(abs(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat3.x = u_xlat37 * u_xlat3.x;
    u_xlat37 = 10000.0 * unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat37 = fract(u_xlat37);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat54 = (-_Lightings.x) + 1.0;
    u_xlat4.x = u_xlat53 * u_xlat54 + _Lightings.x;
    u_xlat54 = in_COLOR0.y * 0.5 + 0.5;
    u_xlat54 = u_xlat54 * _Lightings.z;
    u_xlat38.x = _Lightings.y * 0.5;
    u_xlat4.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat54 + u_xlat38.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.y = min(max(u_xlat4.y, 0.0), 1.0);
#else
    u_xlat4.y = clamp(u_xlat4.y, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat6.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat38.xy = -abs(u_xlat6.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat38.xy = min(max(u_xlat38.xy, 0.0), 1.0);
#else
    u_xlat38.xy = clamp(u_xlat38.xy, 0.0, 1.0);
#endif
    u_xlat6.x = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat6.y = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb40.xy = greaterThanEqual(u_xlat6.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat38.xy = u_xlat38.xy * u_xlat6.xy;
    u_xlat38.x = (u_xlatb40.x) ? float(1.0) : u_xlat38.x;
    u_xlat38.y = (u_xlatb40.y) ? float(1.0) : u_xlat38.y;
    u_xlat54 = u_xlat38.y + u_xlat38.x;
    u_xlat54 = u_xlat54 * 0.5;
    u_xlat54 = min(u_xlat37, u_xlat54);
    u_xlat5.y = in_POSITION0.y;
    u_xlat6.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat38.x = (-u_xlat54) + 1.0;
    u_xlat5.xyz = u_xlat6.xyz * u_xlat38.xxx + u_xlat5.xyz;
    u_xlat5.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat5.xyz;
    u_xlat38.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat38.x = u_xlat38.x * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat6.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat7.z = u_xlat54 * u_xlat37;
    u_xlat37 = _WindParams1.y * 0.100000001;
    u_xlat54 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat38.y = log2(u_xlat53);
    u_xlat38.xy = u_xlat38.xy * vec2(6.28299999, 1.10000002);
    u_xlat55 = exp2(u_xlat38.y);
    u_xlat56 = dot(u_xlat6.xy, _WindParams1.zw);
    u_xlat56 = (-u_xlat56) * _WindParams0.y;
    u_xlat56 = _Time.y * _WindParams2.x + u_xlat56;
    u_xlat56 = u_xlat38.x * u_xlat37 + u_xlat56;
    u_xlat6.x = u_xlat56 + _WindParams2.y;
    u_xlat56 = _Time.y * _MiHoYoTimeScale.x + u_xlat38.x;
    u_xlat6.y = u_xlat56 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat40.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat40.xy;
    u_xlat7.xy = vec2(u_xlat55) * u_xlat6.xy;
    u_xlat6.xy = u_xlat7.zz * u_xlat7.xz;
    u_xlat40.xy = _MiHoYoWind.xz;
    u_xlat7.xw = u_xlat40.xy * u_xlat6.xx;
    u_xlat8.xz = vec2(u_xlat54) * u_xlat7.xw;
    u_xlat8.y = 0.0;
    u_xlat9.x = float(0.0);
    u_xlat9.w = float(0.0);
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat54) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat54 = u_xlat7.y * u_xlat6.y;
    u_xlat7.xyw = vec3(u_xlat54) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat54 = u_xlat55 * _MiHoYoWind.w;
    u_xlat54 = u_xlat54 * _WindParams1.x + 1.0;
    u_xlat54 = u_xlat54 * u_xlat54 + (-u_xlat54);
    u_xlat6.xy = u_xlat40.xy * vec2(u_xlat54);
    u_xlat6.xz = u_xlat7.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat54 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat54 = max(u_xlat54, 0.00100000005);
    u_xlat54 = inversesqrt(u_xlat54);
    u_xlat10.xyz = vec3(u_xlat54) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat7.xyw = u_xlat7.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat8.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.y = 0.0;
    u_xlat13.xyz = u_xlat10.xyz;
    u_xlat7.x = float(0.0);
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlati54 = 0;
    while(true){
        u_xlat56 = float(u_xlati54);
#ifdef UNITY_ADRENO_ES3
        u_xlatb56 = !!(u_xlat56>=_SphericalWindCount);
#else
        u_xlatb56 = u_xlat56>=_SphericalWindCount;
#endif
        if(u_xlatb56){break;}
        u_xlat14.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati54].xyz;
        u_xlat56 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat56 = sqrt(u_xlat56);
        u_xlat57 = (-u_xlat56) * _SphericalWind0[u_xlati54].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat57 = min(max(u_xlat57, 0.0), 1.0);
#else
        u_xlat57 = clamp(u_xlat57, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb59 = !!(0.0<u_xlat57);
#else
        u_xlatb59 = 0.0<u_xlat57;
#endif
        if(u_xlatb59){
            u_xlat31.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati54].xz;
            u_xlat56 = u_xlat56 + 0.00100000005;
            u_xlat9.xz = u_xlat14.xz / vec2(u_xlat56);
            u_xlat56 = u_xlat57 * _SphericalWind1[u_xlati54].x;
            u_xlat57 = u_xlat56 * _WindParams0.x;
            u_xlat59 = dot(u_xlat2.xz, u_xlat31.xz);
            u_xlat59 = (-u_xlat59) * _WindParams0.y;
            u_xlat59 = _Time.y * _SphericalWind1[u_xlati54].y + u_xlat59;
            u_xlat59 = u_xlat38.x * u_xlat37 + u_xlat59;
            u_xlat59 = u_xlat59 + _SphericalWind1[u_xlati54].w;
            u_xlat59 = u_xlat59 + 0.5;
            u_xlat59 = fract(u_xlat59);
            u_xlat59 = u_xlat59 * 2.0 + -1.0;
            u_xlat26 = abs(u_xlat59) * abs(u_xlat59);
            u_xlat59 = -abs(u_xlat59) * 2.0 + 3.0;
            u_xlat59 = u_xlat59 * u_xlat26;
            u_xlat59 = u_xlat55 * u_xlat59;
            u_xlat59 = u_xlat7.z * u_xlat59;
            u_xlat14.xy = u_xlat9.xz * vec2(u_xlat59);
            u_xlat8.xz = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat9.w) + u_xlat9.z, (-u_xlat9.x) + u_xlat9.w);
            u_xlat14.xy = vec2(u_xlat59) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat57) * u_xlat14.xy;
            u_xlat11.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat56 = u_xlat55 * u_xlat56;
            u_xlat56 = u_xlat56 * _WindParams1.x + 1.0;
            u_xlat56 = u_xlat56 * u_xlat56 + (-u_xlat56);
            u_xlat9.xy = vec2(u_xlat56) * u_xlat9.xz;
            u_xlat12.xz = u_xlat7.zz * u_xlat9.xy;
            u_xlat9.xyz = u_xlat11.xyz * _WindParams0.www + u_xlat8.xyz;
            u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + u_xlat13.xyz;
            u_xlat56 = dot(u_xlat9.xyz, u_xlat9.xyz);
            u_xlat56 = max(u_xlat56, 0.00100000005);
            u_xlat56 = inversesqrt(u_xlat56);
            u_xlat13.xyz = vec3(u_xlat56) * u_xlat9.xyz;
            u_xlat8.xzw = u_xlat8.xyz + u_xlat11.xyz;
            u_xlat8.xzw = u_xlat12.xyz + u_xlat8.xzw;
            u_xlat7.xyw = u_xlat7.xyw + u_xlat8.xzw;
        //ENDIF
        }
        u_xlati54 = u_xlati54 + 1;
    }
    u_xlat2.xyz = u_xlat6.xyz + u_xlat7.xyw;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat5.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat37 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat37);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat2.x = (-u_xlat3.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat4.xy) + vec2(1.0, 1.0);
    u_xlat2.xy = u_xlat2.xx * u_xlat16_15.xy + u_xlat4.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati52 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat2.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat2.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat3.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_4 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_4 + u_xlat0;
    u_xlat1.xyz = (-u_xlat1.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat13.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat13.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat13.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat2.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat2.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat2.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat13.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat13.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18 = u_xlat3.y * u_xlat18 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18 = (-u_xlat18) + 1.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat16_49 = u_xlat18 * u_xlat18;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_4 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat2.x = u_xlat3.y * _LeafEdgeSpeculars.x;
    u_xlat4 = u_xlat16_1 * u_xlat2.xxxx;
    u_xlat2.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat2.x = u_xlat53 * u_xlat2.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat4 = u_xlat2.xxxx * u_xlat4;
    u_xlat4 = u_xlat4 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat2.x = u_xlat4.w * u_xlat16_32.x;
    u_xlat19 = u_xlat53 + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb19 = !!(0.0<u_xlat19);
#else
    u_xlatb19 = 0.0<u_xlat19;
#endif
    u_xlat19 = (u_xlatb19) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat36 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat36 = max(u_xlat36, 0.0);
    u_xlat16_15.x = u_xlat19 * u_xlat36;
    u_xlat16_5 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_5 = u_xlat16_5 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_5;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat2.x * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat4 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_2 + u_xlat16_1;
    u_xlat13.w = u_xlat3.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat13;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat4.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat5.y = in_POSITION0.y;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat4.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat5.y = in_POSITION0.y;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat4.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat5.y = in_POSITION0.y;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec3 u_xlat1;
bvec2 u_xlatb1;
vec3 u_xlat2;
vec4 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat17;
int u_xlati17;
vec3 u_xlat27;
float u_xlat31;
bvec2 u_xlatb32;
vec2 u_xlat33;
int u_xlati43;
float u_xlat44;
bool u_xlatb44;
float u_xlat45;
bool u_xlatb45;
float u_xlat46;
float u_xlat47;
bool u_xlatb47;
float u_xlat49;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0);
    u_xlati43 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati43 = u_xlati43 << 3;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat3.xyz = (-u_xlat2.xyz) + _Pos.xyz;
    u_xlat44 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat44 = sqrt(u_xlat44);
    u_xlat44 = u_xlat44 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat44 = min(max(u_xlat44, 0.0), 1.0);
#else
    u_xlat44 = clamp(u_xlat44, 0.0, 1.0);
#endif
    u_xlat3.x = in_COLOR0.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat44 = u_xlat44 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb44 = !!(u_xlat44<u_xlat3.x);
#else
    u_xlatb44 = u_xlat44<u_xlat3.x;
#endif
    if(u_xlatb44){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat44 = in_POSITION0.y * _Height.x;
    u_xlat44 = max(u_xlat44, 9.99999975e-05);
    u_xlat3.x = 10000.0 * unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat3.x = fract(u_xlat3.x);
    u_xlat4.x = sin(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = cos(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat6.x = (-u_xlat4.x);
    u_xlat6.y = u_xlat5.x;
    u_xlat5.x = dot(u_xlat6.yx, in_POSITION0.xz);
    u_xlat6.z = u_xlat4.x;
    u_xlat5.z = dot(u_xlat6.zy, in_POSITION0.xz);
    u_xlat4.x = u_xlat5.x * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = u_xlat5.z * _Height.y + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat17.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat17.xy = min(max(u_xlat17.xy, 0.0), 1.0);
#else
    u_xlat17.xy = clamp(u_xlat17.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb32.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat17.xy = u_xlat17.xy * u_xlat4.xy;
    u_xlat17.x = (u_xlatb32.x) ? float(1.0) : u_xlat17.x;
    u_xlat17.y = (u_xlatb32.y) ? float(1.0) : u_xlat17.y;
    u_xlat17.x = u_xlat17.y + u_xlat17.x;
    u_xlat17.x = u_xlat17.x * 0.5;
    u_xlat17.x = min(u_xlat3.x, u_xlat17.x);
    u_xlat5.y = in_POSITION0.y;
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat5.xyz);
    u_xlat31 = (-u_xlat17.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat31) + u_xlat5.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat31 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat31 = u_xlat31 * 0.5 + in_COLOR0.y;
    u_xlat16_0.y = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat17.x * u_xlat3.x;
    u_xlat3.x = _WindParams1.y * 0.100000001;
    u_xlat17.x = _MiHoYoWind.w * _WindParams0.x;
    u_xlat44 = log2(u_xlat44);
    u_xlat44 = u_xlat44 * 1.10000002;
    u_xlat44 = exp2(u_xlat44);
    u_xlat31 = u_xlat31 * 6.28299999;
    u_xlat45 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat45 = (-u_xlat45) * _WindParams0.y;
    u_xlat45 = _Time.y * _WindParams2.x + u_xlat45;
    u_xlat45 = u_xlat31 * u_xlat3.x + u_xlat45;
    u_xlat5.x = u_xlat45 + _WindParams2.y;
    u_xlat45 = _Time.y * _MiHoYoTimeScale.x + u_xlat31;
    u_xlat5.y = u_xlat45 + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat33.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat33.xy;
    u_xlat6.xy = vec2(u_xlat44) * u_xlat5.xy;
    u_xlat5.xy = u_xlat6.zz * u_xlat6.xz;
    u_xlat33.xy = _MiHoYoWind.xz;
    u_xlat6.xw = u_xlat33.xy * u_xlat5.xx;
    u_xlat7.xz = u_xlat17.xx * u_xlat6.xw;
    u_xlat7.y = 0.0;
    u_xlat8.x = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = u_xlat17.xxx * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat17.x = u_xlat6.y * u_xlat5.y;
    u_xlat6.xyw = u_xlat17.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat17.x = u_xlat44 * _MiHoYoWind.w;
    u_xlat17.x = u_xlat17.x * _WindParams1.x + 1.0;
    u_xlat17.x = u_xlat17.x * u_xlat17.x + (-u_xlat17.x);
    u_xlat17.xz = u_xlat33.xy * u_xlat17.xx;
    u_xlat5.xz = u_xlat6.zz * u_xlat17.xz;
    u_xlat5.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat17.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat17.x = max(u_xlat17.x, 0.00100000005);
    u_xlat17.x = inversesqrt(u_xlat17.x);
    u_xlat9.xyz = u_xlat17.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat6.xyw = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati17 = 0;
    while(true){
        u_xlat45 = float(u_xlati17);
#ifdef UNITY_ADRENO_ES3
        u_xlatb45 = !!(u_xlat45>=_SphericalWindCount);
#else
        u_xlatb45 = u_xlat45>=_SphericalWindCount;
#endif
        if(u_xlatb45){break;}
        u_xlat13.xyz = (-u_xlat2.xyz) + _SphericalWind0[u_xlati17].xyz;
        u_xlat45 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat45 = sqrt(u_xlat45);
        u_xlat46 = (-u_xlat45) * _SphericalWind0[u_xlati17].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat46 = min(max(u_xlat46, 0.0), 1.0);
#else
        u_xlat46 = clamp(u_xlat46, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb47 = !!(0.0<u_xlat46);
#else
        u_xlatb47 = 0.0<u_xlat46;
#endif
        if(u_xlatb47){
            u_xlat27.xz = (-u_xlat2.xz) + _SphericalWind2[u_xlati17].xz;
            u_xlat45 = u_xlat45 + 0.00100000005;
            u_xlat8.xz = u_xlat13.xz / vec2(u_xlat45);
            u_xlat45 = u_xlat46 * _SphericalWind1[u_xlati17].x;
            u_xlat46 = u_xlat45 * _WindParams0.x;
            u_xlat47 = dot(u_xlat2.xz, u_xlat27.xz);
            u_xlat47 = (-u_xlat47) * _WindParams0.y;
            u_xlat47 = _Time.y * _SphericalWind1[u_xlati17].y + u_xlat47;
            u_xlat47 = u_xlat31 * u_xlat3.x + u_xlat47;
            u_xlat47 = u_xlat47 + _SphericalWind1[u_xlati17].w;
            u_xlat47 = u_xlat47 + 0.5;
            u_xlat47 = fract(u_xlat47);
            u_xlat47 = u_xlat47 * 2.0 + -1.0;
            u_xlat49 = abs(u_xlat47) * abs(u_xlat47);
            u_xlat47 = -abs(u_xlat47) * 2.0 + 3.0;
            u_xlat47 = u_xlat47 * u_xlat49;
            u_xlat47 = u_xlat44 * u_xlat47;
            u_xlat47 = u_xlat6.z * u_xlat47;
            u_xlat13.xy = u_xlat8.xz * vec2(u_xlat47);
            u_xlat7.xz = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat13.xy = vec2(u_xlat47) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat46) * u_xlat13.xy;
            u_xlat10.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat45 = u_xlat44 * u_xlat45;
            u_xlat45 = u_xlat45 * _WindParams1.x + 1.0;
            u_xlat45 = u_xlat45 * u_xlat45 + (-u_xlat45);
            u_xlat8.xy = vec2(u_xlat45) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat6.xyw;
            u_xlat45 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat45 = max(u_xlat45, 0.00100000005);
            u_xlat45 = inversesqrt(u_xlat45);
            u_xlat6.xyw = vec3(u_xlat45) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat10.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat12.xyz = u_xlat7.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati17 = u_xlati17 + 1;
    }
    u_xlat2.xyz = u_xlat5.xyz + u_xlat12.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_0.xy = sqrt(u_xlat16_0.xy);
    u_xlat44 = u_xlat16_0.x + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / vec3(u_xlat44);
    u_xlat1.xyz = u_xlat2.xyz * u_xlat16_0.yyy + u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz + unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = floor(abs(unity_Builtins0Array[u_xlati43 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(u_xlat1.xxxx, vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat6.xyw;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat4.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * u_xlat26.xxx + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + in_POSITION0.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + in_POSITION0.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + in_POSITION0.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat3.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + in_POSITION0.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
mediump vec4 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat5;
mediump float u_xlat16_7;
vec2 u_xlat9;
bool u_xlatb9;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9.x = sqrt(u_xlat9.x);
    u_xlat9.xy = u_xlat9.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat9.xy = min(max(u_xlat9.xy, 0.0), 1.0);
#else
    u_xlat9.xy = clamp(u_xlat9.xy, 0.0, 1.0);
#endif
    u_xlat9.x = u_xlat9.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9.x<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9.x<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat9.x = in_POSITION0.y * _Height.x;
    u_xlat9.x = max(u_xlat9.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat9.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat9.y) + 1.0;
    u_xlat16_3.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_3.xy + u_xlat2.xy;
    u_xlat16_0 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat1.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = u_xlat16_0 + (-_LowLODColor2);
    u_xlat0 = u_xlat9.yyyy * u_xlat0 + _LowLODColor2;
    u_xlat1.x = u_xlat9.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0<u_xlat1.x);
#else
    u_xlatb1 = 0.0<u_xlat1.x;
#endif
    u_xlat1.x = (u_xlatb1) ? 1.0 : 0.5;
    u_xlat16_3.x = _BaseSpeculars.w * 0.000144286227;
    u_xlat16_3.x = exp2(u_xlat16_3.x);
    u_xlat5 = _BaseSpeculars.z * u_xlat16_3.x + -0.5;
    u_xlat5 = max(u_xlat5, 0.0);
    u_xlat16_3.x = u_xlat1.x * u_xlat5;
    u_xlat16_2 = u_xlat0 * u_xlat16_3.xxxx;
    u_xlat16_2 = u_xlat16_2 * _LightColor0;
    u_xlat16_7 = _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7 = min(max(u_xlat16_7, 0.0), 1.0);
#else
    u_xlat16_7 = clamp(u_xlat16_7, 0.0, 1.0);
#endif
    vs_TEXCOORD1 = vec4(u_xlat16_7) * (-u_xlat16_2) + u_xlat16_2;
    u_xlat1.w = u_xlat9.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    vs_TEXCOORD0.w = u_xlat16_3.x;
    u_xlat1.x = float(0.0);
    u_xlat1.y = float(0.0);
    u_xlat1.z = float(0.0);
    vs_TEXCOORD2 = u_xlat1;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
vec4 u_xlat9;
mediump vec2 u_xlat16_10;
mediump float u_xlat16_11;
vec3 u_xlat13;
bool u_xlatb13;
vec3 u_xlat14;
mediump vec3 u_xlat16_22;
vec2 u_xlat26;
vec2 u_xlat27;
bvec2 u_xlatb27;
vec2 u_xlat30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
float u_xlat37;
float u_xlat38;
float u_xlat40;
float u_xlat41;
mediump float u_xlat16_46;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat13.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat13.xyz = (-u_xlat13.xyz) + _Pos.xyz;
    u_xlat13.x = dot(u_xlat13.xyz, u_xlat13.xyz);
    u_xlat13.x = sqrt(u_xlat13.x);
    u_xlat13.xy = u_xlat13.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.xy = min(max(u_xlat13.xy, 0.0), 1.0);
#else
    u_xlat13.xy = clamp(u_xlat13.xy, 0.0, 1.0);
#endif
    u_xlat37 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat13.x = u_xlat13.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(u_xlat13.x<u_xlat37);
#else
    u_xlatb13 = u_xlat13.x<u_xlat37;
#endif
    if(u_xlatb13){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat13.x = in_POSITION0.y * _Height.x;
    u_xlat13.x = max(u_xlat13.x, 9.99999975e-05);
    u_xlat37 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat37 = u_xlat37 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat2.x = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat37 = u_xlat37 * u_xlat2.x;
    u_xlat2.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat2.x = fract(u_xlat2.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat14.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat13.x * u_xlat14.x + _Lightings.x;
    u_xlat14.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat14.x = u_xlat14.x * _Lightings.z;
    u_xlat26.x = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat14.x + u_xlat26.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat14.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat14.xy = min(max(u_xlat14.xy, 0.0), 1.0);
#else
    u_xlat14.xy = clamp(u_xlat14.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb27.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat14.xy = u_xlat14.xy * u_xlat5.xy;
    u_xlat14.x = (u_xlatb27.x) ? float(1.0) : u_xlat14.x;
    u_xlat14.y = (u_xlatb27.y) ? float(1.0) : u_xlat14.y;
    u_xlat14.x = u_xlat14.y + u_xlat14.x;
    u_xlat14.x = u_xlat14.x * 0.5;
    u_xlat14.x = min(u_xlat2.x, u_xlat14.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat26.x = (-u_xlat14.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * u_xlat26.xxx + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat26.x = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat26.x = u_xlat26.x * 0.5 + in_COLOR0.y;
    u_xlat16_36 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_36 = sqrt(u_xlat16_36);
    u_xlat27.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat14.x * u_xlat2.x;
    u_xlat2.x = _WindParams1.y * 0.100000001;
    u_xlat38 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat40 = log2(u_xlat13.x);
    u_xlat40 = u_xlat40 * 1.10000002;
    u_xlat40 = exp2(u_xlat40);
    u_xlat41 = u_xlat26.x * 6.28299999;
    u_xlat6.x = dot(u_xlat27.xy, _MiHoYoWind.xz);
    u_xlat6.x = (-u_xlat6.x) * _WindParams0.y;
    u_xlat6.x = _Time.y * _WindParams2.x + u_xlat6.x;
    u_xlat2.x = u_xlat41 * u_xlat2.x + u_xlat6.x;
    u_xlat6.x = u_xlat2.x + _WindParams2.y;
    u_xlat2.x = _Time.y * _MiHoYoTimeScale.x + u_xlat41;
    u_xlat6.y = u_xlat2.x + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat30.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat30.xy;
    u_xlat5.xy = vec2(u_xlat40) * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat30.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat38) * u_xlat30.xy;
    u_xlat7.y = 0.0;
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat38) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat2.x = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = u_xlat2.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat2.x = u_xlat40 * _MiHoYoWind.w;
    u_xlat2.x = u_xlat2.x * _WindParams1.x + 1.0;
    u_xlat2.x = u_xlat2.x * u_xlat2.x + (-u_xlat2.x);
    u_xlat2.xw = u_xlat6.xy * u_xlat2.xx;
    u_xlat6.xz = u_xlat5.zz * u_xlat2.xw;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat2.x = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat2.x = max(u_xlat2.x, 0.00100000005);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat9.xyz = u_xlat2.xxx * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyz = u_xlat6.xyz + u_xlat5.xyz;
    u_xlat4.xyz = u_xlat4.xyz + u_xlat5.xyz;
    u_xlat16_10.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_10.x = sqrt(u_xlat16_10.x);
    u_xlat2.x = u_xlat16_10.x + 0.00100000005;
    u_xlat4.xyz = u_xlat4.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat14.x * u_xlat16_36;
    u_xlat14.xz = u_xlat27.xy + (-_GrassDisplacementArea.xy);
    u_xlat14.xz = vec2(u_xlat14.x / _GrassDisplacementArea.z, u_xlat14.z / _GrassDisplacementArea.w);
    u_xlat5.xyz = textureLod(_GrassDisplacementTex, u_xlat14.xz, 0.0).xyz;
    u_xlat5.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat14.x = dot(u_xlat5.xy, u_xlat5.xy);
    u_xlat14.x = sqrt(u_xlat14.x);
    u_xlat27.xy = u_xlat2.xx * u_xlat5.xy;
    u_xlat27.xy = u_xlat27.xy * _DisplacementParam.xx;
    u_xlat26.x = u_xlat26.x * 0.649999976 + 1.13;
    u_xlat26.xy = u_xlat26.xx * u_xlat27.xy;
    u_xlat6.xz = u_xlat26.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat14.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat14.x = max(u_xlat5.z, _DisplacementParam.z);
    u_xlat14.x = min(u_xlat14.x, _DisplacementParam.w);
    u_xlat6.y = u_xlat14.x * (-u_xlat2.x);
    u_xlat2.xyz = u_xlat4.xyz * vec3(u_xlat16_36) + u_xlat6.xyz;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat38 = (-u_xlat13.y) + 1.0;
    u_xlat16_10.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat38) * u_xlat16_10.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat13.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat37) * u_xlat16_3 + u_xlat0;
    u_xlat2.xyz = (-u_xlat2.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat1 = inversesqrt(u_xlat1);
    u_xlat2.xyz = vec3(u_xlat1) * u_xlat2.xyz;
    u_xlat16_10.x = dot(u_xlat2.xyz, u_xlat9.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.x = min(max(u_xlat16_10.x, 0.0), 1.0);
#else
    u_xlat16_10.x = clamp(u_xlat16_10.x, 0.0, 1.0);
#endif
    u_xlat16_22.x = dot((-u_xlat2.xyz), u_xlat9.xyz);
    u_xlat16_22.x = u_xlat16_22.x + u_xlat16_22.x;
    u_xlat16_22.x = u_xlat9.y * (-u_xlat16_22.x) + (-u_xlat2.y);
    u_xlat1 = u_xlat16_22.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat1 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_22.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_22.x = inversesqrt(u_xlat16_22.x);
    u_xlat16_22.xyz = u_xlat5.xyz * u_xlat16_22.xxx + u_xlat2.xyz;
    u_xlat16_11 = dot(u_xlat16_22.xyz, u_xlat16_22.xyz);
    u_xlat16_11 = inversesqrt(u_xlat16_11);
    u_xlat16_22.xyz = u_xlat16_22.xyz * vec3(u_xlat16_11);
    u_xlat16_11 = dot(u_xlat9.xyz, u_xlat16_22.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
    u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
    u_xlat16_10.y = dot(u_xlat16_22.xyz, u_xlat2.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_10.y = min(max(u_xlat16_10.y, 0.0), 1.0);
#else
    u_xlat16_10.y = clamp(u_xlat16_10.y, 0.0, 1.0);
#endif
    u_xlat1 = dot(u_xlat9.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat37 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat37 = u_xlat13.y * u_xlat37 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat37 = min(max(u_xlat37, 0.0), 1.0);
#else
    u_xlat37 = clamp(u_xlat37, 0.0, 1.0);
#endif
    u_xlat16_2 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat37 = (-u_xlat37) + 1.0;
    u_xlat37 = u_xlat37 * u_xlat37;
    u_xlat16_34 = u_xlat37 * u_xlat37;
    u_xlat16_46 = u_xlat16_34 * u_xlat16_34;
    u_xlat16_11 = u_xlat16_11 * u_xlat16_11;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + -1.0;
    u_xlat16_34 = u_xlat16_11 * u_xlat16_34 + 1.0;
    u_xlat16_46 = u_xlat16_46 * 0.5;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_34 + 9.99999975e-05;
    u_xlat16_34 = float(1.0) / float(u_xlat16_34);
    u_xlat16_34 = u_xlat16_34 * u_xlat16_46;
    u_xlat16_34 = u_xlat1 * u_xlat16_34;
    u_xlat16_34 = min(u_xlat16_34, 16.0);
    u_xlat16_10.xy = (-u_xlat16_10.xy) + vec2(1.00010002, 1.0);
    u_xlat16_46 = u_xlat16_10.y * u_xlat16_10.y;
    u_xlat16_46 = u_xlat16_46 * u_xlat16_46;
    u_xlat16_11 = u_xlat16_46 * u_xlat16_10.y;
    u_xlat16_22.x = (-u_xlat16_10.y) * u_xlat16_46 + 1.0;
    u_xlat16_2 = u_xlat16_22.xxxx * u_xlat16_2 + vec4(u_xlat16_11);
    u_xlat2 = u_xlat16_2 * vec4(u_xlat16_34);
    u_xlat16_2 = u_xlat2 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1 = u_xlat13.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_2 * vec4(u_xlat1);
    u_xlat1 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1 = u_xlat13.x * u_xlat1 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1 = min(max(u_xlat1, 0.0), 1.0);
#else
    u_xlat1 = clamp(u_xlat1, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat1) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_22.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1 = u_xlat3.w * u_xlat16_22.x;
    u_xlat13.x = u_xlat13.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb13 = !!(0.0<u_xlat13.x);
#else
    u_xlatb13 = 0.0<u_xlat13.x;
#endif
    u_xlat13.x = (u_xlatb13) ? 1.0 : 0.5;
    u_xlat16_10.x = log2(u_xlat16_10.x);
    u_xlat16_10.x = u_xlat16_10.x * _BaseSpeculars.w;
    u_xlat16_10.x = exp2(u_xlat16_10.x);
    u_xlat37 = _BaseSpeculars.z * u_xlat16_10.x + -0.5;
    u_xlat37 = max(u_xlat37, 0.0);
    u_xlat16_10.x = u_xlat13.x * u_xlat37;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_10.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_2 = u_xlat16_2 * _LightColor0 + u_xlat16_4;
    u_xlat16_34 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_34 = u_xlat1 * u_xlat16_34 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_22.xxxx + (-u_xlat16_2);
    vs_TEXCOORD1 = vec4(u_xlat16_34) * u_xlat16_3 + u_xlat16_2;
    u_xlat9.w = u_xlat13.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_10.x;
    vs_TEXCOORD2 = u_xlat9;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat3.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = (-u_xlat2.x);
    u_xlat4.y = u_xlat3.x;
    u_xlat3.x = dot(u_xlat4.yx, in_POSITION0.xz);
    u_xlat4.z = u_xlat2.x;
    u_xlat3.z = dot(u_xlat4.zy, in_POSITION0.xz);
    u_xlat2.x = u_xlat3.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = u_xlat3.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat4.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat3.y = in_POSITION0.y;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat3.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat3.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = (-u_xlat2.x);
    u_xlat4.y = u_xlat3.x;
    u_xlat3.x = dot(u_xlat4.yx, in_POSITION0.xz);
    u_xlat4.z = u_xlat2.x;
    u_xlat3.z = dot(u_xlat4.zy, in_POSITION0.xz);
    u_xlat2.x = u_xlat3.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = u_xlat3.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat4.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat3.y = in_POSITION0.y;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat3.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat3.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = (-u_xlat2.x);
    u_xlat4.y = u_xlat3.x;
    u_xlat3.x = dot(u_xlat4.yx, in_POSITION0.xz);
    u_xlat4.z = u_xlat2.x;
    u_xlat3.z = dot(u_xlat4.zy, in_POSITION0.xz);
    u_xlat2.x = u_xlat3.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = u_xlat3.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat4.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat3.y = in_POSITION0.y;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat3.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
float u_xlat7;
bool u_xlatb7;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat7 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat7 = sqrt(u_xlat7);
    u_xlat7 = u_xlat7 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat7 = u_xlat7 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7<in_COLOR0.y);
#else
    u_xlatb7 = u_xlat7<in_COLOR0.y;
#endif
    if(u_xlatb7){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
vec3 u_xlat3;
vec4 u_xlat4;
vec3 u_xlat5;
vec3 u_xlat6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump float u_xlat16_9;
vec3 u_xlat11;
bool u_xlatb11;
vec2 u_xlat21;
bvec2 u_xlatb22;
float u_xlat23;
vec2 u_xlat25;
mediump float u_xlat16_30;
float u_xlat31;
float u_xlat32;
float u_xlat33;
float u_xlat34;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat11.xyz = (-u_xlat11.xyz) + _Pos.xyz;
    u_xlat11.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat11.x = sqrt(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat21.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat11.x = u_xlat11.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat11.x<u_xlat21.x);
#else
    u_xlatb11 = u_xlat11.x<u_xlat21.x;
#endif
    if(u_xlatb11){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat11.x = in_POSITION0.y * _Height.x;
    u_xlat11.x = max(u_xlat11.x, 9.99999975e-05);
    u_xlat21.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat21.x = fract(u_xlat21.x);
    u_xlat2.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat3.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = (-u_xlat2.x);
    u_xlat4.y = u_xlat3.x;
    u_xlat3.x = dot(u_xlat4.yx, in_POSITION0.xz);
    u_xlat4.z = u_xlat2.x;
    u_xlat3.z = dot(u_xlat4.zy, in_POSITION0.xz);
    u_xlat2.x = u_xlat3.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat2.y = u_xlat3.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat2.xy = -abs(u_xlat2.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb22.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xy = u_xlat2.xy * u_xlat4.xy;
    u_xlat2.x = (u_xlatb22.x) ? float(1.0) : u_xlat2.x;
    u_xlat2.y = (u_xlatb22.y) ? float(1.0) : u_xlat2.y;
    u_xlat31 = u_xlat2.y + u_xlat2.x;
    u_xlat31 = u_xlat31 * 0.5;
    u_xlat31 = min(u_xlat21.x, u_xlat31);
    u_xlat3.y = in_POSITION0.y;
    u_xlat2.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat3.xyz);
    u_xlat32 = (-u_xlat31) + 1.0;
    u_xlat2.xyz = u_xlat2.xyz * vec3(u_xlat32) + u_xlat3.xyz;
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat2.xyz;
    u_xlat32 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat32 = u_xlat32 * 0.5 + in_COLOR0.y;
    u_xlat16_30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_30 = sqrt(u_xlat16_30);
    u_xlat3.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat4.z = u_xlat31 * u_xlat21.x;
    u_xlat21.x = _WindParams1.y * 0.100000001;
    u_xlat23 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat11.x = log2(u_xlat11.x);
    u_xlat11.x = u_xlat11.x * 1.10000002;
    u_xlat11.x = exp2(u_xlat11.x);
    u_xlat33 = u_xlat32 * 6.28299999;
    u_xlat34 = dot(u_xlat3.xy, _MiHoYoWind.xz);
    u_xlat34 = (-u_xlat34) * _WindParams0.y;
    u_xlat34 = _Time.y * _WindParams2.x + u_xlat34;
    u_xlat21.x = u_xlat33 * u_xlat21.x + u_xlat34;
    u_xlat5.x = u_xlat21.x + _WindParams2.y;
    u_xlat21.x = _Time.y * _MiHoYoTimeScale.x + u_xlat33;
    u_xlat5.y = u_xlat21.x + _MiHoYoTimeScale.y;
    u_xlat5.xy = u_xlat5.xy + vec2(0.5, 0.5);
    u_xlat5.xy = fract(u_xlat5.xy);
    u_xlat5.xy = u_xlat5.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat25.xy = abs(u_xlat5.xy) * abs(u_xlat5.xy);
    u_xlat5.xy = -abs(u_xlat5.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat5.xy = u_xlat5.xy * u_xlat25.xy;
    u_xlat4.xy = u_xlat11.xx * u_xlat5.xy;
    u_xlat4.xw = u_xlat4.zz * u_xlat4.xz;
    u_xlat5.xy = _MiHoYoWind.xz;
    u_xlat25.xy = u_xlat4.xx * u_xlat5.xy;
    u_xlat6.xz = vec2(u_xlat23) * u_xlat25.xy;
    u_xlat6.y = 0.0;
    u_xlat7.x = 0.0;
    u_xlat7.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat8.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat8.z = 0.0;
    u_xlat7.xyz = (-u_xlat7.xyz) + u_xlat8.xyz;
    u_xlat7.xyz = u_xlat4.xxx * u_xlat7.xyz;
    u_xlat7.xyz = vec3(u_xlat23) * u_xlat7.xyz;
    u_xlat8.xyz = u_xlat7.xyz * _WindParams2.zzz;
    u_xlat21.x = u_xlat4.y * u_xlat4.w;
    u_xlat4.xyw = u_xlat21.xxx * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat11.x = u_xlat11.x * _MiHoYoWind.w;
    u_xlat11.x = u_xlat11.x * _WindParams1.x + 1.0;
    u_xlat11.x = u_xlat11.x * u_xlat11.x + (-u_xlat11.x);
    u_xlat11.xy = u_xlat5.xy * u_xlat11.xx;
    u_xlat5.xz = u_xlat4.zz * u_xlat11.xy;
    u_xlat5.y = 0.0;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
    u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat11.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat11.x = max(u_xlat11.x, 0.00100000005);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat8.xyz = u_xlat11.xxx * u_xlat8.xyz;
    u_xlat6.xyz = u_xlat7.xyz * _WindParams2.zzz + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat4.xyw * _WindParams2.www + u_xlat6.xyz;
    u_xlat4.xyz = u_xlat5.xyz + u_xlat4.xyz;
    u_xlat2.xyz = u_xlat2.xyz + u_xlat4.xyz;
    u_xlat16_9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_9 = sqrt(u_xlat16_9);
    u_xlat11.x = u_xlat16_9 + 0.00100000005;
    u_xlat2.xyz = u_xlat2.xyz / u_xlat11.xxx;
    u_xlat11.x = u_xlat31 * u_xlat16_30;
    u_xlat21.xy = u_xlat3.xy + (-_GrassDisplacementArea.xy);
    u_xlat21.xy = vec2(u_xlat21.x / _GrassDisplacementArea.z, u_xlat21.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat21.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat21.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat21.x = sqrt(u_xlat21.x);
    u_xlat3.xy = u_xlat11.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat31 = u_xlat32 * 0.649999976 + 1.13;
    u_xlat3.xy = vec2(u_xlat31) * u_xlat3.xy;
    u_xlat4.xz = u_xlat3.xy * vec2(0.75, 0.75);
    u_xlat11.x = u_xlat11.x * u_xlat21.x;
    u_xlat11.x = u_xlat11.x * _DisplacementParam.y;
    u_xlat21.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat21.x = min(u_xlat21.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat21.x * (-u_xlat11.x);
    u_xlat11.xyz = u_xlat2.xyz * vec3(u_xlat16_30) + u_xlat4.xyz;
    u_xlat11.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat11.xyz;
    u_xlat11.xyz = u_xlat11.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat11.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat11.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat11.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat8.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
bvec2 u_xlatb38;
float u_xlat39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb38.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat4.xy;
    u_xlat37.x = (u_xlatb38.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb38.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat54) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
bvec2 u_xlatb38;
float u_xlat39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb38.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat4.xy;
    u_xlat37.x = (u_xlatb38.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb38.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat54) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
bvec2 u_xlatb38;
float u_xlat39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb38.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat4.xy;
    u_xlat37.x = (u_xlatb38.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb38.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat54) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
bvec2 u_xlatb38;
float u_xlat39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat4.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat4.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat4.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat4.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat4.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb38.xy = greaterThanEqual(u_xlat4.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat4.xy;
    u_xlat37.x = (u_xlatb38.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb38.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat4.xyz * vec3(u_xlat54) + in_POSITION0.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = in_POSITION0.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = in_POSITION0.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-in_POSITION0.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + in_POSITION0.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
float u_xlat39;
bvec2 u_xlatb39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat5.xy;
    u_xlat37.x = (u_xlatb39.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb39.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat54) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
float u_xlat39;
bvec2 u_xlatb39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat5.xy;
    u_xlat37.x = (u_xlatb39.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb39.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat54) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
float u_xlat39;
bvec2 u_xlatb39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat5.xy;
    u_xlat37.x = (u_xlatb39.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb39.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat54) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0.x = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0.x) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0117647061;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = vs_TEXCOORD0.w;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
mediump vec4 u_xlat16_2;
vec4 u_xlat3;
vec4 u_xlat4;
mediump vec4 u_xlat16_4;
vec4 u_xlat5;
mediump vec4 u_xlat16_5;
vec3 u_xlat6;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
float u_xlat8;
bool u_xlatb8;
mediump float u_xlat16_14;
vec2 u_xlat15;
bool u_xlatb15;
int u_xlati16;
mediump float u_xlat16_21;
float u_xlat23;
bool u_xlatb23;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat15.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15.x = sqrt(u_xlat15.x);
    u_xlat15.xy = u_xlat15.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat15.xy = min(max(u_xlat15.xy, 0.0), 1.0);
#else
    u_xlat15.xy = clamp(u_xlat15.xy, 0.0, 1.0);
#endif
    u_xlat15.x = u_xlat15.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat15.x<in_COLOR0.y);
#else
    u_xlatb15 = u_xlat15.x<in_COLOR0.y;
#endif
    if(u_xlatb15){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat15.x = in_POSITION0.y * _Height.x;
    u_xlat15.x = max(u_xlat15.x, 9.99999975e-05);
    u_xlat2.x = (-_Lightings.x) + 1.0;
    u_xlat2.x = u_xlat15.x * u_xlat2.x + _Lightings.x;
    u_xlat2.y = _Lightings.y * 0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.y = min(max(u_xlat2.y, 0.0), 1.0);
#else
    u_xlat2.y = clamp(u_xlat2.y, 0.0, 1.0);
#endif
    u_xlat3.x = float(0.0);
    u_xlat3.y = float(0.0);
    u_xlat3.z = float(0.0);
    u_xlati16 = 0;
    while(true){
        u_xlat23 = float(u_xlati16);
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(u_xlat23>=_SphericalWindCount);
#else
        u_xlatb23 = u_xlat23>=_SphericalWindCount;
#endif
        if(u_xlatb23){break;}
        u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati16].xyz;
        u_xlat23 = dot(u_xlat4.xyz, u_xlat4.xyz);
        u_xlat23 = sqrt(u_xlat23);
        u_xlat23 = (-u_xlat23) * _SphericalWind0[u_xlati16].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat23 = min(max(u_xlat23, 0.0), 1.0);
#else
        u_xlat23 = clamp(u_xlat23, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb23 = !!(0.0<u_xlat23);
#else
        u_xlatb23 = 0.0<u_xlat23;
#endif
        if(u_xlatb23){
            u_xlat23 = dot(u_xlat3.xyz, u_xlat3.xyz);
            u_xlat23 = max(u_xlat23, 0.00100000005);
            u_xlat23 = inversesqrt(u_xlat23);
            u_xlat3.xyz = vec3(u_xlat23) * u_xlat3.xyz;
        //ENDIF
        }
        u_xlati16 = u_xlati16 + 1;
    }
    u_xlat4 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat4 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat4;
    gl_Position = u_xlat4 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1.x = (-u_xlat15.y) + 1.0;
    u_xlat16_5.xy = (-u_xlat2.xy) + vec2(1.0, 1.0);
    u_xlat1.xy = u_xlat1.xx * u_xlat16_5.xy + u_xlat2.xy;
    u_xlat16_2 = _Color2 * u_xlat1.yyyy + (-_AOColor);
    u_xlat16_2 = u_xlat1.xxxx * u_xlat16_2 + _AOColor;
    u_xlat2 = u_xlat16_2 + (-_LowLODColor2);
    u_xlat2 = u_xlat15.yyyy * u_xlat2 + _LowLODColor2;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat4.xyz = u_xlat1.xxx * u_xlat4.xyz;
    u_xlat16_0.x = dot(u_xlat4.xyz, u_xlat3.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.x = min(max(u_xlat16_0.x, 0.0), 1.0);
#else
    u_xlat16_0.x = clamp(u_xlat16_0.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = dot((-u_xlat4.xyz), u_xlat3.xyz);
    u_xlat16_7.x = u_xlat16_7.x + u_xlat16_7.x;
    u_xlat16_7.x = u_xlat3.y * (-u_xlat16_7.x) + (-u_xlat4.y);
    u_xlat1.x = u_xlat16_7.x + (-_WorldSpaceLightPos0.y);
    u_xlat6.y = _SpecularExtra.x * u_xlat1.x + _WorldSpaceLightPos0.y;
    u_xlat6.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_7.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_7.xyz = u_xlat6.xyz * u_xlat16_7.xxx + u_xlat4.xyz;
    u_xlat16_5.x = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_5.xxx;
    u_xlat16_5.x = dot(u_xlat3.xyz, u_xlat16_7.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_0.y = dot(u_xlat16_7.xyz, u_xlat4.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0.y = min(max(u_xlat16_0.y, 0.0), 1.0);
#else
    u_xlat16_0.y = clamp(u_xlat16_0.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat3.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat8 = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat8 = u_xlat15.y * u_xlat8 + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat8 = min(max(u_xlat8, 0.0), 1.0);
#else
    u_xlat8 = clamp(u_xlat8, 0.0, 1.0);
#endif
    u_xlat16_4 = u_xlat2 * _BaseSpeculars.xxxx;
    u_xlat8 = (-u_xlat8) + 1.0;
    u_xlat8 = u_xlat8 * u_xlat8;
    u_xlat16_14 = u_xlat8 * u_xlat8;
    u_xlat16_21 = u_xlat16_14 * u_xlat16_14;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + -1.0;
    u_xlat16_14 = u_xlat16_5.x * u_xlat16_14 + 1.0;
    u_xlat16_21 = u_xlat16_21 * 0.5;
    u_xlat16_14 = u_xlat16_14 * u_xlat16_14 + 9.99999975e-05;
    u_xlat16_14 = float(1.0) / float(u_xlat16_14);
    u_xlat16_14 = u_xlat16_14 * u_xlat16_21;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14;
    u_xlat16_14 = min(u_xlat16_14, 16.0);
    u_xlat16_0.xy = (-u_xlat16_0.xy) + vec2(1.00010002, 1.0);
    u_xlat16_21 = u_xlat16_0.y * u_xlat16_0.y;
    u_xlat16_21 = u_xlat16_21 * u_xlat16_21;
    u_xlat16_5.x = u_xlat16_21 * u_xlat16_0.y;
    u_xlat16_7.x = (-u_xlat16_0.y) * u_xlat16_21 + 1.0;
    u_xlat16_4 = u_xlat16_7.xxxx * u_xlat16_4 + u_xlat16_5.xxxx;
    u_xlat4 = vec4(u_xlat16_14) * u_xlat16_4;
    u_xlat16_4 = u_xlat4 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat1.x = u_xlat15.y * _LeafEdgeSpeculars.x;
    u_xlat5 = u_xlat16_4 * u_xlat1.xxxx;
    u_xlat1.x = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat1.x = u_xlat15.x * u_xlat1.x + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat1.xxxx * u_xlat5;
    u_xlat5 = u_xlat5 * _LightColor0;
    u_xlat16_7.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat1.x = u_xlat16_7.x * u_xlat5.w;
    u_xlat8 = u_xlat15.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(0.0<u_xlat8);
#else
    u_xlatb8 = 0.0<u_xlat8;
#endif
    u_xlat8 = (u_xlatb8) ? 1.0 : 0.5;
    u_xlat16_0.x = log2(u_xlat16_0.x);
    u_xlat16_0.x = u_xlat16_0.x * _BaseSpeculars.w;
    u_xlat16_0.x = exp2(u_xlat16_0.x);
    u_xlat15.x = _BaseSpeculars.z * u_xlat16_0.x + -0.5;
    u_xlat15.x = max(u_xlat15.x, 0.0);
    u_xlat16_0.x = u_xlat8 * u_xlat15.x;
    u_xlat16_6 = u_xlat2 * u_xlat16_0.xxxx;
    u_xlat16_6 = u_xlat16_6 * _LightColor0;
    u_xlat16_4 = u_xlat16_4 * _LightColor0 + u_xlat16_6;
    u_xlat16_14 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_14 = u_xlat1.x * u_xlat16_14 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_14 = min(max(u_xlat16_14, 0.0), 1.0);
#else
    u_xlat16_14 = clamp(u_xlat16_14, 0.0, 1.0);
#endif
    u_xlat16_5 = u_xlat5 * u_xlat16_7.xxxx + (-u_xlat16_4);
    vs_TEXCOORD1 = vec4(u_xlat16_14) * u_xlat16_5 + u_xlat16_4;
    u_xlat3.w = u_xlat15.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat2.xyz;
    vs_TEXCOORD0.w = u_xlat16_0.x;
    vs_TEXCOORD2 = u_xlat3;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _LightColor0;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump float _ReciprocalBurnTime;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _BaseSpeculars;
uniform 	mediump vec4 _LeafEdgeSpeculars;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _AOColor;
uniform 	mediump vec4 _LowLODColor;
uniform 	mediump vec4 _Color2;
uniform 	mediump vec4 _LowLODColor2;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _SpecularColor;
uniform 	mediump vec4 _Lightings;
uniform 	mediump vec4 _SpecularExtra;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
vec3 u_xlat2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec4 u_xlat16_3;
vec3 u_xlat4;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec4 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec4 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat14;
mediump vec2 u_xlat16_15;
mediump float u_xlat16_16;
vec3 u_xlat18;
float u_xlat25;
vec3 u_xlat31;
mediump vec3 u_xlat16_32;
float u_xlat36;
vec2 u_xlat37;
float u_xlat39;
bvec2 u_xlatb39;
vec2 u_xlat41;
mediump float u_xlat16_49;
mediump float u_xlat16_51;
float u_xlat52;
float u_xlat53;
float u_xlat54;
float u_xlat55;
int u_xlati55;
float u_xlat56;
float u_xlat57;
float u_xlat58;
bool u_xlatb58;
float u_xlat60;
bool u_xlatb60;
float u_xlat61;
mediump float u_xlat16_66;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat18.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.xy = u_xlat2.xx * _DistanceCoeff.xz + _DistanceConst.xz;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.xy = min(max(u_xlat2.xy, 0.0), 1.0);
#else
    u_xlat2.xy = clamp(u_xlat2.xy, 0.0, 1.0);
#endif
    u_xlat36 = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat36);
#else
    u_xlatb2 = u_xlat2.x<u_xlat36;
#endif
    if(u_xlatb2){
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat3;
        u_xlat3 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat3;
        gl_Position = u_xlat3 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat36 = _Time.y + (-unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].x);
    u_xlat36 = u_xlat36 * _ReciprocalBurnTime;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat53 = fract(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlat36 = u_xlat53 * u_xlat36;
    u_xlat53 = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat53 = fract(u_xlat53);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = (-_Lightings.x) + 1.0;
    u_xlat3.x = u_xlat2.x * u_xlat3.x + _Lightings.x;
    u_xlat37.x = in_COLOR0.y * 0.5 + 0.5;
    u_xlat37.x = u_xlat37.x * _Lightings.z;
    u_xlat54 = _Lightings.y * 0.5;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w * u_xlat37.x + u_xlat54;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.y = min(max(u_xlat3.y, 0.0), 1.0);
#else
    u_xlat3.y = clamp(u_xlat3.y, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat5.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat37.xy = -abs(u_xlat5.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat37.xy = min(max(u_xlat37.xy, 0.0), 1.0);
#else
    u_xlat37.xy = clamp(u_xlat37.xy, 0.0, 1.0);
#endif
    u_xlat5.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat5.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb39.xy = greaterThanEqual(u_xlat5.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat37.xy = u_xlat37.xy * u_xlat5.xy;
    u_xlat37.x = (u_xlatb39.x) ? float(1.0) : u_xlat37.x;
    u_xlat37.y = (u_xlatb39.y) ? float(1.0) : u_xlat37.y;
    u_xlat37.x = u_xlat37.y + u_xlat37.x;
    u_xlat37.x = u_xlat37.x * 0.5;
    u_xlat37.x = min(u_xlat53, u_xlat37.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat5.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat54 = (-u_xlat37.x) + 1.0;
    u_xlat4.xyz = u_xlat5.xyz * vec3(u_xlat54) + u_xlat4.xyz;
    u_xlat4.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat4.xyz;
    u_xlat54 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat54 = u_xlat54 * 0.5 + in_COLOR0.y;
    u_xlat16_51 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat16_51 = sqrt(u_xlat16_51);
    u_xlat5.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat6.z = u_xlat53 * u_xlat37.x;
    u_xlat53 = _WindParams1.y * 0.100000001;
    u_xlat55 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat39 = log2(u_xlat2.x);
    u_xlat39 = u_xlat39 * 1.10000002;
    u_xlat39 = exp2(u_xlat39);
    u_xlat56 = u_xlat54 * 6.28299999;
    u_xlat57 = dot(u_xlat5.xy, _WindParams1.zw);
    u_xlat57 = (-u_xlat57) * _WindParams0.y;
    u_xlat57 = _Time.y * _WindParams2.x + u_xlat57;
    u_xlat57 = u_xlat56 * u_xlat53 + u_xlat57;
    u_xlat7.x = u_xlat57 + _WindParams2.y;
    u_xlat57 = _Time.y * _MiHoYoTimeScale.x + u_xlat56;
    u_xlat7.y = u_xlat57 + _MiHoYoTimeScale.y;
    u_xlat7.xy = u_xlat7.xy + vec2(0.5, 0.5);
    u_xlat7.xy = fract(u_xlat7.xy);
    u_xlat7.xy = u_xlat7.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat41.xy = abs(u_xlat7.xy) * abs(u_xlat7.xy);
    u_xlat7.xy = -abs(u_xlat7.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat7.xy = u_xlat7.xy * u_xlat41.xy;
    u_xlat6.xy = vec2(u_xlat39) * u_xlat7.xy;
    u_xlat6.xw = u_xlat6.zz * u_xlat6.xz;
    u_xlat7.xy = _MiHoYoWind.xz;
    u_xlat41.xy = u_xlat6.xx * u_xlat7.xy;
    u_xlat8.xz = vec2(u_xlat55) * u_xlat41.xy;
    u_xlat8.y = float(0.0);
    u_xlat8.w = float(0.0);
    u_xlat9.x = 0.0;
    u_xlat9.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat10.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat10.z = 0.0;
    u_xlat9.xyz = (-u_xlat9.xyz) + u_xlat10.xyz;
    u_xlat9.xyz = u_xlat6.xxx * u_xlat9.xyz;
    u_xlat9.xyz = vec3(u_xlat55) * u_xlat9.xyz;
    u_xlat10.xyz = u_xlat9.xyz * _WindParams2.zzz;
    u_xlat55 = u_xlat6.y * u_xlat6.w;
    u_xlat6.xyw = vec3(u_xlat55) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat55 = u_xlat39 * _MiHoYoWind.w;
    u_xlat55 = u_xlat55 * _WindParams1.x + 1.0;
    u_xlat55 = u_xlat55 * u_xlat55 + (-u_xlat55);
    u_xlat7.xy = u_xlat7.xy * vec2(u_xlat55);
    u_xlat7.xz = u_xlat6.zz * u_xlat7.xy;
    u_xlat7.y = 0.0;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.www + u_xlat8.xyz;
    u_xlat10.xyz = u_xlat10.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat55 = dot(u_xlat10.xyz, u_xlat10.xyz);
    u_xlat55 = max(u_xlat55, 0.00100000005);
    u_xlat55 = inversesqrt(u_xlat55);
    u_xlat10.xyz = vec3(u_xlat55) * u_xlat10.xyz;
    u_xlat8.xyz = u_xlat9.xyz * _WindParams2.zzz + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat6.xyw * _WindParams2.www + u_xlat8.xyz;
    u_xlat6.xyw = u_xlat7.xyz + u_xlat6.xyw;
    u_xlat7.y = 0.0;
    u_xlat9.y = 0.0;
    u_xlat11.y = 0.0;
    u_xlat12.xyz = u_xlat10.xyz;
    u_xlat13.x = float(0.0);
    u_xlat13.y = float(0.0);
    u_xlat13.z = float(0.0);
    u_xlati55 = 0;
    while(true){
        u_xlat58 = float(u_xlati55);
#ifdef UNITY_ADRENO_ES3
        u_xlatb58 = !!(u_xlat58>=_SphericalWindCount);
#else
        u_xlatb58 = u_xlat58>=_SphericalWindCount;
#endif
        if(u_xlatb58){break;}
        u_xlat14.xyz = (-u_xlat18.xyz) + _SphericalWind0[u_xlati55].xyz;
        u_xlat58 = dot(u_xlat14.xyz, u_xlat14.xyz);
        u_xlat58 = sqrt(u_xlat58);
        u_xlat25 = (-u_xlat58) * _SphericalWind0[u_xlati55].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat25 = min(max(u_xlat25, 0.0), 1.0);
#else
        u_xlat25 = clamp(u_xlat25, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb60 = !!(0.0<u_xlat25);
#else
        u_xlatb60 = 0.0<u_xlat25;
#endif
        if(u_xlatb60){
            u_xlat31.xz = (-u_xlat18.xz) + _SphericalWind2[u_xlati55].xz;
            u_xlat58 = u_xlat58 + 0.00100000005;
            u_xlat8.xz = u_xlat14.xz / vec2(u_xlat58);
            u_xlat58 = u_xlat25 * _SphericalWind1[u_xlati55].x;
            u_xlat25 = u_xlat58 * _WindParams0.x;
            u_xlat60 = dot(u_xlat18.xz, u_xlat31.xz);
            u_xlat60 = (-u_xlat60) * _WindParams0.y;
            u_xlat60 = _Time.y * _SphericalWind1[u_xlati55].y + u_xlat60;
            u_xlat60 = u_xlat56 * u_xlat53 + u_xlat60;
            u_xlat60 = u_xlat60 + _SphericalWind1[u_xlati55].w;
            u_xlat60 = u_xlat60 + 0.5;
            u_xlat60 = fract(u_xlat60);
            u_xlat60 = u_xlat60 * 2.0 + -1.0;
            u_xlat61 = abs(u_xlat60) * abs(u_xlat60);
            u_xlat60 = -abs(u_xlat60) * 2.0 + 3.0;
            u_xlat60 = u_xlat60 * u_xlat61;
            u_xlat60 = u_xlat39 * u_xlat60;
            u_xlat60 = u_xlat6.z * u_xlat60;
            u_xlat14.xy = u_xlat8.xz * vec2(u_xlat60);
            u_xlat7.xz = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat14.xy = vec2((-u_xlat8.w) + u_xlat8.z, (-u_xlat8.x) + u_xlat8.w);
            u_xlat14.xy = vec2(u_xlat60) * u_xlat14.xy;
            u_xlat14.xy = vec2(u_xlat25) * u_xlat14.xy;
            u_xlat9.xz = u_xlat14.xy * vec2(0.150000006, 0.150000006);
            u_xlat58 = u_xlat39 * u_xlat58;
            u_xlat58 = u_xlat58 * _WindParams1.x + 1.0;
            u_xlat58 = u_xlat58 * u_xlat58 + (-u_xlat58);
            u_xlat8.xy = vec2(u_xlat58) * u_xlat8.xz;
            u_xlat11.xz = u_xlat6.zz * u_xlat8.xy;
            u_xlat8.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
            u_xlat8.xyz = u_xlat8.xyz * _WindParams0.zzz + u_xlat12.xyz;
            u_xlat58 = dot(u_xlat8.xyz, u_xlat8.xyz);
            u_xlat58 = max(u_xlat58, 0.00100000005);
            u_xlat58 = inversesqrt(u_xlat58);
            u_xlat12.xyz = vec3(u_xlat58) * u_xlat8.xyz;
            u_xlat7.xzw = u_xlat7.xyz + u_xlat9.xyz;
            u_xlat7.xzw = u_xlat11.xyz + u_xlat7.xzw;
            u_xlat13.xyz = u_xlat7.xzw + u_xlat13.xyz;
        //ENDIF
        }
        u_xlati55 = u_xlati55 + 1;
    }
    u_xlat18.xyz = u_xlat6.xyw + u_xlat13.xyz;
    u_xlat18.xyz = u_xlat18.xyz + u_xlat4.xyz;
    u_xlat16_15.x = dot(u_xlat18.xyz, u_xlat18.xyz);
    u_xlat16_15.x = sqrt(u_xlat16_15.x);
    u_xlat53 = u_xlat16_15.x + 0.00100000005;
    u_xlat18.xyz = u_xlat18.xyz / vec3(u_xlat53);
    u_xlat53 = u_xlat37.x * u_xlat16_51;
    u_xlat4.xy = u_xlat5.xy + (-_GrassDisplacementArea.xy);
    u_xlat4.xy = vec2(u_xlat4.x / _GrassDisplacementArea.z, u_xlat4.y / _GrassDisplacementArea.w);
    u_xlat4.xyz = textureLod(_GrassDisplacementTex, u_xlat4.xy, 0.0).xyz;
    u_xlat4.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat37.x = dot(u_xlat4.xy, u_xlat4.xy);
    u_xlat37.x = sqrt(u_xlat37.x);
    u_xlat4.xy = vec2(u_xlat53) * u_xlat4.xy;
    u_xlat4.xy = u_xlat4.xy * _DisplacementParam.xx;
    u_xlat54 = u_xlat54 * 0.649999976 + 1.13;
    u_xlat4.xy = vec2(u_xlat54) * u_xlat4.xy;
    u_xlat5.xz = u_xlat4.xy * vec2(0.75, 0.75);
    u_xlat53 = u_xlat53 * u_xlat37.x;
    u_xlat53 = u_xlat53 * _DisplacementParam.y;
    u_xlat37.x = max(u_xlat4.z, _DisplacementParam.z);
    u_xlat37.x = min(u_xlat37.x, _DisplacementParam.w);
    u_xlat5.y = (-u_xlat53) * u_xlat37.x;
    u_xlat18.xyz = u_xlat18.xyz * vec3(u_xlat16_51) + u_xlat5.xyz;
    u_xlat18.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat18.xyz;
    u_xlat18.xyz = u_xlat18.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat18.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat18.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat18.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat53 = (-u_xlat2.y) + 1.0;
    u_xlat16_15.xy = (-u_xlat3.xy) + vec2(1.0, 1.0);
    u_xlat3.xy = vec2(u_xlat53) * u_xlat16_15.xy + u_xlat3.xy;
    u_xlat16_0 = _Color + (-_Color2);
    u_xlat16_0 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_0 + _Color2;
    u_xlat16_4 = _LowLODColor + (-_LowLODColor2);
    u_xlat16_4 = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].wwww * u_xlat16_4 + _LowLODColor2;
    u_xlat16_0 = u_xlat16_0 * u_xlat3.yyyy + (-_AOColor);
    u_xlat16_0 = u_xlat3.xxxx * u_xlat16_0 + _AOColor;
    u_xlat0 = (-u_xlat16_4) + u_xlat16_0;
    u_xlat0 = u_xlat2.yyyy * u_xlat0 + u_xlat16_4;
    u_xlat16_3 = (-u_xlat0) + _BurnedColor;
    u_xlat16_0 = vec4(u_xlat36) * u_xlat16_3 + u_xlat0;
    u_xlat1.xyz = (-u_xlat18.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat52 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat52 = inversesqrt(u_xlat52);
    u_xlat1.xyz = vec3(u_xlat52) * u_xlat1.xyz;
    u_xlat16_15.x = dot(u_xlat1.xyz, u_xlat12.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.x = min(max(u_xlat16_15.x, 0.0), 1.0);
#else
    u_xlat16_15.x = clamp(u_xlat16_15.x, 0.0, 1.0);
#endif
    u_xlat16_32.x = dot((-u_xlat1.xyz), u_xlat12.xyz);
    u_xlat16_32.x = u_xlat16_32.x + u_xlat16_32.x;
    u_xlat16_32.x = u_xlat12.y * (-u_xlat16_32.x) + (-u_xlat1.y);
    u_xlat52 = u_xlat16_32.x + (-_WorldSpaceLightPos0.y);
    u_xlat5.y = _SpecularExtra.x * u_xlat52 + _WorldSpaceLightPos0.y;
    u_xlat5.xz = _WorldSpaceLightPos0.xz;
    u_xlat16_32.x = dot(u_xlat5.xyz, u_xlat5.xyz);
    u_xlat16_32.x = inversesqrt(u_xlat16_32.x);
    u_xlat16_32.xyz = u_xlat5.xyz * u_xlat16_32.xxx + u_xlat1.xyz;
    u_xlat16_16 = dot(u_xlat16_32.xyz, u_xlat16_32.xyz);
    u_xlat16_16 = inversesqrt(u_xlat16_16);
    u_xlat16_32.xyz = u_xlat16_32.xyz * vec3(u_xlat16_16);
    u_xlat16_16 = dot(u_xlat12.xyz, u_xlat16_32.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_16 = min(max(u_xlat16_16, 0.0), 1.0);
#else
    u_xlat16_16 = clamp(u_xlat16_16, 0.0, 1.0);
#endif
    u_xlat16_15.y = dot(u_xlat16_32.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_15.y = min(max(u_xlat16_15.y, 0.0), 1.0);
#else
    u_xlat16_15.y = clamp(u_xlat16_15.y, 0.0, 1.0);
#endif
    u_xlat1.x = dot(u_xlat12.xyz, _WorldSpaceLightPos0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat18.x = (-_BaseSpeculars.y) + _LeafEdgeSpeculars.y;
    u_xlat18.x = u_xlat2.y * u_xlat18.x + _BaseSpeculars.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat16_0 * _BaseSpeculars.xxxx;
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat18.x;
    u_xlat16_49 = u_xlat18.x * u_xlat18.x;
    u_xlat16_66 = u_xlat16_49 * u_xlat16_49;
    u_xlat16_16 = u_xlat16_16 * u_xlat16_16;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + -1.0;
    u_xlat16_49 = u_xlat16_16 * u_xlat16_49 + 1.0;
    u_xlat16_66 = u_xlat16_66 * 0.5;
    u_xlat16_49 = u_xlat16_49 * u_xlat16_49 + 9.99999975e-05;
    u_xlat16_49 = float(1.0) / float(u_xlat16_49);
    u_xlat16_49 = u_xlat16_49 * u_xlat16_66;
    u_xlat16_49 = u_xlat1.x * u_xlat16_49;
    u_xlat16_49 = min(u_xlat16_49, 16.0);
    u_xlat16_15.xy = (-u_xlat16_15.xy) + vec2(1.00010002, 1.0);
    u_xlat16_66 = u_xlat16_15.y * u_xlat16_15.y;
    u_xlat16_66 = u_xlat16_66 * u_xlat16_66;
    u_xlat16_16 = u_xlat16_66 * u_xlat16_15.y;
    u_xlat16_32.x = (-u_xlat16_15.y) * u_xlat16_66 + 1.0;
    u_xlat16_1 = u_xlat16_32.xxxx * u_xlat16_3 + vec4(u_xlat16_16);
    u_xlat1 = u_xlat16_1 * vec4(u_xlat16_49);
    u_xlat16_1 = u_xlat1 * vec4(0.5, 0.5, 0.5, 0.5);
    u_xlat36 = u_xlat2.y * _LeafEdgeSpeculars.x;
    u_xlat3 = u_xlat16_1 * vec4(u_xlat36);
    u_xlat36 = (-_LeafEdgeSpeculars.z) + 1.0;
    u_xlat36 = u_xlat2.x * u_xlat36 + _LeafEdgeSpeculars.z;
#ifdef UNITY_ADRENO_ES3
    u_xlat36 = min(max(u_xlat36, 0.0), 1.0);
#else
    u_xlat36 = clamp(u_xlat36, 0.0, 1.0);
#endif
    u_xlat3 = vec4(u_xlat36) * u_xlat3;
    u_xlat3 = u_xlat3 * _LightColor0;
    u_xlat16_32.x = _SpecularColor.w * 10.0 + _LeafEdgeSpeculars.x;
    u_xlat36 = u_xlat3.w * u_xlat16_32.x;
    u_xlat2.x = u_xlat2.x + -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(0.0<u_xlat2.x);
#else
    u_xlatb2 = 0.0<u_xlat2.x;
#endif
    u_xlat2.x = (u_xlatb2) ? 1.0 : 0.5;
    u_xlat16_15.x = log2(u_xlat16_15.x);
    u_xlat16_15.x = u_xlat16_15.x * _BaseSpeculars.w;
    u_xlat16_15.x = exp2(u_xlat16_15.x);
    u_xlat53 = _BaseSpeculars.z * u_xlat16_15.x + -0.5;
    u_xlat53 = max(u_xlat53, 0.0);
    u_xlat16_15.x = u_xlat2.x * u_xlat53;
    u_xlat16_4 = u_xlat16_0 * u_xlat16_15.xxxx;
    u_xlat16_4 = u_xlat16_4 * _LightColor0;
    u_xlat16_1 = u_xlat16_1 * _LightColor0 + u_xlat16_4;
    u_xlat16_49 = (-_LeafEdgeSpeculars.w) + 2.0;
    u_xlat16_49 = u_xlat36 * u_xlat16_49 + _LeafEdgeSpeculars.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_49 = min(max(u_xlat16_49, 0.0), 1.0);
#else
    u_xlat16_49 = clamp(u_xlat16_49, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat3 * u_xlat16_32.xxxx + (-u_xlat16_1);
    vs_TEXCOORD1 = vec4(u_xlat16_49) * u_xlat16_3 + u_xlat16_1;
    u_xlat12.w = u_xlat2.y * _Lightings.w;
    vs_TEXCOORD0.xyz = u_xlat16_0.xyz;
    vs_TEXCOORD0.w = u_xlat16_15.x;
    vs_TEXCOORD2 = u_xlat12;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bool u_xlatb0;
mediump float u_xlat16_1;
void main()
{
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb0) ? u_xlat16_1 : vs_TEXCOORD1.z;
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
    SV_Target2.w = u_xlat16_0;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 unity_DebugViewInfo;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _ElementViewEleID;
uniform 	mediump vec4 _Color;
in mediump vec4 vs_TEXCOORD0;
in mediump vec4 vs_TEXCOORD1;
in mediump vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
mediump float u_xlat16_0;
bvec2 u_xlatb0;
mediump float u_xlat16_1;
bool u_xlatb2;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        SV_Target0 = _Color;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat16_0 = vs_TEXCOORD0.w * 0.0500000007;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_0 = min(max(u_xlat16_0, 0.0), 1.0);
#else
    u_xlat16_0 = clamp(u_xlat16_0, 0.0, 1.0);
#endif
    u_xlat16_0 = sqrt(u_xlat16_0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb2 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_1 = _ElementViewEleID * 0.00392156886;
    SV_Target2.z = (u_xlatb2) ? u_xlat16_1 : vs_TEXCOORD1.z;
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0274509806;
    SV_Target1.xyz = vs_TEXCOORD0.xyz;
    SV_Target1.w = vs_TEXCOORD2.w;
    SV_Target2.xy = vs_TEXCOORD1.xy;
    SV_Target2.w = u_xlat16_0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _SphericalWind0[4];
uniform 	float _SphericalWindCount;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
float u_xlat9;
int u_xlati9;
bool u_xlatb9;
float u_xlat13;
bool u_xlatb13;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlat1.xy = u_xlat16_0.xz * vec2(-1.0, -1.0);
    u_xlat2.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _Pos.xyz;
    u_xlat9 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat9 = sqrt(u_xlat9);
    u_xlat9 = u_xlat9 * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat9 = min(max(u_xlat9, 0.0), 1.0);
#else
    u_xlat9 = clamp(u_xlat9, 0.0, 1.0);
#endif
    u_xlat9 = u_xlat9 * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb9 = !!(u_xlat9<in_COLOR0.y);
#else
    u_xlatb9 = u_xlat9<in_COLOR0.y;
#endif
    if(u_xlatb9){
        gl_Position = hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = float(0.0);
    u_xlat2.y = float(0.0);
    u_xlat2.z = float(0.0);
    u_xlati9 = 0;
    while(true){
        u_xlat13 = float(u_xlati9);
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(u_xlat13>=_SphericalWindCount);
#else
        u_xlatb13 = u_xlat13>=_SphericalWindCount;
#endif
        if(u_xlatb13){break;}
        u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + _SphericalWind0[u_xlati9].xyz;
        u_xlat13 = dot(u_xlat3.xyz, u_xlat3.xyz);
        u_xlat13 = sqrt(u_xlat13);
        u_xlat13 = (-u_xlat13) * _SphericalWind0[u_xlati9].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
        u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb13 = !!(0.0<u_xlat13);
#else
        u_xlatb13 = 0.0<u_xlat13;
#endif
        if(u_xlatb13){
            u_xlat13 = dot(u_xlat2.xyz, u_xlat2.xyz);
            u_xlat13 = max(u_xlat13, 0.00100000005);
            u_xlat13 = inversesqrt(u_xlat13);
            u_xlat2.xyz = vec3(u_xlat13) * u_xlat2.xyz;
        //ENDIF
        }
        u_xlati9 = u_xlati9 + 1;
    }
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[2];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    vs_TEXCOORD0 = _Color * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = _Color;
    vs_TEXCOORD2.xyz = u_xlat2.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _Time;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MiHoYoWind;
uniform 	vec4 _MiHoYoTimeScale;
uniform 	mediump vec4 _WindParams0;
uniform 	mediump vec4 _WindParams1;
uniform 	mediump vec4 _WindParams2;
uniform 	vec4 _SphericalWind0[4];
uniform 	vec4 _SphericalWind1[4];
uniform 	vec4 _SphericalWind2[4];
uniform 	float _SphericalWindCount;
uniform 	vec4 _GrassDisplacementArea;
uniform 	vec4 _DisplacementParam;
uniform 	mediump vec4 _Color;
uniform 	mediump vec4 _BurnedColor;
uniform 	mediump vec4 _BoundsMin;
uniform 	mediump vec4 _BoundsSize;
uniform 	mediump vec4 _Height;
uniform 	mediump vec4 _DistanceCoeff;
uniform 	mediump vec4 _DistanceConst;
uniform 	vec4 _Pos;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _GrassDisplacementTex;
in highp vec4 in_POSITION0;
in mediump vec4 in_COLOR0;
out mediump vec4 vs_TEXCOORD0;
out mediump vec4 vs_TEXCOORD1;
out mediump vec4 vs_TEXCOORD2;
vec4 u_xlat0;
mediump vec4 u_xlat16_0;
float u_xlat1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bool u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec4 u_xlat5;
vec4 u_xlat6;
vec4 u_xlat7;
vec3 u_xlat8;
vec3 u_xlat9;
vec3 u_xlat10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
mediump float u_xlat16_14;
vec3 u_xlat16;
vec2 u_xlat17;
float u_xlat22;
bool u_xlatb22;
vec3 u_xlat28;
vec2 u_xlat32;
bvec2 u_xlatb33;
float u_xlat34;
vec2 u_xlat36;
mediump float u_xlat16_45;
float u_xlat47;
float u_xlat48;
int u_xlati48;
float u_xlat49;
bool u_xlatb49;
float u_xlat51;
float u_xlat53;
void main()
{
    u_xlat16_0.xyz = in_COLOR0.xyz * _BoundsSize.xyz + _BoundsMin.xyz;
    u_xlati1 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati1 = u_xlati1 << 3;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat16.xyz) + _Pos.xyz;
    u_xlat2.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat2.x = sqrt(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * _DistanceCoeff.x + _DistanceConst.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.x = min(max(u_xlat2.x, 0.0), 1.0);
#else
    u_xlat2.x = clamp(u_xlat2.x, 0.0, 1.0);
#endif
    u_xlat17.x = in_COLOR0.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat2.x = u_xlat2.x * 1.5;
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x<u_xlat17.x);
#else
    u_xlatb2 = u_xlat2.x<u_xlat17.x;
#endif
    if(u_xlatb2){
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[1] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyyy;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxxx + u_xlat2;
        u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzzz + u_xlat2;
        gl_Position = u_xlat2 + hlslcc_mtx4x4unity_MatrixVP[3];
        vs_TEXCOORD0 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD1 = vec4(0.0, 0.0, 0.0, 0.0);
        vs_TEXCOORD2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat2.x = in_POSITION0.y * _Height.x;
    u_xlat2.x = max(u_xlat2.x, 9.99999975e-05);
    u_xlat17.x = 10000.0 * unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].w;
    u_xlat17.x = fract(u_xlat17.x);
    u_xlat3.x = sin(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat4.x = cos(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].w);
    u_xlat5.x = (-u_xlat3.x);
    u_xlat5.y = u_xlat4.x;
    u_xlat4.x = dot(u_xlat5.yx, in_POSITION0.xz);
    u_xlat5.z = u_xlat3.x;
    u_xlat4.z = dot(u_xlat5.zy, in_POSITION0.xz);
    u_xlat3.x = u_xlat4.x * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].z;
    u_xlat3.y = u_xlat4.z * _Height.y + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].z;
    u_xlat32.xy = -abs(u_xlat3.xy) * _Height.zz + vec2(1.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat32.xy = min(max(u_xlat32.xy, 0.0), 1.0);
#else
    u_xlat32.xy = clamp(u_xlat32.xy, 0.0, 1.0);
#endif
    u_xlat3.x = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].y;
    u_xlat3.y = unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].y;
    u_xlatb33.xy = greaterThanEqual(u_xlat3.xyxy, vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat32.xy = u_xlat32.xy * u_xlat3.xy;
    u_xlat32.x = (u_xlatb33.x) ? float(1.0) : u_xlat32.x;
    u_xlat32.y = (u_xlatb33.y) ? float(1.0) : u_xlat32.y;
    u_xlat32.x = u_xlat32.y + u_xlat32.x;
    u_xlat32.x = u_xlat32.x * 0.5;
    u_xlat32.x = min(u_xlat17.x, u_xlat32.x);
    u_xlat4.y = in_POSITION0.y;
    u_xlat3.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + (-u_xlat4.xyz);
    u_xlat47 = (-u_xlat32.x) + 1.0;
    u_xlat3.xyz = u_xlat3.xyz * vec3(u_xlat47) + u_xlat4.xyz;
    u_xlat3.xyz = (-u_xlat16_0.xyz) * vec3(-1.0, 0.0, -1.0) + u_xlat3.xyz;
    u_xlat47 = (-in_COLOR0.y) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].w;
    u_xlat47 = u_xlat47 * 0.5 + in_COLOR0.y;
    u_xlat16_45 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat16_45 = sqrt(u_xlat16_45);
    u_xlat4.xy = u_xlat16_0.xz * vec2(-1.0, -1.0) + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xz;
    u_xlat5.z = u_xlat32.x * u_xlat17.x;
    u_xlat17.x = _WindParams1.y * 0.100000001;
    u_xlat48 = _MiHoYoWind.w * _WindParams0.x;
    u_xlat2.x = log2(u_xlat2.x);
    u_xlat2.x = u_xlat2.x * 1.10000002;
    u_xlat2.x = exp2(u_xlat2.x);
    u_xlat34 = u_xlat47 * 6.28299999;
    u_xlat49 = dot(u_xlat4.xy, _WindParams1.zw);
    u_xlat49 = (-u_xlat49) * _WindParams0.y;
    u_xlat49 = _Time.y * _WindParams2.x + u_xlat49;
    u_xlat49 = u_xlat34 * u_xlat17.x + u_xlat49;
    u_xlat6.x = u_xlat49 + _WindParams2.y;
    u_xlat49 = _Time.y * _MiHoYoTimeScale.x + u_xlat34;
    u_xlat6.y = u_xlat49 + _MiHoYoTimeScale.y;
    u_xlat6.xy = u_xlat6.xy + vec2(0.5, 0.5);
    u_xlat6.xy = fract(u_xlat6.xy);
    u_xlat6.xy = u_xlat6.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat36.xy = abs(u_xlat6.xy) * abs(u_xlat6.xy);
    u_xlat6.xy = -abs(u_xlat6.xy) * vec2(2.0, 2.0) + vec2(3.0, 3.0);
    u_xlat6.xy = u_xlat6.xy * u_xlat36.xy;
    u_xlat5.xy = u_xlat2.xx * u_xlat6.xy;
    u_xlat5.xw = u_xlat5.zz * u_xlat5.xz;
    u_xlat6.xy = _MiHoYoWind.xz;
    u_xlat36.xy = u_xlat5.xx * u_xlat6.xy;
    u_xlat7.xz = vec2(u_xlat48) * u_xlat36.xy;
    u_xlat7.y = float(0.0);
    u_xlat7.w = float(0.0);
    u_xlat8.x = 0.0;
    u_xlat8.yz = _MiHoYoWind.zx * vec2(0.0, 1.0);
    u_xlat9.xy = _MiHoYoWind.zx * vec2(1.0, 0.0);
    u_xlat9.z = 0.0;
    u_xlat8.xyz = (-u_xlat8.xyz) + u_xlat9.xyz;
    u_xlat8.xyz = u_xlat5.xxx * u_xlat8.xyz;
    u_xlat8.xyz = vec3(u_xlat48) * u_xlat8.xyz;
    u_xlat9.xyz = u_xlat8.xyz * _WindParams2.zzz;
    u_xlat48 = u_xlat5.y * u_xlat5.w;
    u_xlat5.xyw = vec3(u_xlat48) * vec3(0.0848399997, 0.0, 0.0848399997);
    u_xlat48 = u_xlat2.x * _MiHoYoWind.w;
    u_xlat48 = u_xlat48 * _WindParams1.x + 1.0;
    u_xlat48 = u_xlat48 * u_xlat48 + (-u_xlat48);
    u_xlat6.xy = u_xlat6.xy * vec2(u_xlat48);
    u_xlat6.xz = u_xlat5.zz * u_xlat6.xy;
    u_xlat6.y = 0.0;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.www + u_xlat7.xyz;
    u_xlat9.xyz = u_xlat9.xyz * _WindParams0.zzz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    u_xlat48 = dot(u_xlat9.xyz, u_xlat9.xyz);
    u_xlat48 = max(u_xlat48, 0.00100000005);
    u_xlat48 = inversesqrt(u_xlat48);
    u_xlat9.xyz = vec3(u_xlat48) * u_xlat9.xyz;
    u_xlat7.xyz = u_xlat8.xyz * _WindParams2.zzz + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat5.xyw * _WindParams2.www + u_xlat7.xyz;
    u_xlat5.xyw = u_xlat6.xyz + u_xlat5.xyw;
    u_xlat6.y = 0.0;
    u_xlat8.y = 0.0;
    u_xlat10.y = 0.0;
    u_xlat11.xyz = u_xlat9.xyz;
    u_xlat12.x = float(0.0);
    u_xlat12.y = float(0.0);
    u_xlat12.z = float(0.0);
    u_xlati48 = 0;
    while(true){
        u_xlat49 = float(u_xlati48);
#ifdef UNITY_ADRENO_ES3
        u_xlatb49 = !!(u_xlat49>=_SphericalWindCount);
#else
        u_xlatb49 = u_xlat49>=_SphericalWindCount;
#endif
        if(u_xlatb49){break;}
        u_xlat13.xyz = (-u_xlat16.xyz) + _SphericalWind0[u_xlati48].xyz;
        u_xlat49 = dot(u_xlat13.xyz, u_xlat13.xyz);
        u_xlat49 = sqrt(u_xlat49);
        u_xlat51 = (-u_xlat49) * _SphericalWind0[u_xlati48].w + 1.0;
#ifdef UNITY_ADRENO_ES3
        u_xlat51 = min(max(u_xlat51, 0.0), 1.0);
#else
        u_xlat51 = clamp(u_xlat51, 0.0, 1.0);
#endif
#ifdef UNITY_ADRENO_ES3
        u_xlatb22 = !!(0.0<u_xlat51);
#else
        u_xlatb22 = 0.0<u_xlat51;
#endif
        if(u_xlatb22){
            u_xlat28.xz = (-u_xlat16.xz) + _SphericalWind2[u_xlati48].xz;
            u_xlat49 = u_xlat49 + 0.00100000005;
            u_xlat7.xz = u_xlat13.xz / vec2(u_xlat49);
            u_xlat49 = u_xlat51 * _SphericalWind1[u_xlati48].x;
            u_xlat51 = u_xlat49 * _WindParams0.x;
            u_xlat22 = dot(u_xlat16.xz, u_xlat28.xz);
            u_xlat22 = (-u_xlat22) * _WindParams0.y;
            u_xlat22 = _Time.y * _SphericalWind1[u_xlati48].y + u_xlat22;
            u_xlat22 = u_xlat34 * u_xlat17.x + u_xlat22;
            u_xlat22 = u_xlat22 + _SphericalWind1[u_xlati48].w;
            u_xlat22 = u_xlat22 + 0.5;
            u_xlat22 = fract(u_xlat22);
            u_xlat22 = u_xlat22 * 2.0 + -1.0;
            u_xlat53 = abs(u_xlat22) * abs(u_xlat22);
            u_xlat22 = -abs(u_xlat22) * 2.0 + 3.0;
            u_xlat22 = u_xlat22 * u_xlat53;
            u_xlat22 = u_xlat2.x * u_xlat22;
            u_xlat22 = u_xlat5.z * u_xlat22;
            u_xlat13.xy = u_xlat7.xz * vec2(u_xlat22);
            u_xlat6.xz = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat13.xy = vec2((-u_xlat7.w) + u_xlat7.z, (-u_xlat7.x) + u_xlat7.w);
            u_xlat13.xy = vec2(u_xlat22) * u_xlat13.xy;
            u_xlat13.xy = vec2(u_xlat51) * u_xlat13.xy;
            u_xlat8.xz = u_xlat13.xy * vec2(0.150000006, 0.150000006);
            u_xlat49 = u_xlat2.x * u_xlat49;
            u_xlat49 = u_xlat49 * _WindParams1.x + 1.0;
            u_xlat49 = u_xlat49 * u_xlat49 + (-u_xlat49);
            u_xlat7.xy = vec2(u_xlat49) * u_xlat7.xz;
            u_xlat10.xz = u_xlat5.zz * u_xlat7.xy;
            u_xlat7.xyz = u_xlat8.xyz * _WindParams0.www + u_xlat6.xyz;
            u_xlat7.xyz = u_xlat7.xyz * _WindParams0.zzz + u_xlat11.xyz;
            u_xlat49 = dot(u_xlat7.xyz, u_xlat7.xyz);
            u_xlat49 = max(u_xlat49, 0.00100000005);
            u_xlat49 = inversesqrt(u_xlat49);
            u_xlat11.xyz = vec3(u_xlat49) * u_xlat7.xyz;
            u_xlat6.xzw = u_xlat6.xyz + u_xlat8.xyz;
            u_xlat6.xzw = u_xlat10.xyz + u_xlat6.xzw;
            u_xlat12.xyz = u_xlat6.xzw + u_xlat12.xyz;
        //ENDIF
        }
        u_xlati48 = u_xlati48 + 1;
    }
    u_xlat16.xyz = u_xlat5.xyw + u_xlat12.xyz;
    u_xlat16.xyz = u_xlat16.xyz + u_xlat3.xyz;
    u_xlat16_14 = dot(u_xlat16.xyz, u_xlat16.xyz);
    u_xlat16_14 = sqrt(u_xlat16_14);
    u_xlat2.x = u_xlat16_14 + 0.00100000005;
    u_xlat16.xyz = u_xlat16.xyz / u_xlat2.xxx;
    u_xlat2.x = u_xlat32.x * u_xlat16_45;
    u_xlat17.xy = u_xlat4.xy + (-_GrassDisplacementArea.xy);
    u_xlat17.xy = vec2(u_xlat17.x / _GrassDisplacementArea.z, u_xlat17.y / _GrassDisplacementArea.w);
    u_xlat3.xyz = textureLod(_GrassDisplacementTex, u_xlat17.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat17.x = dot(u_xlat3.xy, u_xlat3.xy);
    u_xlat17.x = sqrt(u_xlat17.x);
    u_xlat3.xy = u_xlat2.xx * u_xlat3.xy;
    u_xlat3.xy = u_xlat3.xy * _DisplacementParam.xx;
    u_xlat32.x = u_xlat47 * 0.649999976 + 1.13;
    u_xlat32.xy = u_xlat32.xx * u_xlat3.xy;
    u_xlat4.xz = u_xlat32.xy * vec2(0.75, 0.75);
    u_xlat2.x = u_xlat2.x * u_xlat17.x;
    u_xlat2.x = u_xlat2.x * _DisplacementParam.y;
    u_xlat17.x = max(u_xlat3.z, _DisplacementParam.z);
    u_xlat17.x = min(u_xlat17.x, _DisplacementParam.w);
    u_xlat4.y = u_xlat17.x * (-u_xlat2.x);
    u_xlat16.xyz = u_xlat16.xyz * vec3(u_xlat16_45) + u_xlat4.xyz;
    u_xlat16.xyz = u_xlat16_0.xyz * vec3(-1.0, 0.0, -1.0) + u_xlat16.xyz;
    u_xlat16.xyz = u_xlat16.xyz + unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = u_xlat16.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat16.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat16.zzzz + u_xlat0;
    gl_Position = u_xlat0 + hlslcc_mtx4x4unity_MatrixVP[3];
    u_xlat1 = floor(abs(unity_Builtins0Array[u_xlati1 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].x));
    u_xlatb1.xy = equal(vec4(u_xlat1), vec4(0.0, 1.0, 0.0, 0.0)).xy;
    u_xlat16_0 = (u_xlatb1.y) ? _BurnedColor : vec4(0.0, 0.0, 0.0, 0.0);
    u_xlat16_0 = (u_xlatb1.x) ? _Color : u_xlat16_0;
    vs_TEXCOORD0 = u_xlat16_0 * vec4(1.0, 1.0, 1.0, 5.0);
    vs_TEXCOORD1 = u_xlat16_0;
    vs_TEXCOORD2.xyz = u_xlat11.xyz;
    vs_TEXCOORD2.w = 0.0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "MIHOYO_GRASS_DISPLACEMENT" "MIHOYO_GRASS_ELEMENT_VIEW" "MHY_GRASS_RANDOM_ROTATION" "MIHOYO_WIND_SPERERICAL" }
""
}
}
}
}
}