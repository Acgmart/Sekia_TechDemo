//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Particles/Dissolve_4Texs_Edge" {
Properties {
_MainColor ("MainColor", Color) = (1,1,1,1)
_ColorBrightness ("ColorBrightness", Float) = 1
[MHYToggle] _PatternAndFresnelToggle ("PatternAndFresnelToggle", Float) = 0
_PatternTex ("PatternTex", 2D) = "white" { }
_DesaturateFrac ("DesaturateFrac", Range(0, 1)) = 0
_FresnelColor ("FresnelColor", Color) = (0.4999999,0.375,1,0)
_FresnelScale ("FresnelScale", Float) = 3
_FresnelPower ("FresnelPower", Float) = 3
_AlphaBrightness ("AlphaBrightness", Float) = 1
_AlphaEdgeFade ("AlphaEdgeFade", Float) = 4
_BaseTex ("BaseTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _BaseTexColorChannelSwitch ("BaseTexColorChannelSwitch", Float) = 1
[Enum(R,0,G,1,B,2,A,3,White,4)] _BaseTexAlphaChannelSwitch ("BaseTexAlphaChannelSwitch", Float) = 1
_BaseTex_Uspeed ("BaseTex_Uspeed", Float) = 0
_BaseTex_Vspeed ("BaseTex_Vspeed", Float) = 0
_LerpColorDark ("LerpColorDark", Color) = (1,1,1,1)
_LerpColorLight ("LerpColorLight", Color) = (1,1,1,1)
_LerpAlphaScaler ("LerpAlphaScaler", Range(0, 20)) = 1
[MHYToggle] _UseCustom2ColorToggle ("UseCustom2ColorToggle", Float) = 0
_DissolveTex ("DissolveTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _DissolveTexChannelSwitch ("DissolveTexChannelSwitch", Float) = 0
_DissolveTex_Uspeed ("DissolveTex_Uspeed", Float) = 0
_DissolveTex_Vspeed ("DissolveTex_Vspeed", Float) = 0
[MHYToggle] _DissolveTexUVRandomToggle ("DissolveTexUVRandomToggle", Float) = 0
_DissolveEdgeWidth ("DissolveEdgeWidth", Float) = 1.99
_DissolveValue ("DissolveValue", Range(0, 1)) = 0.3543022
_DissolveRemapMin ("DissolveRemapMin", Float) = -0.3
_DissolveEdgeColor ("DissolveEdgeColor", Color) = (1.245,0,0,1)
[Toggle(_NOISETEXTOGGLEONBASETEX_ON)] _NoiseTexToggleOnBaseTex ("NoiseTex[Toggle]OnBaseTex", Float) = 0
[Toggle(_NOISETEXTOGGLE_ON)] _NoiseTexToggle ("NoiseTex[Toggle]", Float) = 0
_NoiseTex ("NoiseTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _NoiseTexChannelSwitch ("NoiseTexChannelSwitch", Float) = 0
_NoiseTex_Uspeed ("NoiseTex_Uspeed", Float) = 0
_NoiseTex_Vspeed ("NoiseTex_Vspeed", Float) = 0
_Noise_Offset ("Noise_Offset", Float) = 0.5
_Noise_Brightness ("Noise_Brightness", Float) = 0.2
[MHYToggle] _NoiseTexUVRandomToggle ("NoiseTexUVRandomToggle", Float) = 0
[Toggle(_MASKTEXTOGGLE_ON)] _MaskTexToggle ("MaskTex[Toggle]", Float) = 0
_MaskTex ("MaskTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _MaskTexChannelSwitch ("MaskTexChannelSwitch", Float) = 0
[Header(MiHoYoDepthFade)] [Toggle(_SOFTPARTICLES_ON)] _SOFTPARTICLES ("SOFTPARTICLES", Float) = 0
_DepthThresh ("DepthThresh", Range(0.001, 20)) = 1
_DepthFade ("DepthFade", Range(0.001, 20)) = 1
_DistortionTexRG ("DistortionTex(RG)", 2D) = "white" { }
_DistortionTexRG_Uspeed ("DistortionTex(RG)_Uspeed", Float) = 0
_DistortionTexRG_Vspeed ("DistortionTex(RG)_Vspeed", Float) = 0
_ParticleCustomProp1 ("_ParticleCustomProp1", Vector) = (1,1,1,1)
_ParticleCustomProp0 ("_ParticleCustomProp0", Vector) = (1,1,1,1)
_DistortionRScaler ("DistortionRScaler", Float) = 2
_DistortionGScaler ("DistortionGScaler", Float) = 2
_MeshParticleColorArray ("MeshParticleColorArray", Vector) = (1,1,1,1)
_DistortionMaskTex ("DistortionMaskTex", 2D) = "white" { }
[Enum(R,0,G,1,B,2,A,3)] _DistortionMaskChannelToggle ("DistortionMaskChannelToggle", Float) = 2
_DistortionOpacity ("DistortionOpacity", Float) = 0.5
_DayColor ("DayColor", Color) = (1,1,1,1)
_texcoord ("", 2D) = "white" { }
[Header(Motion Vectors)] _MotionVectorsAlphaCutoff ("Motion Vectors Alpha Cutoff", Range(0, 1)) = 0.1
[Header(Cull Mode)] [Enum(UnityEngine.Rendering.CullMode)] _Cull ("Cull Mode", Float) = 2
_MHYZBias ("Z Bias", Float) = 0
_PolygonOffsetFactor ("Polygon Offset Factor", Float) = 0
_PolygonOffsetUnit ("Polygon Offset Unit", Float) = 0
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
[Header(Depth Mode)] [Enum(Off, 0, On, 1)] _Zwrite ("ZWrite Mode", Float) = 1
[Enum(UnityEngine.Rendering.CompareFunction)] _Ztest ("ZTest Mode", Float) = 4
[Header(Fog Mode)] [Toggle(EFFECTED_BY_FOG)] _EffectedByFog ("Effected by fog", Float) = 0
}
SubShader {
 Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Name "MAIN"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "FORWARDBASE" "PreviewType" = "Plane" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZTest Off
  ZWrite Off
  Cull Off
  GpuProgramID 23021
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati8]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat8.xy).x;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati8]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat8.xy).x;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
vec2 u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat11.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat11.xy = (u_xlatb0.x) ? u_xlat11.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat11.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11.x;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb2.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_3.xyz : u_xlat6.xyz;
    u_xlat10_2.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_2.xzw) + vec3(u_xlat16_16);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_2.xzw;
    u_xlat2.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat2.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_3.xyz);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb2.y) ? u_xlat2.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_DissolveTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat2.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat1.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_18 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_18 = _DissolveValue * u_xlat16_18 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat2.x) * u_xlat16_18 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat1.x * u_xlat16_18;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_18;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat15;
float u_xlat19;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6.x ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_6);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb2.x) ? u_xlat15.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat3.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat3.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat3.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat3.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_22 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb3.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat3.x = u_xlatb3.x ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat3.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_22;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
vec2 u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat11.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat11.xy = (u_xlatb0.x) ? u_xlat11.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat11.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11.x;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb2.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_3.xyz : u_xlat6.xyz;
    u_xlat10_2.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_2.xzw) + vec3(u_xlat16_16);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_2.xzw;
    u_xlat2.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat2.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_3.xyz);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb2.y) ? u_xlat2.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_DissolveTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat2.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat1.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_18 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_18 = _DissolveValue * u_xlat16_18 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat2.x) * u_xlat16_18 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat1.x * u_xlat16_18;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_18;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat15;
float u_xlat19;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6.x ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_6);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb2.x) ? u_xlat15.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat3.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat3.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat3.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat3.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_22 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb3.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat3.x = u_xlatb3.x ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat3.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_22;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati8]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTexture, u_xlat8.xy).x;
    u_xlat8.x = _ZBufferParams.z * u_xlat8.x + _ZBufferParams.w;
    u_xlat8.x = float(1.0) / u_xlat8.x;
    u_xlat8.x = u_xlat8.x + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat1 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat8.xy).x;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + vs_TEXCOORD1.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlat0 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
bvec4 u_xlatb3;
vec2 u_xlat4;
bvec4 u_xlatb4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
lowp vec3 u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
mediump vec3 u_xlat16_11;
float u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat18 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat0.xyz = vec3(u_xlat18) * u_xlat0.xyz;
    u_xlat18 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat18 = inversesqrt(u_xlat18);
    u_xlat1.xyz = vec3(u_xlat18) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_6.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_6.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_6.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat6.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat6.xyz + u_xlat16_2.xyz;
    u_xlat1.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat4.x = _Time.y * _BaseTex_Uspeed + u_xlat3.x;
    u_xlat4.y = _Time.y * _BaseTex_Vspeed + u_xlat3.y;
    u_xlat2 = texture(_BaseTex, u_xlat4.xy);
    u_xlatb3 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat18 = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat18 = (u_xlatb3.z) ? u_xlat2.z : u_xlat18;
    u_xlat18 = (u_xlatb3.y) ? u_xlat2.y : u_xlat18;
    u_xlat18 = (u_xlatb3.x) ? u_xlat2.x : u_xlat18;
    u_xlat18 = u_xlat18 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.xyz = vec3(u_xlat18) * u_xlat1.xyz + _LerpColorDark.xyz;
    u_xlat16_5.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_5.xyz = vec3(u_xlat18) * u_xlat16_5.xyz + _ParticleCustomProp0.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_5.xyz : u_xlat1.xyz;
    u_xlat16_5.xyz = (u_xlatb3.y) ? u_xlat0.xyz : u_xlat1.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_5.x, u_xlat0.z * u_xlat16_5.y, u_xlat0.w * u_xlat16_5.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat7.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat7.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat7.y;
    u_xlat7.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat7.xy = (u_xlatb4.x) ? u_xlat7.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat7.xy);
    u_xlat1.x = u_xlatb1 ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb4.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb4.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat16_5.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_5.x = _DissolveValue * u_xlat16_5.x + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_5.x + u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + 1.0;
    u_xlat16_5.x = u_xlat0.x * u_xlat16_5.x;
    u_xlat16_11.xyz = u_xlat16_5.xxx * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat6.x = texture(_CameraDepthTextureScaled, u_xlat6.xy).x;
    u_xlat6.x = u_xlat6.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat12 = u_xlat6.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x + u_xlat16_5.x;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec3 u_xlat10_2;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec4 u_xlatb5;
vec2 u_xlat6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
int u_xlati8;
bool u_xlatb8;
mediump vec3 u_xlat16_11;
vec2 u_xlat16;
mediump float u_xlat16_16;
float u_xlat24;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat8.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat16.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat24 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat16.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat24;
    u_xlat8.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat16.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat8.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlati8 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat1 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati8]._MeshParticleColorArray.wxyz;
    u_xlat1 = u_xlat1 * _MainColor.wxyz;
    u_xlat0.x = (-u_xlat1.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat16_11.xyz = vec3(u_xlat16_3) * _DissolveEdgeColor.xyz;
    u_xlat8.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat1.x = dot(u_xlat8.xyz, u_xlat8.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat8.xyz = u_xlat8.xyz * u_xlat1.xxx;
    u_xlat1.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat1.x = inversesqrt(u_xlat1.x);
    u_xlat2.xyz = u_xlat1.xxx * vs_TEXCOORD6.xyz;
    u_xlat8.x = dot(u_xlat8.xyz, u_xlat2.xyz);
    u_xlat8.x = (-u_xlat8.x) + 1.0;
    u_xlat8.x = max(u_xlat8.x, 9.99999975e-05);
    u_xlat8.x = log2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelPower;
    u_xlat8.x = exp2(u_xlat8.x);
    u_xlat8.x = u_xlat8.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat10_2.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_2.xyz) + vec3(u_xlat16_16);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_2.xyz;
    u_xlat2.xyz = _FresnelColor.xyz * u_xlat8.xxx + (-u_xlat16_4.xyz);
    u_xlat8.xyz = u_xlat8.xxx * u_xlat2.xyz + u_xlat16_4.xyz;
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat5.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat6.x = _Time.y * _BaseTex_Uspeed + u_xlat5.x;
    u_xlat6.y = _Time.y * _BaseTex_Vspeed + u_xlat5.y;
    u_xlat4 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb5 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat1.x = u_xlatb5.w ? u_xlat4.w : float(0.0);
    u_xlat1.x = (u_xlatb5.z) ? u_xlat4.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.y) ? u_xlat4.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb5.x) ? u_xlat4.x : u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = u_xlat1.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_7.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_7.xyz = u_xlat1.xxx * u_xlat16_7.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb5.x) ? u_xlat16_7.xyz : u_xlat2.xyz;
    u_xlat16_7.xyz = (u_xlatb5.y) ? u_xlat8.xyz : u_xlat2.xyz;
    u_xlat8.xyz = vec3(u_xlat1.y * u_xlat16_7.x, u_xlat1.z * u_xlat16_7.y, u_xlat1.w * u_xlat16_7.z);
    u_xlat8.xyz = u_xlat8.xyz * vec3(_ColorBrightness);
    u_xlat1.xyz = u_xlat8.xyz * _DayColor.xyz + u_xlat16_11.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb8 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb8 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat8.x = u_xlatb8 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = (u_xlatb2.w) ? u_xlat4.w : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat4.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.y) ? u_xlat4.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb2.x) ? u_xlat4.x : u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat8.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat8.x = texture(_CameraDepthTextureScaled, u_xlat8.xy).x;
    u_xlat8.x = u_xlat8.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat16.x = u_xlat8.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat8.x = u_xlat8.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat24 = (-u_xlat8.x) + 1.0;
    u_xlat8.x = u_xlat16.x * u_xlat24 + u_xlat8.x;
    u_xlat0.x = u_xlat0.x * u_xlat8.x + u_xlat16_3;
    u_xlat8.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat2 = texture(_MaskTex, u_xlat8.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat8.x = u_xlatb3.w ? u_xlat2.w : float(0.0);
    u_xlat8.x = (u_xlatb3.z) ? u_xlat2.z : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.y) ? u_xlat2.y : u_xlat8.x;
    u_xlat8.x = (u_xlatb3.x) ? u_xlat2.x : u_xlat8.x;
    u_xlat0.x = u_xlat8.x * u_xlat0.x;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec4 u_xlat3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
bvec4 u_xlatb4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
vec2 u_xlat17;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat3.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat3.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat3.x;
    u_xlat3.x = u_xlat3.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat3.x = min(max(u_xlat3.x, 0.0), 1.0);
#else
    u_xlat3.x = clamp(u_xlat3.x, 0.0, 1.0);
#endif
    u_xlat10.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat10.xyz = u_xlat3.xxx * u_xlat10.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat3.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat10.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat0.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat0.xyz = u_xlat0.xyz * vec3(_ColorBrightness);
    u_xlat3.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat3.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat3.y;
    u_xlat3.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat5.xy;
    u_xlat17.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb4 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat3.xy = (u_xlatb4.x) ? u_xlat17.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb21 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat21 = u_xlatb21 ? u_xlat3.w : float(0.0);
    u_xlat21 = (u_xlatb4.w) ? u_xlat3.z : u_xlat21;
    u_xlat21 = (u_xlatb4.z) ? u_xlat3.y : u_xlat21;
    u_xlat21 = (u_xlatb4.y) ? u_xlat3.x : u_xlat21;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat21 = (-u_xlat2.x) * u_xlat16_6 + u_xlat21;
    u_xlat21 = u_xlat21 * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat21 * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat21 * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat0.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb0 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat0.x = u_xlatb0 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat0.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat21 * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
bvec4 u_xlatb3;
vec4 u_xlat4;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
bvec2 u_xlatb5;
mediump float u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
bool u_xlatb7;
vec2 u_xlat10;
mediump vec3 u_xlat16_13;
float u_xlat14;
float u_xlat21;
bool u_xlatb21;
void main()
{
    u_xlat0.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat21 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat0.xyz = vec3(u_xlat21) * u_xlat0.xyz;
    u_xlat21 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat21 = inversesqrt(u_xlat21);
    u_xlat1.xyz = vec3(u_xlat21) * vs_TEXCOORD6.xyz;
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = max(u_xlat0.x, 9.99999975e-05);
    u_xlat0.x = log2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelPower;
    u_xlat0.x = exp2(u_xlat0.x);
    u_xlat0.x = u_xlat0.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_7.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_1 = dot(u_xlat10_7.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_7.xyz) + vec3(u_xlat16_1);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_7.xyz;
    u_xlat7.xyz = _FresnelColor.xyz * u_xlat0.xxx + (-u_xlat16_2.xyz);
    u_xlat0.xyz = u_xlat0.xxx * u_xlat7.xyz + u_xlat16_2.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb21 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat1.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat3.x = _Time.y * _NoiseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _NoiseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat1.xy = (u_xlatb2.x) ? u_xlat1.xy : u_xlat3.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat1.xy);
    u_xlat21 = u_xlatb21 ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.w) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 + (-_Noise_Offset);
    u_xlat1.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat3.x = _Time.y * _BaseTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _BaseTex_Vspeed + u_xlat1.y;
    u_xlat1.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * vec2(u_xlat21) + u_xlat3.xy;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat21 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat21 = (u_xlatb2.z) ? u_xlat1.z : u_xlat21;
    u_xlat21 = (u_xlatb2.y) ? u_xlat1.y : u_xlat21;
    u_xlat21 = (u_xlatb2.x) ? u_xlat1.x : u_xlat21;
    u_xlat21 = u_xlat21 * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat21 = min(max(u_xlat21, 0.0), 1.0);
#else
    u_xlat21 = clamp(u_xlat21, 0.0, 1.0);
#endif
    u_xlat3.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat3.xyz = vec3(u_xlat21) * u_xlat3.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = vec3(u_xlat21) * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb5.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat3.xyz = (u_xlatb5.x) ? u_xlat16_4.xyz : u_xlat3.xyz;
    u_xlat16_4.xyz = (u_xlatb5.y) ? u_xlat0.xyz : u_xlat3.xyz;
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat7.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat7.xyz = u_xlat7.xyz * vec3(_ColorBrightness);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat10.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat5.x = _Time.y * _DissolveTex_Uspeed + u_xlat10.x;
    u_xlat5.y = _Time.y * _DissolveTex_Vspeed + u_xlat10.y;
    u_xlat10.xy = vec2(u_xlat5.x + vs_TEXCOORD0.z, u_xlat5.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat10.xy = (u_xlatb2.x) ? u_xlat10.xy : u_xlat5.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat10.xy);
    u_xlat3.x = u_xlatb3.x ? u_xlat4.w : float(0.0);
    u_xlat3.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat3.x;
    u_xlat3.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat3.x;
    u_xlat16_6 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_6 = _DissolveValue * u_xlat16_6 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_6 + u_xlat3.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_6 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6 = min(max(u_xlat16_6, 0.0), 1.0);
#else
    u_xlat16_6 = clamp(u_xlat16_6, 0.0, 1.0);
#endif
    u_xlat16_6 = (-u_xlat16_6) + 1.0;
    u_xlat16_6 = u_xlat0.x * u_xlat16_6;
    u_xlat16_13.xyz = vec3(u_xlat16_6) * _DissolveEdgeColor.xyz;
    u_xlat2.xyz = u_xlat7.xyz * _DayColor.xyz + u_xlat16_13.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb7 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat14 = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat14 = min(max(u_xlat14, 0.0), 1.0);
#else
    u_xlat14 = clamp(u_xlat14, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat21 = (-u_xlat7.x) + 1.0;
    u_xlat7.x = u_xlat14 * u_xlat21 + u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_6;
    u_xlat7.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat7.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat7.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat7.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat7.x;
    u_xlat7.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat7.x * u_xlat0.x;
    u_xlat2.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat2.w = min(max(u_xlat2.w, 0.0), 1.0);
#else
    u_xlat2.w = clamp(u_xlat2.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
vec2 u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat11.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat11.xy = (u_xlatb0.x) ? u_xlat11.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat11.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11.x;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb2.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_3.xyz : u_xlat6.xyz;
    u_xlat10_2.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_2.xzw) + vec3(u_xlat16_16);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_2.xzw;
    u_xlat2.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat2.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_3.xyz);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb2.y) ? u_xlat2.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_DissolveTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat2.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat1.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_18 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_18 = _DissolveValue * u_xlat16_18 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat2.x) * u_xlat16_18 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat1.x * u_xlat16_18;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTexture, u_xlat5.xy).x;
    u_xlat5.x = _ZBufferParams.z * u_xlat5.x + _ZBufferParams.w;
    u_xlat5.x = float(1.0) / u_xlat5.x;
    u_xlat5.x = u_xlat5.x + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_18;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat12.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat15;
float u_xlat19;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6.x ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_6);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb2.x) ? u_xlat15.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat3.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat3.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat3.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat3.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_22 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb3.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat3.x = u_xlatb3.x ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat3.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTexture, u_xlat7.xy).x;
    u_xlat7.x = _ZBufferParams.z * u_xlat7.x + _ZBufferParams.w;
    u_xlat7.x = float(1.0) / u_xlat7.x;
    u_xlat7.x = u_xlat7.x + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_22;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec2 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
mediump vec3 u_xlat16_2;
vec4 u_xlat3;
lowp vec4 u_xlat10_3;
bvec2 u_xlatb3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
float u_xlat11;
vec2 u_xlat13;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_17;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11 = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_2.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_2.xyz = u_xlat1.xxx * u_xlat16_2.xyz + vs_TEXCOORD1.xyz;
    u_xlatb3.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb3.x) ? u_xlat16_2.xyz : u_xlat6.xyz;
    u_xlat10_3.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_3.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_2.xyz = (-u_xlat10_3.xzw) + vec3(u_xlat16_16);
    u_xlat16_2.xyz = vec3(_DesaturateFrac) * u_xlat16_2.xyz + u_xlat10_3.xzw;
    u_xlat3.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat3.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat3.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat3.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_2.xyz);
    u_xlat3.xzw = vec3(u_xlat16) * u_xlat3.xzw + u_xlat16_2.xyz;
    u_xlat16_2.xyz = (u_xlatb3.y) ? u_xlat3.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb1.x) ? u_xlat13.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat3.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat3.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat3.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat3.x : u_xlat1.x;
    u_xlat3 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_17 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_17 = _DissolveValue * u_xlat16_17 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat3.x) * u_xlat16_17 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_17 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_17 = min(max(u_xlat16_17, 0.0), 1.0);
#else
    u_xlat16_17 = clamp(u_xlat16_17, 0.0, 1.0);
#endif
    u_xlat16_17 = (-u_xlat16_17) + 1.0;
    u_xlat16_17 = u_xlat1.x * u_xlat16_17;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_17;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat16_2.x * u_xlat3.y, u_xlat16_2.y * u_xlat3.z, u_xlat16_2.z * u_xlat3.w);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_2.xyz = vec3(u_xlat16_17) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_2.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat12;
vec2 u_xlat13;
float u_xlat18;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat13.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat13.xy = (u_xlatb0.x) ? u_xlat13.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat13.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat6.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat6.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat2.xy;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb2.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb2.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb2.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb2.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_21 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6.x ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb4.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat1.xyz = in_POSITION0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].xyz * in_POSITION0.xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].xyz * in_POSITION0.zzz + u_xlat1.xyz;
    vs_TEXCOORD5.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD6.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bvec4 u_xlatb0;
vec4 u_xlat1;
bvec4 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec2 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
bvec4 u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
float u_xlat10;
vec2 u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat16;
mediump float u_xlat16_16;
mediump float u_xlat16_18;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat0.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat0.y;
    u_xlat0.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat0.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat0.y;
    u_xlatb0 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat11.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat11.xy = (u_xlatb0.x) ? u_xlat11.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat11.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0.x ? u_xlat2.w : float(0.0);
    u_xlat0.x = (u_xlatb0.w) ? u_xlat2.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.z) ? u_xlat2.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb0.y) ? u_xlat2.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat16 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat11.x = (u_xlatb1.z) ? u_xlat0.z : u_xlat16;
    u_xlat6.x = (u_xlatb1.y) ? u_xlat0.y : u_xlat11.x;
    u_xlat1.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat6.x;
    u_xlat1.x = u_xlat1.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat6.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat6.xyz = u_xlat1.xxx * u_xlat6.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-vs_TEXCOORD1.xyz) + vs_TEXCOORD2.xyz;
    u_xlat16_3.xyz = u_xlat1.xxx * u_xlat16_3.xyz + vs_TEXCOORD1.xyz;
    u_xlatb2.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat16_3.xyz : u_xlat6.xyz;
    u_xlat10_2.xzw = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_16 = dot(u_xlat10_2.xzw, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_2.xzw) + vec3(u_xlat16_16);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_2.xzw;
    u_xlat2.xzw = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat2.xzw);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw;
    u_xlat16 = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat16 = inversesqrt(u_xlat16);
    u_xlat4.xyz = vec3(u_xlat16) * vs_TEXCOORD6.xyz;
    u_xlat16 = dot(u_xlat2.xzw, u_xlat4.xyz);
    u_xlat16 = (-u_xlat16) + 1.0;
    u_xlat16 = max(u_xlat16, 9.99999975e-05);
    u_xlat16 = log2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelPower;
    u_xlat16 = exp2(u_xlat16);
    u_xlat16 = u_xlat16 * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16 = min(max(u_xlat16, 0.0), 1.0);
#else
    u_xlat16 = clamp(u_xlat16, 0.0, 1.0);
#endif
    u_xlat2.xzw = _FresnelColor.xyz * vec3(u_xlat16) + (-u_xlat16_3.xyz);
    u_xlat2.xzw = vec3(u_xlat16) * u_xlat2.xzw + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb2.y) ? u_xlat2.xzw : u_xlat1.xyz;
    u_xlat1.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat2.x = _Time.y * _DissolveTex_Uspeed + u_xlat1.x;
    u_xlat2.y = _Time.y * _DissolveTex_Vspeed + u_xlat1.y;
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat2.xy = (u_xlatb1.x) ? u_xlat12.xy : u_xlat2.xy;
    u_xlat2 = texture(_DissolveTex, u_xlat2.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat1.x = u_xlatb1.x ? u_xlat2.w : float(0.0);
    u_xlat1.x = (u_xlatb1.w) ? u_xlat2.z : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.z) ? u_xlat2.y : u_xlat1.x;
    u_xlat1.x = (u_xlatb1.y) ? u_xlat2.x : u_xlat1.x;
    u_xlat2 = vs_COLOR0.wxyz * _MainColor.wxyz;
    u_xlat16_18 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_18 = _DissolveValue * u_xlat16_18 + _DissolveRemapMin;
    u_xlat1.x = (-u_xlat2.x) * u_xlat16_18 + u_xlat1.x;
    u_xlat1.x = u_xlat1.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat16_18 = u_xlat1.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_18 = min(max(u_xlat16_18, 0.0), 1.0);
#else
    u_xlat16_18 = clamp(u_xlat16_18, 0.0, 1.0);
#endif
    u_xlat16_18 = (-u_xlat16_18) + 1.0;
    u_xlat16_18 = u_xlat1.x * u_xlat16_18;
    u_xlatb4 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat15 = (u_xlatb4.w) ? u_xlat0.w : u_xlat6.x;
    u_xlat10 = (u_xlatb4.z) ? u_xlat0.z : u_xlat15;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat0.y : u_xlat10;
    u_xlat0.x = (u_xlatb4.x) ? u_xlat0.x : u_xlat5.x;
    u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat5.x = texture(_CameraDepthTextureScaled, u_xlat5.xy).x;
    u_xlat5.x = u_xlat5.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat10 = u_xlat5.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat15 = (-u_xlat10) + 1.0;
    u_xlat5.x = u_xlat5.x * u_xlat15 + u_xlat10;
    u_xlat0.x = u_xlat1.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat5.x + u_xlat16_18;
    u_xlat5.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat5.xy);
    u_xlatb4 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat5.x = u_xlatb4.w ? u_xlat1.w : float(0.0);
    u_xlat5.x = (u_xlatb4.z) ? u_xlat1.z : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.y) ? u_xlat1.y : u_xlat5.x;
    u_xlat5.x = (u_xlatb4.x) ? u_xlat1.x : u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.xyz = vec3(u_xlat2.y * u_xlat16_3.x, u_xlat2.z * u_xlat16_3.y, u_xlat2.w * u_xlat16_3.z);
    u_xlat5.xyz = u_xlat5.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_18) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat5.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
float u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7 = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
bvec4 u_xlatb2;
mediump vec3 u_xlat16_3;
vec4 u_xlat4;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat16;
float u_xlat19;
mediump float u_xlat16_21;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_3.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_3.xyz = u_xlat6.xxx * u_xlat16_3.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_3.xyz : u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_4.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_3.xyz = (-u_xlat10_4.xyz) + vec3(u_xlat16_6);
    u_xlat16_3.xyz = vec3(_DesaturateFrac) * u_xlat16_3.xyz + u_xlat10_4.xyz;
    u_xlat4.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat4.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat4.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_3.xyz);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat4.xyz + u_xlat16_3.xyz;
    u_xlat16_3.xyz = (u_xlatb6.y) ? u_xlat4.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat4.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat4.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat16.xy = vec2(u_xlat4.x + vs_TEXCOORD0.z, u_xlat4.y + vs_TEXCOORD0.w);
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat16.xy : u_xlat4.xy;
    u_xlat4 = texture(_DissolveTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat4.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat4.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat4.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat4.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_21 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_21 = _DissolveValue * u_xlat16_21 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_21 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_21 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_21 = min(max(u_xlat16_21, 0.0), 1.0);
#else
    u_xlat16_21 = clamp(u_xlat16_21, 0.0, 1.0);
#endif
    u_xlat16_21 = (-u_xlat16_21) + 1.0;
    u_xlat16_21 = u_xlat0.x * u_xlat16_21;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_21;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_3.x, u_xlat0.z * u_xlat16_3.y, u_xlat0.w * u_xlat16_3.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_3.xyz = vec3(u_xlat16_21) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_3.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat6.xy);
    u_xlatb3 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb3.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
bool u_xlatb6;
vec2 u_xlat12;
mediump float u_xlat16_12;
bvec2 u_xlatb12;
float u_xlat18;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6 ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat12.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat12.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat12.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat12.x;
    u_xlat12.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat12.x;
    u_xlat12.x = u_xlat12.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat12.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb12.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _PatternAndFresnelToggle), vec4(1.0, 1.0, 1.0, 1.0)).xy;
    u_xlat2.xyz = (u_xlatb12.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_12 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_12);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat12.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat5.xyz = u_xlat12.xxx * vs_TEXCOORD6.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat12.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = max(u_xlat12.x, 9.99999975e-05);
    u_xlat12.x = log2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelPower;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = u_xlat12.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat12.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat12.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb12.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat2 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat0.xz = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat0.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat0.z;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat3.xy;
    u_xlatb3 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat12.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlat0.xy = (u_xlatb3.x) ? u_xlat12.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb3.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat18 = u_xlatb3.x ? u_xlat0.w : float(0.0);
    u_xlat12.x = (u_xlatb3.w) ? u_xlat0.z : u_xlat18;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat0.y : u_xlat12.x;
    u_xlat0.x = (u_xlatb3.y) ? u_xlat0.x : u_xlat6.x;
    u_xlat2 = u_xlat2 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat2.x) * u_xlat16_22 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb3 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb6 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat6.x = u_xlatb6 ? 1.0 : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat1.w : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat12.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat12.x = texture(_CameraDepthTextureScaled, u_xlat12.xy).x;
    u_xlat12.x = u_xlat12.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat18 = u_xlat12.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat18) + 1.0;
    u_xlat12.x = u_xlat12.x * u_xlat1.x + u_xlat18;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat12.x + u_xlat16_22;
    u_xlat6.xyz = vec3(u_xlat2.y * u_xlat16_4.x, u_xlat2.z * u_xlat16_4.y, u_xlat2.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
in highp vec3 in_NORMAL0;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD6;
out highp vec4 vs_TEXCOORD7;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = _MHYZBias * u_xlat1.w + u_xlat1.z;
    gl_Position.xyw = u_xlat1.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat3.xyz = in_POSITION0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz * in_POSITION0.zzz + u_xlat3.xyz;
    vs_TEXCOORD5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD5.w = 0.0;
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD6.xyz = u_xlat0.xxx * u_xlat2.xyz;
    vs_TEXCOORD6.w = 0.0;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _ColorBrightness;
uniform 	mediump float _PatternAndFresnelToggle;
uniform 	mediump float _UseCustom2ColorToggle;
uniform 	vec4 _LerpColorDark;
uniform 	vec4 _LerpColorLight;
uniform 	float _LerpAlphaScaler;
uniform 	mediump float _BaseTexColorChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump vec4 _ParticleCustomProp0;
uniform 	mediump vec4 _ParticleCustomProp1;
uniform 	mediump float _DesaturateFrac;
uniform 	vec4 _FresnelColor;
uniform 	float _FresnelPower;
uniform 	float _FresnelScale;
uniform 	vec4 _MainColor;
uniform 	vec4 _DayColor;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump vec4 _DissolveEdgeColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoParticlesDissolve_4Texs_EdgeArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoParticlesDissolve_4Texs_Edge {
	miHoYoParticlesDissolve_4Texs_EdgeArray_Type miHoYoParticlesDissolve_4Texs_EdgeArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _PatternTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD6;
in highp vec4 vs_TEXCOORD7;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
int u_xlati0;
bvec2 u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
bvec4 u_xlatb2;
vec4 u_xlat3;
lowp vec3 u_xlat10_3;
bvec4 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
vec3 u_xlat6;
mediump float u_xlat16_6;
bvec2 u_xlatb6;
vec2 u_xlat7;
float u_xlat13;
vec2 u_xlat15;
float u_xlat19;
mediump float u_xlat16_22;
void main()
{
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.100000001, 0.100000001, 0.100000001, 0.0);
        return;
    //ENDIF
    }
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat6.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat6.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat6.y;
    u_xlat6.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat2.x = _Time.y * _NoiseTex_Uspeed + u_xlat6.x;
    u_xlat2.y = _Time.y * _NoiseTex_Vspeed + u_xlat6.y;
    u_xlatb3 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat6.xy = vec2(u_xlat2.x + vs_TEXCOORD0.z, u_xlat2.y + vs_TEXCOORD0.w);
    u_xlat6.xy = (u_xlatb3.x) ? u_xlat6.xy : u_xlat2.xy;
    u_xlat2 = texture(_NoiseTex, u_xlat6.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6.x = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb6.x = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat6.x = u_xlatb6.x ? u_xlat2.w : float(0.0);
    u_xlat6.x = (u_xlatb3.w) ? u_xlat2.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.z) ? u_xlat2.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb3.y) ? u_xlat2.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_Noise_Offset);
    u_xlat6.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat6.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat6.xy);
    u_xlatb2 = equal(vec4(_BaseTexColorChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat6.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat6.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat6.x;
    u_xlat6.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat6.x;
    u_xlat6.x = u_xlat6.x * _LerpAlphaScaler;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat2.xyz = (-_LerpColorDark.xyz) + _LerpColorLight.xyz;
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz + _LerpColorDark.xyz;
    u_xlat16_4.xyz = (-_ParticleCustomProp0.xyz) + _ParticleCustomProp1.xyz;
    u_xlat16_4.xyz = u_xlat6.xxx * u_xlat16_4.xyz + _ParticleCustomProp0.xyz;
    u_xlatb6.xy = equal(vec4(_UseCustom2ColorToggle, _PatternAndFresnelToggle, _UseCustom2ColorToggle, _UseCustom2ColorToggle), vec4(1.0, 1.0, 0.0, 0.0)).xy;
    u_xlat2.xyz = (u_xlatb6.x) ? u_xlat16_4.xyz : u_xlat2.xyz;
    u_xlat10_3.xyz = texture(_PatternTex, vs_TEXCOORD1.xy).xyz;
    u_xlat16_6 = dot(u_xlat10_3.xyz, vec3(0.298999995, 0.587000012, 0.114));
    u_xlat16_4.xyz = (-u_xlat10_3.xyz) + vec3(u_xlat16_6);
    u_xlat16_4.xyz = vec3(_DesaturateFrac) * u_xlat16_4.xyz + u_xlat10_3.xyz;
    u_xlat3.xyz = (-vs_TEXCOORD5.xyz) + _WorldSpaceCameraPos.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat6.x = dot(vs_TEXCOORD6.xyz, vs_TEXCOORD6.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat5.xyz = u_xlat6.xxx * vs_TEXCOORD6.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat5.xyz);
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = max(u_xlat6.x, 9.99999975e-05);
    u_xlat6.x = log2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelPower;
    u_xlat6.x = exp2(u_xlat6.x);
    u_xlat6.x = u_xlat6.x * _FresnelScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat3.xyz = _FresnelColor.xyz * u_xlat6.xxx + (-u_xlat16_4.xyz);
    u_xlat3.xyz = u_xlat6.xxx * u_xlat3.xyz + u_xlat16_4.xyz;
    u_xlat16_4.xyz = (u_xlatb6.y) ? u_xlat3.xyz : u_xlat2.xyz;
    u_xlat0 = vs_COLOR0.wxyz * miHoYoParticlesDissolve_4Texs_EdgeArray[u_xlati0]._MeshParticleColorArray.wxyz;
    u_xlat2.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat3.x = _Time.y * _DissolveTex_Uspeed + u_xlat2.x;
    u_xlat3.y = _Time.y * _DissolveTex_Vspeed + u_xlat2.y;
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat15.xy = vec2(u_xlat3.x + vs_TEXCOORD0.z, u_xlat3.y + vs_TEXCOORD0.w);
    u_xlat3.xy = (u_xlatb2.x) ? u_xlat15.xy : u_xlat3.xy;
    u_xlat3 = texture(_DissolveTex, u_xlat3.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb2.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat2.x = u_xlatb2.x ? u_xlat3.w : float(0.0);
    u_xlat2.x = (u_xlatb2.w) ? u_xlat3.z : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.z) ? u_xlat3.y : u_xlat2.x;
    u_xlat2.x = (u_xlatb2.y) ? u_xlat3.x : u_xlat2.x;
    u_xlat0 = u_xlat0 * _MainColor.wxyz;
    u_xlat16_22 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_22 = _DissolveValue * u_xlat16_22 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat0.x) * u_xlat16_22 + u_xlat2.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = (-u_xlat16_22) + 1.0;
    u_xlat16_22 = u_xlat0.x * u_xlat16_22;
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
#ifdef UNITY_ADRENO_ES3
    u_xlatb3.x = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb3.x = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat3.x = u_xlatb3.x ? 1.0 : float(0.0);
    u_xlat19 = (u_xlatb2.w) ? u_xlat1.w : u_xlat3.x;
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat7.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
    u_xlat7.x = texture(_CameraDepthTextureScaled, u_xlat7.xy).x;
    u_xlat7.x = u_xlat7.x * _ProjectionParams.z + (-vs_TEXCOORD7.w);
    u_xlat13 = u_xlat7.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat7.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat19 = (-u_xlat13) + 1.0;
    u_xlat7.x = u_xlat7.x * u_xlat19 + u_xlat13;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat0.x = u_xlat0.x * u_xlat7.x + u_xlat16_22;
    u_xlat1.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_MaskTexChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat19 = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat13 = (u_xlatb2.z) ? u_xlat1.z : u_xlat19;
    u_xlat7.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat13;
    u_xlat1.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat7.x;
    u_xlat0.x = u_xlat0.x * u_xlat1.x;
    u_xlat6.xyz = vec3(u_xlat0.y * u_xlat16_4.x, u_xlat0.z * u_xlat16_4.y, u_xlat0.w * u_xlat16_4.z);
    u_xlat6.xyz = u_xlat6.xyz * vec3(_ColorBrightness);
    u_xlat16_4.xyz = vec3(u_xlat16_22) * _DissolveEdgeColor.xyz;
    u_xlat1.xyz = u_xlat6.xyz * _DayColor.xyz + u_xlat16_4.xyz;
    u_xlat1.w = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.w = min(max(u_xlat1.w, 0.0), 1.0);
#else
    u_xlat1.w = clamp(u_xlat1.w, 0.0, 1.0);
#endif
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "FOG_HEIGHT" "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
}
}
 Pass {
  Name "DISTORTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "DISTORTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 123861
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _DistortionTexRG_Uspeed;
uniform 	mediump float _DistortionTexRG_Vspeed;
uniform 	mediump float _DistortionRScaler;
uniform 	mediump float _DistortionGScaler;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	mediump float _DistortionMaskChannelToggle;
uniform 	vec4 _DistortionMaskTex_ST;
uniform 	mediump float _DistortionOpacity;
uniform lowp sampler2D _DistortionTexRG;
uniform lowp sampler2D _DistortionMaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec2 u_xlat10_0;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _DistortionMaskTex_ST.xy + _DistortionMaskTex_ST.zw;
    u_xlat0 = texture(_DistortionMaskTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(vec4(_DistortionMaskChannelToggle, _DistortionMaskChannelToggle, _DistortionMaskChannelToggle, _DistortionMaskChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8 = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlat16_2.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_2.x = _DissolveValue * u_xlat16_2.x + _DissolveRemapMin;
    u_xlat4 = vs_COLOR0.w * _MainColor.w;
    u_xlat4 = u_xlat16_2.x * u_xlat4;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat0.x = u_xlat0.x * _DistortionOpacity;
    SV_Target0.w = u_xlat0.x;
    u_xlat16_2.xy = _Time.yy * vec2(_DistortionTexRG_Uspeed, _DistortionTexRG_Vspeed) + vs_TEXCOORD0.xy;
    u_xlat10_0.xy = texture(_DistortionTexRG, u_xlat16_2.xy).xy;
    u_xlat16_2.xy = u_xlat10_0.xy + vec2(-0.5, -0.5);
    u_xlat16_2.x = u_xlat16_2.x * _DistortionRScaler;
    u_xlat16_3.y = u_xlat16_2.y * _DistortionGScaler;
    u_xlat16_3.x = (-u_xlat16_2.x);
    SV_Target0.xy = u_xlat16_3.xy + vec2(0.497999996, 0.497999996);
#ifdef UNITY_ADRENO_ES3
    SV_Target0.xy = min(max(SV_Target0.xy, 0.0), 1.0);
#else
    SV_Target0.xy = clamp(SV_Target0.xy, 0.0, 1.0);
#endif
    SV_Target0.z = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position.z = _MHYZBias * u_xlat0.w + u_xlat0.z;
    gl_Position.xyw = u_xlat0.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _DistortionTexRG_Uspeed;
uniform 	mediump float _DistortionTexRG_Vspeed;
uniform 	mediump float _DistortionRScaler;
uniform 	mediump float _DistortionGScaler;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	mediump float _DistortionMaskChannelToggle;
uniform 	vec4 _DistortionMaskTex_ST;
uniform 	mediump float _DistortionOpacity;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _DistortionTexRG;
uniform lowp sampler2D _DistortionMaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
lowp vec2 u_xlat10_0;
bvec4 u_xlatb1;
mediump vec2 u_xlat16_2;
mediump vec2 u_xlat16_3;
float u_xlat4;
int u_xlati4;
float u_xlat8;
float u_xlat12;
void main()
{
    u_xlat0.xy = vs_TEXCOORD0.xy * _DistortionMaskTex_ST.xy + _DistortionMaskTex_ST.zw;
    u_xlat0 = texture(_DistortionMaskTex, u_xlat0.xy);
    u_xlatb1 = equal(vec4(vec4(_DistortionMaskChannelToggle, _DistortionMaskChannelToggle, _DistortionMaskChannelToggle, _DistortionMaskChannelToggle)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = u_xlatb1.w ? u_xlat0.w : float(0.0);
    u_xlat8 = (u_xlatb1.z) ? u_xlat0.z : u_xlat12;
    u_xlat4 = (u_xlatb1.y) ? u_xlat0.y : u_xlat8;
    u_xlat0.x = (u_xlatb1.x) ? u_xlat0.x : u_xlat4;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4 = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4 = u_xlat4 * _MainColor.w;
    u_xlat16_2.x = (-_DissolveRemapMin) + 1.0;
    u_xlat16_2.x = _DissolveValue * u_xlat16_2.x + _DissolveRemapMin;
    u_xlat4 = u_xlat4 * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * u_xlat4;
    u_xlat0.x = u_xlat0.x * _DistortionOpacity;
    SV_Target0.w = u_xlat0.x;
    u_xlat16_2.xy = _Time.yy * vec2(_DistortionTexRG_Uspeed, _DistortionTexRG_Vspeed) + vs_TEXCOORD0.xy;
    u_xlat10_0.xy = texture(_DistortionTexRG, u_xlat16_2.xy).xy;
    u_xlat16_2.xy = u_xlat10_0.xy + vec2(-0.5, -0.5);
    u_xlat16_2.x = u_xlat16_2.x * _DistortionRScaler;
    u_xlat16_3.y = u_xlat16_2.y * _DistortionGScaler;
    u_xlat16_3.x = (-u_xlat16_2.x);
    SV_Target0.xy = u_xlat16_3.xy + vec2(0.497999996, 0.497999996);
#ifdef UNITY_ADRENO_ES3
    SV_Target0.xy = min(max(SV_Target0.xy, 0.0), 1.0);
#else
    SV_Target0.xy = clamp(SV_Target0.xy, 0.0, 1.0);
#endif
    SV_Target0.z = 0.0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 Pass {
  Name "MOTIONVECTORS"
  Tags { "AllowDistortionVectors" = "False" "IGNOREPROJECTOR" = "true" "LIGHTMODE" = "MOTIONVECTORS" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Off
  GpuProgramID 190398
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat8.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat12 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = u_xlat4.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xz).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat8.x * u_xlat12 + u_xlat0.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bool u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb1 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat0.w : u_xlat1.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb4 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4 ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat4.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat4.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat4.x * u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat8.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat12 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat4.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = u_xlat4.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xz).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat8.x * u_xlat12 + u_xlat0.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ZBufferParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bool u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb1 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat0.w : u_xlat1.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb4 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4 ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat4.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat4.x * u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTexture, u_xlat4.xy).x;
    u_xlat4.x = _ZBufferParams.z * u_xlat4.x + _ZBufferParams.w;
    u_xlat4.x = float(1.0) / u_xlat4.x;
    u_xlat4.x = u_xlat4.x + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat8.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat12 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat4.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = u_xlat4.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat8.x * u_xlat12 + u_xlat0.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlat1 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bool u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb1 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat0.w : u_xlat1.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb4 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4 ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat8.x = vs_COLOR0.w * _MainColor.w;
    u_xlat4.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat4.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat4.x * u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
int u_xlati4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat8.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.y + vs_TEXCOORD0.w);
    u_xlatb1 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xy = (u_xlatb1.x) ? u_xlat8.xy : u_xlat0.xy;
    u_xlat0 = texture(_DissolveTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1.x = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb1.x = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat12 = u_xlatb1.x ? u_xlat0.w : float(0.0);
    u_xlat8.x = (u_xlatb1.w) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb1.z) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb1.y) ? u_xlat0.x : u_xlat4.x;
    u_xlati4 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat4.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati4]._MeshParticleColorArray.w;
    u_xlat4.x = u_xlat4.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat4.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlat8.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat8.y;
    u_xlat1 = texture(_BaseTex, u_xlat1.xy);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.x = u_xlat4.x * _AlphaBrightness + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1 = texture(_BaseTex, u_xlat4.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb4 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat4.x = u_xlatb4 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.w : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat0.xz = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat1.xy = vec2(u_xlat0.x + vs_TEXCOORD0.z, u_xlat0.z + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat0.xz = (u_xlatb2.x) ? u_xlat1.xy : u_xlat0.xz;
    u_xlat1 = texture(_DissolveTex, u_xlat0.xz);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb0 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat0.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat0.x * u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat0.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat0.x * u_xlat16_3;
    u_xlat0.xz = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat0.x = texture(_CameraDepthTextureScaled, u_xlat0.xz).x;
    u_xlat0.x = u_xlat0.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat0.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat0.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat8.x * u_xlat12 + u_xlat0.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x + u_xlat16_3;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MHYZBias;
uniform 	float _MotionVectorDepthBias;
uniform 	vec4 hlslcc_mtx4x4_NonJitteredVP[4];
uniform 	vec4 hlslcc_mtx4x4_PreviousVP[4];
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_COLOR0;
in highp vec4 in_TEXCOORD0;
in highp vec4 in_TEXCOORD1;
in highp vec4 in_TEXCOORD2;
out highp vec4 vs_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
flat out highp uint vs_SV_InstanceID0;
out highp vec4 vs_TEXCOORD5;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
int u_xlati3;
void main()
{
    u_xlat0.x = _MotionVectorDepthBias * 2.0 + _MHYZBias;
    u_xlati3 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati3 = u_xlati3 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati3 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position.z = u_xlat0.x * u_xlat2.w + u_xlat2.z;
    gl_Position.xyw = u_xlat2.xyw;
    vs_COLOR0 = in_COLOR0;
    vs_TEXCOORD0 = in_TEXCOORD0;
    vs_TEXCOORD1 = in_TEXCOORD1;
    vs_TEXCOORD2 = in_TEXCOORD2;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    u_xlat0.x = u_xlat2.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat2.xw * vec2(0.5, 0.5);
    vs_TEXCOORD5.zw = u_xlat2.zw;
    vs_TEXCOORD5.xy = u_xlat0.zz + u_xlat0.xw;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_NonJitteredVP[1];
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_NonJitteredVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD3 = hlslcc_mtx4x4_NonJitteredVP[3] * u_xlat1.wwww + u_xlat0;
    u_xlat0 = u_xlat1.yyyy * hlslcc_mtx4x4_PreviousVP[1];
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[0] * u_xlat1.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4_PreviousVP[2] * u_xlat1.zzzz + u_xlat0;
    vs_TEXCOORD4 = hlslcc_mtx4x4_PreviousVP[3] * u_xlat1.wwww + u_xlat0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	int unity_BaseInstanceID;
uniform 	mediump float _MotionVectorsAlphaCutoff;
uniform 	vec4 _DayColor;
uniform 	mediump float _BaseTexAlphaChannelSwitch;
uniform 	float _BaseTex_Uspeed;
uniform 	vec4 _BaseTex_ST;
uniform 	float _BaseTex_Vspeed;
uniform 	float _Noise_Brightness;
uniform 	mediump float _NoiseTexChannelSwitch;
uniform 	mediump float _NoiseTexUVRandomToggle;
uniform 	float _NoiseTex_Uspeed;
uniform 	vec4 _NoiseTex_ST;
uniform 	float _NoiseTex_Vspeed;
uniform 	float _Noise_Offset;
uniform 	mediump float _DissolveTexChannelSwitch;
uniform 	mediump float _DissolveTexUVRandomToggle;
uniform 	float _DissolveTex_Uspeed;
uniform 	vec4 _DissolveTex_ST;
uniform 	float _DissolveTex_Vspeed;
uniform 	vec4 _MainColor;
uniform 	mediump float _DissolveValue;
uniform 	mediump float _DissolveRemapMin;
uniform 	float _AlphaEdgeFade;
uniform 	float _AlphaBrightness;
uniform 	float _DepthFade;
uniform 	float _DepthThresh;
uniform 	mediump float _DissolveEdgeWidth;
uniform 	mediump float _MaskTexChannelSwitch;
uniform 	vec4 _MaskTex_ST;
struct miHoYoTemplateParticleParticleWithoutNormalArray_Type {
	mediump vec4 _MeshParticleColorArray;
};
layout(std140) uniform UnityInstancing_miHoYoTemplateParticleParticleWithoutNormal {
	miHoYoTemplateParticleParticleWithoutNormalArray_Type miHoYoTemplateParticleParticleWithoutNormalArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform lowp sampler2D _NoiseTex;
uniform lowp sampler2D _BaseTex;
uniform lowp sampler2D _DissolveTex;
uniform highp sampler2D _CameraDepthTextureScaled;
uniform lowp sampler2D _MaskTex;
in highp vec4 vs_COLOR0;
in highp vec4 vs_TEXCOORD0;
flat in highp uint vs_SV_InstanceID0;
in highp vec4 vs_TEXCOORD5;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
ivec2 u_xlati1;
bool u_xlatb1;
bvec4 u_xlatb2;
mediump float u_xlat16_3;
vec2 u_xlat4;
bool u_xlatb4;
vec2 u_xlat8;
ivec2 u_xlati8;
float u_xlat12;
void main()
{
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(_NoiseTexChannelSwitch==3.0);
#else
    u_xlatb0 = _NoiseTexChannelSwitch==3.0;
#endif
    u_xlat4.xy = vs_TEXCOORD0.xy * _NoiseTex_ST.xy + _NoiseTex_ST.zw;
    u_xlat1.x = _Time.y * _NoiseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _NoiseTex_Vspeed + u_xlat4.y;
    u_xlat4.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_NoiseTexUVRandomToggle, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch, _NoiseTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat4.xy = (u_xlatb2.x) ? u_xlat4.xy : u_xlat1.xy;
    u_xlat1 = texture(_NoiseTex, u_xlat4.xy);
    u_xlat0.x = u_xlatb0 ? u_xlat1.w : float(0.0);
    u_xlat0.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat0.x;
    u_xlat0.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_Noise_Offset);
    u_xlat4.xy = vs_TEXCOORD0.xy * _BaseTex_ST.xy + _BaseTex_ST.zw;
    u_xlat1.x = _Time.y * _BaseTex_Uspeed + u_xlat4.x;
    u_xlat1.y = _Time.y * _BaseTex_Vspeed + u_xlat4.y;
    u_xlat0.xy = vec2(vec2(_Noise_Brightness, _Noise_Brightness)) * u_xlat0.xx + u_xlat1.xy;
    u_xlat0 = texture(_BaseTex, u_xlat0.xy);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_BaseTexAlphaChannelSwitch==4.0);
#else
    u_xlatb1 = _BaseTexAlphaChannelSwitch==4.0;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlatb2 = equal(vec4(_BaseTexAlphaChannelSwitch), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat12 = (u_xlatb2.w) ? u_xlat0.w : u_xlat1.x;
    u_xlat8.x = (u_xlatb2.z) ? u_xlat0.z : u_xlat12;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat0.y : u_xlat8.x;
    u_xlat0.x = (u_xlatb2.x) ? u_xlat0.x : u_xlat4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_DissolveTexChannelSwitch==3.0);
#else
    u_xlatb4 = _DissolveTexChannelSwitch==3.0;
#endif
    u_xlat8.xy = vs_TEXCOORD0.xy * _DissolveTex_ST.xy + _DissolveTex_ST.zw;
    u_xlat1.x = _Time.y * _DissolveTex_Uspeed + u_xlat8.x;
    u_xlat1.y = _Time.y * _DissolveTex_Vspeed + u_xlat8.y;
    u_xlat8.xy = vec2(u_xlat1.x + vs_TEXCOORD0.z, u_xlat1.y + vs_TEXCOORD0.w);
    u_xlatb2 = equal(vec4(_DissolveTexUVRandomToggle, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch, _DissolveTexChannelSwitch), vec4(1.0, 0.0, 1.0, 2.0));
    u_xlat8.xy = (u_xlatb2.x) ? u_xlat8.xy : u_xlat1.xy;
    u_xlat1 = texture(_DissolveTex, u_xlat8.xy);
    u_xlat4.x = u_xlatb4 ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.w) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.x : u_xlat4.x;
    u_xlati8.x = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat8.x = vs_COLOR0.w * miHoYoTemplateParticleParticleWithoutNormalArray[u_xlati8.x]._MeshParticleColorArray.w;
    u_xlat8.x = u_xlat8.x * _MainColor.w;
    u_xlat16_3 = (-_DissolveRemapMin) + 1.0;
    u_xlat16_3 = _DissolveValue * u_xlat16_3 + _DissolveRemapMin;
    u_xlat4.x = (-u_xlat8.x) * u_xlat16_3 + u_xlat4.x;
    u_xlat4.x = u_xlat4.x * _AlphaEdgeFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _AlphaBrightness;
    u_xlat16_3 = u_xlat4.x * _DissolveEdgeWidth;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3 = min(max(u_xlat16_3, 0.0), 1.0);
#else
    u_xlat16_3 = clamp(u_xlat16_3, 0.0, 1.0);
#endif
    u_xlat16_3 = (-u_xlat16_3) + 1.0;
    u_xlat16_3 = u_xlat4.x * u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD5.xy / vs_TEXCOORD5.ww;
    u_xlat4.x = texture(_CameraDepthTextureScaled, u_xlat4.xy).x;
    u_xlat4.x = u_xlat4.x * _ProjectionParams.z + (-vs_TEXCOORD5.w);
    u_xlat8.x = u_xlat4.x / _DepthThresh;
#ifdef UNITY_ADRENO_ES3
    u_xlat8.x = min(max(u_xlat8.x, 0.0), 1.0);
#else
    u_xlat8.x = clamp(u_xlat8.x, 0.0, 1.0);
#endif
    u_xlat4.x = u_xlat4.x * _DepthFade;
#ifdef UNITY_ADRENO_ES3
    u_xlat4.x = min(max(u_xlat4.x, 0.0), 1.0);
#else
    u_xlat4.x = clamp(u_xlat4.x, 0.0, 1.0);
#endif
    u_xlat12 = (-u_xlat4.x) + 1.0;
    u_xlat4.x = u_xlat8.x * u_xlat12 + u_xlat4.x;
    u_xlat0.x = u_xlat0.x * u_xlat4.x + u_xlat16_3;
    u_xlat4.xy = vs_TEXCOORD0.xy * _MaskTex_ST.xy + _MaskTex_ST.zw;
    u_xlat1 = texture(_MaskTex, u_xlat4.xy);
    u_xlatb2 = equal(vec4(vec4(_MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch, _MaskTexChannelSwitch)), vec4(0.0, 1.0, 2.0, 3.0));
    u_xlat4.x = u_xlatb2.w ? u_xlat1.w : float(0.0);
    u_xlat4.x = (u_xlatb2.z) ? u_xlat1.z : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.y) ? u_xlat1.y : u_xlat4.x;
    u_xlat4.x = (u_xlatb2.x) ? u_xlat1.x : u_xlat4.x;
    u_xlat0.x = u_xlat4.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * _DayColor.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat16_3 = u_xlat0.x + (-_MotionVectorsAlphaCutoff);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_3<0.0);
#else
    u_xlatb0 = u_xlat16_3<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.xy = u_xlat0.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5);
    u_xlat8.xy = vs_TEXCOORD3.xy / vs_TEXCOORD3.ww;
    u_xlat8.xy = u_xlat8.xy + vec2(1.0, 1.0);
    u_xlat0.xy = u_xlat8.xy * vec2(0.5, 0.5) + (-u_xlat0.xy);
    u_xlati8.xy = ivec2(uvec2(lessThan(vec4(0.0, 0.0, 0.0, 0.0), u_xlat0.xyxy).xy) * 0xFFFFFFFFu);
    u_xlati1.xy = ivec2(uvec2(lessThan(u_xlat0.xyxx, vec4(0.0, 0.0, 0.0, 0.0)).xy) * 0xFFFFFFFFu);
    u_xlat0.xy = sqrt(abs(u_xlat0.xy));
    u_xlati8.xy = (-u_xlati8.xy) + u_xlati1.xy;
    u_xlat8.xy = vec2(u_xlati8.xy);
    u_xlat0.xy = u_xlat8.xy * u_xlat0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.5, 0.5) + vec2(0.498039216, 0.498039216);
    SV_Target0.xy = u_xlat0.xy;
    SV_Target0.zw = vec2(0.0, 1.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_NOISETEXTOGGLE_ON" "_SOFTPARTICLES_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "HALF_RESOLUTION_PARTICLE_ON" "_SOFTPARTICLES_ON" "_MASKTEXTOGGLE_ON" "_NOISETEXTOGGLEONBASETEX_ON" }
""
}
}
}
}
CustomEditor "MiHoYoASEMaterialInspector"
}