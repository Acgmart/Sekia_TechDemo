//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "VolumetricLightBeam/Beam" {
Properties {
_ConeSlopeCosSin ("Cone Slope Cos Sin", Vector) = (0,0,0,0)
_ConeRadius ("Cone Radius", Vector) = (0,0,0,0)
_ConeApexOffsetZ ("Cone Apex Offset Z", Float) = 0
_ColorFlat ("Color", Color) = (1,1,1,1)
_AlphaInside ("Alpha Inside", Range(0, 1)) = 1
_AlphaOutside ("Alpha Outside", Range(0, 1)) = 1
_DistanceFadeStart ("Distance Fade Start", Float) = 0
_DistanceFadeEnd ("Distance Fade End", Float) = 1
_DistanceCamClipping ("Camera Clipping Distance", Float) = 0.5
_AttenuationLerpLinearQuad ("Lerp between attenuation linear and quad", Float) = 0.5
_DepthBlendDistance ("Depth Blend Distance", Float) = 2
_FresnelPow ("Fresnel Pow", Range(0, 15)) = 1
_GlareFrontal ("Glare Frontal", Range(0, 1)) = 0.5
_GlareBehind ("Glare from Behind", Range(0, 1)) = 0.5
_NoiseLocal ("Noise Local", Vector) = (0,0,0,0)
_NoiseParam ("Noise Param", Vector) = (0,0,0,0)
_CameraParams ("Camera Params", Vector) = (0,0,0,0)
_ClippingPlaneWS ("Clipping Plane WS", Vector) = (0,0,0,0)
[Header(Blend Mode)] [Enum(UnityEngine.Rendering.BlendMode)] _SrcBlendMode ("Src Blend Mode", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DstBlendMode ("Dst Blend Mode", Float) = 0
[Enum(UnityEngine.Rendering.BlendOp)] _BlendOP ("BlendOp Mode", Float) = 0
}
SubShader {
 Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  Cull Front
  GpuProgramID 34322
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6 = u_xlat1.y * 1.5;
    u_xlat6 = min(u_xlat6, _FresnelPow);
    u_xlat6 = u_xlat6 + (-_FresnelPow);
    u_xlat10 = u_xlat10 * u_xlat6 + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10 = float(1.0) / u_xlat10;
    u_xlat10 = u_xlat10 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = (-u_xlat6) * u_xlat10 + 1.0;
    u_xlat6 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat10 * u_xlat6;
    u_xlat10 = (-u_xlat6) * u_xlat10 + 1.0;
    u_xlat10 = vs_TEXCOORD2.w * u_xlat10 + u_xlat11;
    u_xlat6 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat10 * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6 * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10;
    u_xlat5 = (-u_xlat10) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10 = u_xlat10 / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10 + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6 = u_xlat10 * u_xlat10;
    u_xlat10 = (-u_xlat10) + 1.0;
    u_xlat6 = u_xlat6 * 25.0 + 1.0;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat11 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat11;
    u_xlat1.x = u_xlat6 * u_xlat1.x + (-u_xlat10);
    u_xlat10 = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10;
    u_xlat5 = u_xlat5 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10 = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10 * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10 = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10 + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
vec2 u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
uint u_xlatu15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10.x = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6.x = u_xlat1.y * 1.5;
    u_xlat6.x = min(u_xlat6.x, _FresnelPow);
    u_xlat6.x = u_xlat6.x + (-_FresnelPow);
    u_xlat10.x = u_xlat10.x * u_xlat6.x + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat6.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat10.x = vs_TEXCOORD2.w * u_xlat10.x + u_xlat11.x;
    u_xlat6.x = u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6.x * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10.x;
    u_xlat5 = (-u_xlat10.x) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10.x = u_xlat10.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10.x + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat6.x = u_xlat6.x * 25.0 + 1.0;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat11.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat11.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x + (-u_xlat10.x);
    u_xlat10.x = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10.x;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10.x = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10.x = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10.x + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat5 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * 15.0;
    u_xlatu15 = uint(u_xlat10.x);
    u_xlat10.x = trunc(u_xlat10.x);
    u_xlat5 = u_xlat5 * 15.0 + (-u_xlat10.x);
    u_xlatu10 = min(u_xlatu15, 14u);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati1 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat15 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat1.xy = vec2(u_xlat15) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat15 * u_xlat1.z;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.w = u_xlat15 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb15 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat11.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat11.y * u_xlat6.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.z = u_xlat15 * u_xlat11.x;
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb15 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat2.x = floor(u_xlat6.y);
    u_xlat6.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat6.y * u_xlat1.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.y = u_xlat15 * u_xlat6.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat2.xy = u_xlat10.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb15 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat7.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat10.x * u_xlat7.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.w = u_xlat10.x * u_xlat7.x;
    u_xlat10.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat10.x>=(-u_xlat10.x));
#else
    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);
#endif
    u_xlat15 = floor(u_xlat10.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat7.y * u_xlat2.x;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.z = u_xlat10.x * u_xlat7.x;
    u_xlat2.xy = vec2(u_xlat15) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat15 * u_xlat2.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.y = u_xlat10.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat5) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
vec2 u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
uint u_xlatu15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10.x = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6.x = u_xlat1.y * 1.5;
    u_xlat6.x = min(u_xlat6.x, _FresnelPow);
    u_xlat6.x = u_xlat6.x + (-_FresnelPow);
    u_xlat10.x = u_xlat10.x * u_xlat6.x + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat6.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat10.x = vs_TEXCOORD2.w * u_xlat10.x + u_xlat11.x;
    u_xlat6.x = u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6.x * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10.x;
    u_xlat5 = (-u_xlat10.x) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10.x = u_xlat10.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10.x + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat6.x = u_xlat6.x * 25.0 + 1.0;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat11.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat11.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x + (-u_xlat10.x);
    u_xlat10.x = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10.x;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10.x = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10.x = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10.x + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat5 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * 15.0;
    u_xlatu15 = uint(u_xlat10.x);
    u_xlat10.x = trunc(u_xlat10.x);
    u_xlat5 = u_xlat5 * 15.0 + (-u_xlat10.x);
    u_xlatu10 = min(u_xlatu15, 14u);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati1 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat15 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat1.xy = vec2(u_xlat15) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat15 * u_xlat1.z;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.w = u_xlat15 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb15 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat11.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat11.y * u_xlat6.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.z = u_xlat15 * u_xlat11.x;
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb15 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat2.x = floor(u_xlat6.y);
    u_xlat6.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat6.y * u_xlat1.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.y = u_xlat15 * u_xlat6.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat2.xy = u_xlat10.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb15 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat7.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat10.x * u_xlat7.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.w = u_xlat10.x * u_xlat7.x;
    u_xlat10.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat10.x>=(-u_xlat10.x));
#else
    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);
#endif
    u_xlat15 = floor(u_xlat10.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat7.y * u_xlat2.x;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.z = u_xlat10.x * u_xlat7.x;
    u_xlat2.xy = vec2(u_xlat15) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat15 * u_xlat2.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.y = u_xlat10.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat5) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
float u_xlat6;
float u_xlat10;
float u_xlat11;
float u_xlat15;
void main()
{
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6 = u_xlat1.y * 1.5;
    u_xlat6 = min(u_xlat6, _FresnelPow);
    u_xlat6 = u_xlat6 + (-_FresnelPow);
    u_xlat10 = u_xlat10 * u_xlat6 + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10 = float(1.0) / u_xlat10;
    u_xlat10 = u_xlat10 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = (-u_xlat6) * u_xlat10 + 1.0;
    u_xlat6 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat10 * u_xlat6;
    u_xlat10 = (-u_xlat6) * u_xlat10 + 1.0;
    u_xlat10 = vs_TEXCOORD2.w * u_xlat10 + u_xlat11;
    u_xlat6 = u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat10 * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6 * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10;
    u_xlat5 = (-u_xlat10) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10 = u_xlat10 / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10 + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6 = u_xlat10 * u_xlat10;
    u_xlat10 = (-u_xlat10) + 1.0;
    u_xlat6 = u_xlat6 * 25.0 + 1.0;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat11 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat11;
    u_xlat1.x = u_xlat6 * u_xlat1.x + (-u_xlat10);
    u_xlat10 = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10;
    u_xlat5 = u_xlat5 * u_xlat10;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10 = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10 * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10 = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10 + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
vec2 u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
uint u_xlatu15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10.x = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6.x = u_xlat1.y * 1.5;
    u_xlat6.x = min(u_xlat6.x, _FresnelPow);
    u_xlat6.x = u_xlat6.x + (-_FresnelPow);
    u_xlat10.x = u_xlat10.x * u_xlat6.x + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat6.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat10.x = vs_TEXCOORD2.w * u_xlat10.x + u_xlat11.x;
    u_xlat6.x = u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6.x * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10.x;
    u_xlat5 = (-u_xlat10.x) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10.x = u_xlat10.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10.x + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat6.x = u_xlat6.x * 25.0 + 1.0;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat11.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat11.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x + (-u_xlat10.x);
    u_xlat10.x = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10.x;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10.x = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10.x = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10.x + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10.x = u_xlat5 * 15.0;
    u_xlatu15 = uint(u_xlat10.x);
    u_xlat10.x = trunc(u_xlat10.x);
    u_xlat5 = u_xlat5 * 15.0 + (-u_xlat10.x);
    u_xlatu10 = min(u_xlatu15, 14u);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati1 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat15 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat1.xy = vec2(u_xlat15) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat15 * u_xlat1.z;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.w = u_xlat15 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb15 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat11.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat11.y * u_xlat6.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.z = u_xlat15 * u_xlat11.x;
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb15 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat2.x = floor(u_xlat6.y);
    u_xlat6.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat15 = u_xlat6.y * u_xlat1.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.y = u_xlat15 * u_xlat6.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat2.xy = u_xlat10.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb15 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat7.xy = (bool(u_xlatb15)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat10.x * u_xlat7.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.w = u_xlat10.x * u_xlat7.x;
    u_xlat10.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat10.x>=(-u_xlat10.x));
#else
    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);
#endif
    u_xlat15 = floor(u_xlat10.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat7.y * u_xlat2.x;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.z = u_xlat10.x * u_xlat7.x;
    u_xlat2.xy = vec2(u_xlat15) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10.x = u_xlat15 * u_xlat2.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.y = u_xlat10.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat5) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
float u_xlat5;
vec2 u_xlat6;
vec2 u_xlat7;
vec2 u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
vec2 u_xlat11;
float u_xlat15;
uint u_xlatu15;
bool u_xlatb15;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xy = u_xlat0.xx * vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * _ConeSlopeCosSin.xx;
    u_xlat0.z = (-_ConeSlopeCosSin.y);
    u_xlat15 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat15) + vec3(0.0, 0.0, -1.0);
    u_xlat0.xyz = vs_TEXCOORD2.www * u_xlat0.xyz + (-u_xlat1.xyz);
    u_xlat1.xy = vs_TEXCOORD0.xy;
    u_xlat1.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat15 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat3.xyz = vec3(u_xlat15) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat15) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat15 = dot((-u_xlat2.xyz), u_xlat1.xyz);
    u_xlat1.xyz = (-vec3(u_xlat15)) * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat15 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat15 = inversesqrt(u_xlat15);
    u_xlat1.xyz = vec3(u_xlat15) * u_xlat1.xyz;
    u_xlat15 = dot(u_xlat0.xyz, u_xlat1.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, (-u_xlat2.xyz));
    u_xlat0.x = (-u_xlat15) + u_xlat0.x;
    u_xlat0.x = abs(u_xlat2.z) * u_xlat0.x + u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = log2(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!((-u_xlat0.x)>=0.0);
#else
    u_xlatb0 = (-u_xlat0.x)>=0.0;
#endif
    u_xlat10.x = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat2.z + -1.0;
    u_xlat15 = u_xlat15 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat6.x = u_xlat1.y * 1.5;
    u_xlat6.x = min(u_xlat6.x, _FresnelPow);
    u_xlat6.x = u_xlat6.x + (-_FresnelPow);
    u_xlat10.x = u_xlat10.x * u_xlat6.x + _FresnelPow;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat5 = exp2(u_xlat5);
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat0.x = (u_xlatb0) ? 0.0 : u_xlat5;
    u_xlat0.x = vs_TEXCOORD2.w * (-u_xlat0.x) + u_xlat0.x;
    u_xlat5 = (-u_xlat0.x) + 1.00100005;
    u_xlat10.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat10.x = float(1.0) / u_xlat10.x;
    u_xlat10.x = u_xlat10.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat6.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat11.x = u_xlat10.x * u_xlat6.x;
    u_xlat10.x = (-u_xlat6.x) * u_xlat10.x + 1.0;
    u_xlat10.x = vs_TEXCOORD2.w * u_xlat10.x + u_xlat11.x;
    u_xlat6.x = u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat10.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat5 = u_xlat6.x * u_xlat5 + u_xlat0.x;
    u_xlat0.x = (-u_xlat5) + u_xlat0.x;
    u_xlat0.x = vs_TEXCOORD2.w * u_xlat0.x + u_xlat5;
    u_xlat5 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat5 = u_xlat5 / u_xlat10.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5 = min(max(u_xlat5, 0.0), 1.0);
#else
    u_xlat5 = clamp(u_xlat5, 0.0, 1.0);
#endif
    u_xlat10.x = u_xlat5 * -2.0 + 3.0;
    u_xlat5 = u_xlat5 * u_xlat5;
    u_xlat1.x = u_xlat5 * u_xlat10.x;
    u_xlat5 = (-u_xlat10.x) * u_xlat5 + 1.0;
    u_xlat5 = unity_OrthoParams.w * u_xlat5 + u_xlat1.x;
    u_xlat10.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat1.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat10.x = u_xlat10.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat10.x + -1.0;
    u_xlat1.x = u_xlat1.x * -5.00000048;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat1.x = u_xlat1.x * u_xlat6.x;
    u_xlat1.x = min(u_xlat1.x, 1.0);
    u_xlat6.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = (-u_xlat10.x) + 1.0;
    u_xlat6.x = u_xlat6.x * 25.0 + 1.0;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat11.x = u_xlat10.x * -2.0 + 3.0;
    u_xlat10.x = u_xlat10.x * u_xlat10.x;
    u_xlat10.x = u_xlat10.x * u_xlat11.x;
    u_xlat1.x = u_xlat6.x * u_xlat1.x + (-u_xlat10.x);
    u_xlat10.x = _AttenuationLerpLinearQuad * u_xlat1.x + u_xlat10.x;
    u_xlat5 = u_xlat5 * u_xlat10.x;
    u_xlat0.x = u_xlat0.x * u_xlat5;
    u_xlat5 = u_xlat15 * -2.0 + 3.0;
    u_xlat10.x = u_xlat15 * u_xlat15;
    u_xlat5 = u_xlat10.x * u_xlat5;
    u_xlat5 = min(u_xlat5, 1.0);
    u_xlat10.x = u_xlat5 * -2.0 + 1.0;
    u_xlat5 = vs_TEXCOORD2.w * u_xlat10.x + u_xlat5;
    u_xlat0.x = u_xlat5 * u_xlat0.x;
    u_xlat5 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10.x = u_xlat5 * 15.0;
    u_xlatu15 = uint(u_xlat10.x);
    u_xlat10.x = trunc(u_xlat10.x);
    u_xlat5 = u_xlat5 * 15.0 + (-u_xlat10.x);
    u_xlatu10 = min(u_xlatu15, 14u);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati1 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat15 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat1.xy = vec2(u_xlat15) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat15 * u_xlat1.z;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.w = u_xlat15 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb15 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat11.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat11.y * u_xlat6.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.z = u_xlat15 * u_xlat11.x;
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb15 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat2.x = floor(u_xlat6.y);
    u_xlat6.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat15 = u_xlat6.y * u_xlat1.x;
    u_xlat15 = fract(u_xlat15);
    u_xlat2.y = u_xlat15 * u_xlat6.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu15 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu15)]);
    u_xlat2.xy = u_xlat10.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb15 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb15 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat7.xy = (bool(u_xlatb15)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat10.x * u_xlat7.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.w = u_xlat10.x * u_xlat7.x;
    u_xlat10.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat10.x>=(-u_xlat10.x));
#else
    u_xlatb10 = u_xlat10.x>=(-u_xlat10.x);
#endif
    u_xlat15 = floor(u_xlat10.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat7.y * u_xlat2.x;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.z = u_xlat10.x * u_xlat7.x;
    u_xlat2.xy = vec2(u_xlat15) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10.x = u_xlat15 * u_xlat2.y;
    u_xlat10.x = fract(u_xlat10.x);
    u_xlat3.y = u_xlat10.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat5) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13 * -2.0 + 3.0;
    u_xlat12.x = u_xlat13 * u_xlat13;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13 * -2.0 + 3.0;
    u_xlat12.x = u_xlat13 * u_xlat13;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12 * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat6.x + -1.0;
    u_xlat12 = u_xlat12 * -5.00000048;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12 = u_xlat18 * u_xlat12 + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12 + u_xlat6.x;
    u_xlat12 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat12 = u_xlat12 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat18;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat12 = vs_TEXCOORD2.w * u_xlat12 + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12 * u_xlat1.x + _DistanceCamClipping;
    u_xlat12 = u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13 * -2.0 + 3.0;
    u_xlat12 = u_xlat13 * u_xlat13;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec2 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12 * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat6.x + -1.0;
    u_xlat12 = u_xlat12 * -5.00000048;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12 = u_xlat18 * u_xlat12 + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12 + u_xlat6.x;
    u_xlat12 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat12 = u_xlat12 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat18;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat12 = vs_TEXCOORD2.w * u_xlat12 + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12 * u_xlat1.x + _DistanceCamClipping;
    u_xlat12 = u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13 * -2.0 + 3.0;
    u_xlat12 = u_xlat13 * u_xlat13;
    u_xlat6.x = u_xlat12 * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7 = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7 * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13 * -2.0 + 3.0;
    u_xlat12.x = u_xlat13 * u_xlat13;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec3 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7 = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7 * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat13 = u_xlat3.z + -1.0;
    u_xlat13 = u_xlat13 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13 = min(max(u_xlat13, 0.0), 1.0);
#else
    u_xlat13 = clamp(u_xlat13, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13 * -2.0 + 3.0;
    u_xlat12.x = u_xlat13 * u_xlat13;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat13.x = u_xlat3.z + -1.0;
    u_xlat13.x = u_xlat13.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat13.x = min(max(u_xlat13.x, 0.0), 1.0);
#else
    u_xlat13.x = clamp(u_xlat13.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat13.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat13.x * u_xlat13.x;
    u_xlat6 = u_xlat12.x * u_xlat6;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0.x = u_xlat0.x / u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6 = u_xlat0.x + -1.0;
    u_xlat6 = u_xlat6 * -5.00000048;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat12.x;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat12.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat18;
    u_xlat6 = u_xlat12.x * u_xlat6 + (-u_xlat0.x);
    u_xlat0.x = _AttenuationLerpLinearQuad * u_xlat6 + u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12 * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat6.x + -1.0;
    u_xlat12 = u_xlat12 * -5.00000048;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12 = u_xlat18 * u_xlat12 + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12 + u_xlat6.x;
    u_xlat12 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat12 = u_xlat12 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat18;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat12 = vs_TEXCOORD2.w * u_xlat12 + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12 * u_xlat1.x + _DistanceCamClipping;
    u_xlat12 = u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12 = log2(abs(u_xlat3.z));
    u_xlat12 = u_xlat12 * 10.0;
    u_xlat12 = exp2(u_xlat12);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
float u_xlat12;
bool u_xlatb12;
float u_xlat13;
float u_xlat18;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12 = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12 * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12 = u_xlat6.x + -1.0;
    u_xlat12 = u_xlat12 * -5.00000048;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = u_xlat12 * u_xlat18;
    u_xlat12 = min(u_xlat12, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12 = u_xlat18 * u_xlat12 + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12 + u_xlat6.x;
    u_xlat12 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12 = float(1.0) / u_xlat12;
    u_xlat12 = u_xlat12 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12 * -2.0 + 3.0;
    u_xlat12 = u_xlat12 * u_xlat12;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12 * u_xlat18;
    u_xlat12 = (-u_xlat18) * u_xlat12 + 1.0;
    u_xlat12 = vs_TEXCOORD2.w * u_xlat12 + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12 * u_xlat1.x + _DistanceCamClipping;
    u_xlat12 = u_xlat12;
#ifdef UNITY_ADRENO_ES3
    u_xlat12 = min(max(u_xlat12, 0.0), 1.0);
#else
    u_xlat12 = clamp(u_xlat12, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13 = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12 = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12 = log2(abs(u_xlat3.z));
    u_xlat12 = u_xlat12 * 10.0;
    u_xlat12 = exp2(u_xlat12);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12 * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat6.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat6.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb12 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat12.x = u_xlatb12 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat12.x * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat6.x + u_xlat0.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat18 = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = (-u_xlat18) * u_xlat12.x + 1.0;
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat1.x;
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat18 = u_xlat12.x * u_xlat1.x + _DistanceCamClipping;
    u_xlat12.x = u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat7.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat18 = u_xlat7.x / u_xlat18;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat7.x = u_xlat18 * -2.0 + 3.0;
    u_xlat18 = u_xlat18 * u_xlat18;
    u_xlat13.x = u_xlat18 * u_xlat7.x;
    u_xlat18 = (-u_xlat7.x) * u_xlat18 + 1.0;
    u_xlat18 = unity_OrthoParams.w * u_xlat18 + u_xlat13.x;
    u_xlat6.x = u_xlat18 * u_xlat6.x;
    u_xlat0.x = u_xlat0.x * u_xlat6.x;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xz = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat6.xz * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat7.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat7.xyz = vs_TEXCOORD2.www * u_xlat2.xyz + (-u_xlat7.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat7.xyz, u_xlat2.xyz);
    u_xlat18 = dot(u_xlat7.xyz, (-u_xlat3.xyz));
    u_xlat18 = (-u_xlat6.x) + u_xlat18;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat18 + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat18 = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat1.x = u_xlat7.x * u_xlat1.x + _FresnelPow;
    u_xlat18 = u_xlat18 * u_xlat1.x;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat18;
    u_xlat6.x = vs_TEXCOORD2.w * (-u_xlat6.x) + u_xlat6.x;
    u_xlat18 = (-u_xlat6.x) + 1.00100005;
    u_xlat12.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat6.x + u_xlat12.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat18;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat18 = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat18 + u_xlat6.x;
    u_xlat0.x = u_xlat6.x * u_xlat0.x;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7 = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7 * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump float u_xlat16_1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
float u_xlat7;
bool u_xlatb7;
vec2 u_xlat12;
bool u_xlatb12;
float u_xlat18;
void main()
{
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7 = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7 = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7 * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7 = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7 * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat0 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_5.xyz = u_xlat0.xyz * _ColorFlat.www;
    u_xlat16_1 = (-_AlphaInside) + _AlphaOutside;
    u_xlat1.x = vs_TEXCOORD2.w * u_xlat16_1 + _AlphaInside;
    u_xlat0.xyz = u_xlat1.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareFrontal;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
int u_xlati1;
bool u_xlatb1;
vec4 u_xlat2;
mediump float u_xlat16_2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
float u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
vec2 u_xlat13;
float u_xlat18;
uint u_xlatu18;
bool u_xlatb18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.x = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0.x = u_xlat0.x + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0.x<0.0);
#else
    u_xlatb6 = u_xlat0.x<0.0;
#endif
    u_xlat0.x = u_xlat0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6 = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat0.x = u_xlat0.x * u_xlat6;
    u_xlat6 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6 = u_xlat6 / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat6) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6);
    u_xlat6 = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = _GlareFrontal * _DistanceFadeEnd + 0.00100000005;
    u_xlat6 = float(1.0) / u_xlat6;
    u_xlat6 = u_xlat6 * abs(vs_TEXCOORD0.z);
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat12.x = _CameraParams.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * u_xlat12.x;
    u_xlat6 = (-u_xlat12.x) * u_xlat6 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat6 + u_xlat18;
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareFrontal)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = u_xlat6 * u_xlat12.x + _DistanceCamClipping;
    u_xlat6 = u_xlat6;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat1.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.x = u_xlat1.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat7.x = u_xlat12.x * u_xlat1.x;
    u_xlat12.x = (-u_xlat1.x) * u_xlat12.x + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat12.x + u_xlat7.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat1.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat12.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat12.x = _ZBufferParams.z * u_xlat12.x + _ZBufferParams.w;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat12.x = u_xlat12.x + (-_ProjectionParams.y);
    u_xlat12.x = max(u_xlat12.x, 0.0);
    u_xlat1.x = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat1.x = max(u_xlat1.x, 0.0);
    u_xlat12.x = u_xlat12.x + (-u_xlat1.x);
    u_xlat1.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat1.x * _DepthBlendDistance;
    u_xlat12.x = u_xlat12.x / u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = (-u_xlat12.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb7 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat7.x = u_xlatb7 ? 1.0 : float(0.0);
    u_xlat12.x = u_xlat7.x * u_xlat1.x + u_xlat12.x;
    u_xlat1.x = (-u_xlat12.x) + 1.0;
    u_xlat12.x = unity_OrthoParams.w * u_xlat1.x + u_xlat12.x;
    u_xlat0.x = u_xlat12.x * u_xlat0.x;
    u_xlat12.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat1.xy = u_xlat12.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat1.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat1.xyz;
    u_xlat1.xyz = u_xlat1.xyz * u_xlat12.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + (-u_xlat2.xyz);
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat12.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat4.xyz = u_xlat12.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat12.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat12.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat12.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat12.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat12.x = inversesqrt(u_xlat12.x);
    u_xlat2.xyz = u_xlat12.xxx * u_xlat2.xyz;
    u_xlat12.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat1.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat1.x = (-u_xlat12.x) + u_xlat1.x;
    u_xlat12.x = abs(u_xlat3.z) * u_xlat1.x + u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat1.x;
    u_xlat1.x = log2(u_xlat12.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!((-u_xlat12.x)>=0.0);
#else
    u_xlatb12 = (-u_xlat12.x)>=0.0;
#endif
    u_xlat7.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat7.x * u_xlat18 + _FresnelPow;
    u_xlat18 = u_xlat1.x * u_xlat18;
    u_xlat18 = exp2(u_xlat18);
    u_xlat18 = min(u_xlat18, 1.0);
    u_xlat12.x = (u_xlatb12) ? 0.0 : u_xlat18;
    u_xlat12.x = vs_TEXCOORD2.w * (-u_xlat12.x) + u_xlat12.x;
    u_xlat18 = (-u_xlat12.x) + 1.00100005;
    u_xlat6 = u_xlat6 * u_xlat18 + u_xlat12.x;
    u_xlat12.x = (-u_xlat6) + u_xlat12.x;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6 = u_xlat6 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6 = min(max(u_xlat6, 0.0), 1.0);
#else
    u_xlat6 = clamp(u_xlat6, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat6 * -2.0 + 3.0;
    u_xlat6 = u_xlat6 * u_xlat6;
    u_xlat6 = u_xlat6 * u_xlat18;
    u_xlat6 = min(u_xlat6, 1.0);
    u_xlat18 = u_xlat6 * -2.0 + 1.0;
    u_xlat6 = vs_TEXCOORD2.w * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6 = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat18 = (-u_xlat6) + 1.0;
    u_xlat6 = u_xlat12.x * u_xlat18 + u_xlat6;
    u_xlat0.x = u_xlat6 * u_xlat0.x;
    u_xlat6 = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6 * 15.0;
    u_xlatu18 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6 = u_xlat6 * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu18, 14u);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati1 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati1]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati1]);
    u_xlat18 = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat1.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat18 * u_xlat1.z;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.w = u_xlat18 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb18 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat1.x = floor(u_xlat1.z);
    u_xlat13.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat13.y * u_xlat7.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.z = u_xlat18 * u_xlat13.x;
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb18 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat2.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat18 = u_xlat7.y * u_xlat1.x;
    u_xlat18 = fract(u_xlat18);
    u_xlat2.y = u_xlat18 * u_xlat7.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu18 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu18)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb18 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb18 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.y);
    u_xlat8.xy = (bool(u_xlatb18)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat8.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat8.x;
    u_xlat12.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat12.x>=(-u_xlat12.x));
#else
    u_xlatb12 = u_xlat12.x>=(-u_xlat12.x);
#endif
    u_xlat18 = floor(u_xlat12.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat8.x;
    u_xlat2.xy = vec2(u_xlat18) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat3.x = floor(u_xlat2.y);
    u_xlat2.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat18 * u_xlat2.y;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat2.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = vec4(u_xlat6) * u_xlat2 + u_xlat16_1;
    u_xlat0 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat0.xyz;
    u_xlat16_2 = (-_AlphaInside) + _AlphaOutside;
    u_xlat2.x = vs_TEXCOORD2.w * u_xlat16_2 + _AlphaInside;
    u_xlat0.xyz = u_xlat2.xxx * u_xlat16_5.xyz;
    SV_Target0 = u_xlat0;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
}
}
 Pass {
  Tags { "IGNOREPROJECTOR" = "true" "QUEUE" = "Transparent" "RenderType" = "Transparent" }
  ZWrite Off
  GpuProgramID 109455
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat1.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat1.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat1.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat6.x = u_xlat2.z + -1.0;
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat10 = u_xlat6.x * u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat10 = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
float u_xlat7;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7 = u_xlat3.z + -1.0;
    u_xlat7 = u_xlat7 * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7 = min(max(u_xlat7, 0.0), 1.0);
#else
    u_xlat7 = clamp(u_xlat7, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7 * -2.0 + 3.0;
    u_xlat12.x = u_xlat7 * u_xlat7;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.w = u_xlat1.w;
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat7.x = u_xlat3.z + -1.0;
    u_xlat7.x = u_xlat7.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat7.x = min(max(u_xlat7.x, 0.0), 1.0);
#else
    u_xlat7.x = clamp(u_xlat7.x, 0.0, 1.0);
#endif
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat7.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat7.x * u_xlat7.x;
    u_xlat6.x = u_xlat12.x * u_xlat6.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat6.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat0 = u_xlat0 / u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat6.x = u_xlat0 + -1.0;
    u_xlat6.x = u_xlat6.x * -5.00000048;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat12.x = u_xlat0 * u_xlat0;
    u_xlat0 = (-u_xlat0) + 1.0;
    u_xlat12.x = u_xlat12.x * 25.0 + 1.0;
    u_xlat12.x = float(1.0) / u_xlat12.x;
    u_xlat18 = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat18;
    u_xlat6.x = u_xlat12.x * u_xlat6.x + (-u_xlat0);
    u_xlat0 = _AttenuationLerpLinearQuad * u_xlat6.x + u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec3 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * u_xlat0.zzz + u_xlat2.xyz;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat0.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
vec3 u_xlat2;
vec3 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
float u_xlat10;
bool u_xlatb10;
float u_xlat15;
float u_xlat17;
void main()
{
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = u_xlat0.xxxx * _ColorFlat;
    u_xlat16_4.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump float u_xlat16_5;
lowp float u_xlat10_5;
bool u_xlatb5;
vec3 u_xlat6;
int u_xlati6;
bool u_xlatb6;
vec2 u_xlat7;
float u_xlat10;
int u_xlati10;
uint u_xlatu10;
bool u_xlatb10;
float u_xlat11;
vec2 u_xlat12;
float u_xlat15;
float u_xlat17;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat0.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat0.x = _ZBufferParams.z * u_xlat0.x + _ZBufferParams.w;
    u_xlat0.x = float(1.0) / u_xlat0.x;
    u_xlat0.x = u_xlat0.x + (-_ProjectionParams.y);
    u_xlat0.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat0.xy = max(u_xlat0.xy, vec2(0.0, 0.0));
    u_xlat0.x = (-u_xlat0.y) + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat5.x = u_xlat5.x * _DepthBlendDistance;
    u_xlat0.x = u_xlat0.x / u_xlat5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat5.x = (-u_xlat0.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb10 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat10 = u_xlatb10 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat10 * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = unity_OrthoParams.w * u_xlat5.x + u_xlat0.x;
    u_xlat5.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat10 = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat5.x = u_xlat5.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x + -1.0;
    u_xlat10 = u_xlat10 * -5.00000048;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat15 = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = (-u_xlat5.x) + 1.0;
    u_xlat15 = u_xlat15 * 25.0 + 1.0;
    u_xlat15 = float(1.0) / u_xlat15;
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat10 = u_xlat15 * u_xlat10 + (-u_xlat5.x);
    u_xlat5.x = _AttenuationLerpLinearQuad * u_xlat10 + u_xlat5.x;
    u_xlat10 = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat1.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat15 = vs_TEXCOORD2.w * u_xlat1.x + _DistanceCamClipping;
    u_xlat1.x = u_xlat1.y * 1.5;
    u_xlat1.x = min(u_xlat1.x, _FresnelPow);
    u_xlat1.x = u_xlat1.x + (-_FresnelPow);
    u_xlat10 = u_xlat10 / u_xlat15;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat15 = u_xlat10 * -2.0 + 3.0;
    u_xlat10 = u_xlat10 * u_xlat10;
    u_xlat6.x = u_xlat10 * u_xlat15;
    u_xlat10 = (-u_xlat15) * u_xlat10 + 1.0;
    u_xlat10 = unity_OrthoParams.w * u_xlat10 + u_xlat6.x;
    u_xlat5.x = u_xlat10 * u_xlat5.x;
    u_xlat0.x = u_xlat0.x * u_xlat5.x;
    u_xlat5.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat5.xy = u_xlat5.xx * vs_TEXCOORD0.xy;
    u_xlat2.xy = u_xlat5.xy * _ConeSlopeCosSin.xx;
    u_xlat2.z = (-_ConeSlopeCosSin.y);
    u_xlat5.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat5.x = inversesqrt(u_xlat5.x);
    u_xlat6.xyz = u_xlat5.xxx * u_xlat2.xyz;
    u_xlat5.xyz = (-u_xlat2.xyz) * u_xlat5.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat5.xyz = vs_TEXCOORD2.www * u_xlat5.xyz + u_xlat6.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat2.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat2.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat2.xyz;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) + vs_TEXCOORD0.xyz;
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat3.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * vec3(u_xlat17) + _CameraParams.xyz;
    u_xlat2.xyz = unity_OrthoParams.www * u_xlat2.xyz + u_xlat3.xyz;
    u_xlat17 = dot((-u_xlat2.xyz), u_xlat6.xyz);
    u_xlat6.xyz = (-vec3(u_xlat17)) * u_xlat6.xyz + (-u_xlat2.xyz);
    u_xlat17 = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat6.xyz = u_xlat6.xyz * vec3(u_xlat17);
    u_xlat6.x = dot(u_xlat5.xyz, u_xlat6.xyz);
    u_xlat5.x = dot(u_xlat5.xyz, (-u_xlat2.xyz));
    u_xlat5.x = (-u_xlat6.x) + u_xlat5.x;
    u_xlat5.x = abs(u_xlat2.z) * u_xlat5.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat10;
    u_xlat10 = log2(u_xlat5.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb5 = !!((-u_xlat5.x)>=0.0);
#else
    u_xlatb5 = (-u_xlat5.x)>=0.0;
#endif
    u_xlat15 = min(abs(u_xlat2.z), 1.0);
    u_xlat15 = u_xlat15 * u_xlat1.x + _FresnelPow;
    u_xlat10 = u_xlat10 * u_xlat15;
    u_xlat10 = exp2(u_xlat10);
    u_xlat10 = min(u_xlat10, 1.0);
    u_xlat5.x = (u_xlatb5) ? 0.0 : u_xlat10;
    u_xlat10 = (-u_xlat5.x) + 1.0;
    u_xlat5.x = vs_TEXCOORD2.w * u_xlat10 + u_xlat5.x;
    u_xlat10 = (-u_xlat5.x) + 1.00100005;
    u_xlat15 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat15 = min(max(u_xlat15, 0.0), 1.0);
#else
    u_xlat15 = clamp(u_xlat15, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat15 * u_xlat10 + u_xlat5.x;
    u_xlat5.x = (-u_xlat10) + u_xlat5.x;
    u_xlat15 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat5.x + u_xlat10;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = u_xlat2.z + -1.0;
    u_xlat10 = log2(abs(u_xlat2.z));
    u_xlat10 = u_xlat10 * 10.0;
    u_xlat10 = exp2(u_xlat10);
    u_xlat5.x = u_xlat5.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat5.x = min(max(u_xlat5.x, 0.0), 1.0);
#else
    u_xlat5.x = clamp(u_xlat5.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat5.x * -2.0 + 3.0;
    u_xlat5.x = u_xlat5.x * u_xlat5.x;
    u_xlat5.x = u_xlat5.x * u_xlat1.x;
    u_xlat5.x = min(u_xlat5.x, 1.0);
    u_xlat1.x = u_xlat5.x * -2.0 + 1.0;
    u_xlat5.x = u_xlat15 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_5 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_5 = u_xlat10_5 + -1.0;
    u_xlat5.x = _NoiseParam.x * u_xlat16_5 + 1.0;
    u_xlat1.x = (-u_xlat5.x) + 1.0;
    u_xlat5.x = u_xlat10 * u_xlat1.x + u_xlat5.x;
    u_xlat0.x = u_xlat5.x * u_xlat0.x;
    u_xlat5.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat10 = u_xlat5.x * 15.0;
    u_xlatu1 = uint(u_xlat10);
    u_xlat10 = trunc(u_xlat10);
    u_xlat5.x = u_xlat5.x * 15.0 + (-u_xlat10);
    u_xlatu10 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu10 >> 2u;
    u_xlati6 = int(u_xlatu10 & 3u);
    u_xlatu10 = u_xlatu10 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati6]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati6]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat6.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat6.x>=(-u_xlat6.x));
#else
    u_xlatb6 = u_xlat6.x>=(-u_xlat6.x);
#endif
    u_xlat11 = floor(u_xlat6.y);
    u_xlat6.xz = (bool(u_xlatb6)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat6.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat6.x;
    u_xlat1.xy = vec2(u_xlat11) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat6.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat11 = u_xlat1.w * u_xlat11;
    u_xlat11 = fract(u_xlat11);
    u_xlat2.z = u_xlat11 * u_xlat1.x;
    u_xlat1.xz = u_xlat6.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat6.x = u_xlat1.z * u_xlat6.x;
    u_xlat6.x = fract(u_xlat6.x);
    u_xlat2.y = u_xlat6.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu10 >> 2u;
    u_xlati10 = int(u_xlatu10 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati10]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati10]);
    u_xlat10 = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = vec2(u_xlat10) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat7.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat10 * u_xlat2.z;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.w = u_xlat10 * u_xlat2.x;
    u_xlat2.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb10 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat12.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat12.y * u_xlat7.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.z = u_xlat10 * u_xlat12.x;
    u_xlat7.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb10 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat3.x = floor(u_xlat7.y);
    u_xlat7.xy = (bool(u_xlatb10)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat10 = u_xlat7.y * u_xlat2.x;
    u_xlat10 = fract(u_xlat10);
    u_xlat3.y = u_xlat10 * u_xlat7.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat5.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = u_xlat0.xxxx * u_xlat1;
    u_xlat16_4.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0.x = u_xlat15 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = u_xlat0.xxx * u_xlat16_4.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD0.z) / _DistanceFadeEnd;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	mediump vec4 _ColorFlat;
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
bool u_xlatb1;
vec3 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec2 u_xlat12;
float u_xlat18;
void main()
{
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = vec4(u_xlat0) * _ColorFlat;
    u_xlat16_5.xyz = u_xlat1.xyz * _ColorFlat.www;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat1.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat1;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(64.0, 0.015625);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(64.0, 0.015625) : vec2(-64.0, -0.015625);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.0158730168, 0.0158730168, 0.0158730168, 0.0158730168) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec2 _ConeRadius;
uniform 	float _DistanceFadeEnd;
in highp vec4 in_POSITION0;
in highp vec4 in_TEXCOORD0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD5;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
bool u_xlatb0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlat0.x = (-_ConeRadius.xxxy.z) + _ConeRadius.xxxy.w;
    u_xlat0.x = in_POSITION0.z * u_xlat0.x + _ConeRadius.xxxy.z;
    u_xlat0.xy = u_xlat0.xx * in_POSITION0.xy;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat0.z = in_POSITION0.z * _DistanceFadeEnd;
    u_xlat1 = hlslcc_mtx4x4unity_ObjectToWorld[2] * u_xlat0.zzzz + u_xlat1;
    vs_TEXCOORD0.xyz = u_xlat0.xyz;
    u_xlat0 = u_xlat1 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    vs_TEXCOORD1 = hlslcc_mtx4x4unity_ObjectToWorld[3] * in_POSITION0.wwww + u_xlat1;
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.w = in_POSITION0.w;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixV[1].zxyz;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[0].zxyz * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixV[2].zxyz * u_xlat0.zzzz + u_xlat2;
    vs_TEXCOORD2.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * u_xlat0.www + u_xlat2.yzw;
    u_xlat0.x = hlslcc_mtx4x4unity_MatrixV[3].z * u_xlat0.w + u_xlat2.x;
    vs_TEXCOORD4.z = (-u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(0.5<in_TEXCOORD0.x);
#else
    u_xlatb0 = 0.5<in_TEXCOORD0.x;
#endif
    vs_TEXCOORD2.w = u_xlatb0 ? 1.0 : float(0.0);
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD4.xy = u_xlat0.zz + u_xlat0.xw;
    vs_TEXCOORD4.w = u_xlat1.w;
    u_xlat0.xy = u_xlat1.ww + u_xlat1.xy;
    vs_TEXCOORD5.zw = u_xlat1.zw;
    vs_TEXCOORD5.xy = u_xlat0.xy * vec2(0.5, 0.5);
    vs_TEXCOORD6.xyz = in_POSITION0.xyz;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 unity_OrthoParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4_ColorGradientMatrix[4];
uniform 	mediump float _AlphaInside;
uniform 	mediump float _AlphaOutside;
uniform 	vec2 _ConeSlopeCosSin;
uniform 	float _ConeApexOffsetZ;
uniform 	float _AttenuationLerpLinearQuad;
uniform 	float _DistanceFadeStart;
uniform 	float _DistanceFadeEnd;
uniform 	float _DistanceCamClipping;
uniform 	float _FresnelPow;
uniform 	float _GlareBehind;
uniform 	vec4 _CameraParams;
uniform 	vec4 _ClippingPlaneWS;
uniform 	float _DepthBlendDistance;
uniform 	vec4 _VLB_NoiseGlobal;
uniform 	vec4 _NoiseLocal;
uniform 	vec3 _NoiseParam;
uniform lowp sampler3D _VLB_NoiseTex3D;
uniform highp sampler2D _CameraDepthTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD4;
in highp vec3 vs_TEXCOORD6;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
mediump float u_xlat16_0;
vec4 u_xlat1;
mediump vec4 u_xlat16_1;
uint u_xlatu1;
bool u_xlatb1;
vec4 u_xlat2;
uint u_xlatu2;
bool u_xlatb2;
vec4 u_xlat3;
vec3 u_xlat4;
mediump vec3 u_xlat16_5;
vec2 u_xlat6;
mediump float u_xlat16_6;
lowp float u_xlat10_6;
bool u_xlatb6;
vec3 u_xlat7;
int u_xlati7;
bool u_xlatb7;
vec2 u_xlat8;
vec2 u_xlat12;
int u_xlati12;
uint u_xlatu12;
bool u_xlatb12;
float u_xlat13;
vec2 u_xlat14;
float u_xlat18;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0 = dot(_ClippingPlaneWS.xyz, vs_TEXCOORD1.xyz);
    u_xlat0 = u_xlat0 + _ClippingPlaneWS.w;
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!(u_xlat0<0.0);
#else
    u_xlatb6 = u_xlat0<0.0;
#endif
    u_xlat0 = u_xlat0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    if((int(u_xlatb6) * int(0xffffffffu))!=0){discard;}
    u_xlat6.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat0 = u_xlat0 * u_xlat6.x;
    u_xlat6.x = abs(vs_TEXCOORD0.z) + (-_DistanceFadeStart);
    u_xlat12.x = (-_DistanceFadeStart) + _DistanceFadeEnd;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x + -1.0;
    u_xlat12.x = u_xlat12.x * -5.00000048;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat12.x * -2.0 + 3.0;
    u_xlat12.x = u_xlat12.x * u_xlat12.x;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat18 = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = (-u_xlat6.x) + 1.0;
    u_xlat18 = u_xlat18 * 25.0 + 1.0;
    u_xlat18 = float(1.0) / u_xlat18;
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat12.x = u_xlat18 * u_xlat12.x + (-u_xlat6.x);
    u_xlat6.x = _AttenuationLerpLinearQuad * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = abs(vs_TEXCOORD2.z) + (-_ProjectionParams.y);
    u_xlat12.xy = (-vec2(_DistanceCamClipping, _GlareBehind)) + vec2(0.00100000005, 1.0);
    u_xlat12.x = vs_TEXCOORD2.w * u_xlat12.x + _DistanceCamClipping;
    u_xlat18 = u_xlat12.y * 1.5;
    u_xlat18 = min(u_xlat18, _FresnelPow);
    u_xlat18 = u_xlat18 + (-_FresnelPow);
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat1.x = u_xlat6.x * u_xlat12.x;
    u_xlat6.x = (-u_xlat12.x) * u_xlat6.x + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat6.x + u_xlat1.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.xy = vs_TEXCOORD4.xy / vs_TEXCOORD4.ww;
    u_xlat6.x = texture(_CameraDepthTexture, u_xlat6.xy).x;
    u_xlat6.x = _ZBufferParams.z * u_xlat6.x + _ZBufferParams.w;
    u_xlat6.x = float(1.0) / u_xlat6.x;
    u_xlat6.x = u_xlat6.x + (-_ProjectionParams.y);
    u_xlat6.y = vs_TEXCOORD4.z + (-_ProjectionParams.y);
    u_xlat6.xy = max(u_xlat6.xy, vec2(0.0, 0.0));
    u_xlat6.x = (-u_xlat6.y) + u_xlat6.x;
    u_xlat12.x = abs(vs_TEXCOORD0.z) / _DepthBlendDistance;
#ifdef UNITY_ADRENO_ES3
    u_xlat12.x = min(max(u_xlat12.x, 0.0), 1.0);
#else
    u_xlat12.x = clamp(u_xlat12.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat12.x * _DepthBlendDistance;
    u_xlat6.x = u_xlat6.x / u_xlat12.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = (-u_xlat6.x) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(0.0>=_DepthBlendDistance);
#else
    u_xlatb1 = 0.0>=_DepthBlendDistance;
#endif
    u_xlat1.x = u_xlatb1 ? 1.0 : float(0.0);
    u_xlat6.x = u_xlat1.x * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = unity_OrthoParams.w * u_xlat12.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = dot(vs_TEXCOORD0.xy, vs_TEXCOORD0.xy);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat6.xy = u_xlat6.xx * vs_TEXCOORD0.xy;
    u_xlat1.xy = u_xlat6.xy * _ConeSlopeCosSin.xx;
    u_xlat1.z = (-_ConeSlopeCosSin.y);
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat1.xyz;
    u_xlat1.xyz = (-u_xlat1.xyz) * u_xlat6.xxx + vec3(0.0, 0.0, -1.0);
    u_xlat1.xyz = vs_TEXCOORD2.www * u_xlat1.xyz + u_xlat2.xyz;
    u_xlat2.xy = vs_TEXCOORD0.xy;
    u_xlat2.z = vs_TEXCOORD0.z + _ConeApexOffsetZ;
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat3.xyz = _WorldSpaceCameraPos.yyy * hlslcc_mtx4x4unity_WorldToObject[1].xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[0].xyz * _WorldSpaceCameraPos.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_WorldToObject[2].xyz * _WorldSpaceCameraPos.zzz + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz + hlslcc_mtx4x4unity_WorldToObject[3].xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) + vs_TEXCOORD0.xyz;
    u_xlat6.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat4.xyz = u_xlat6.xxx * u_xlat3.xyz;
    u_xlat3.xyz = (-u_xlat3.xyz) * u_xlat6.xxx + _CameraParams.xyz;
    u_xlat3.xyz = unity_OrthoParams.www * u_xlat3.xyz + u_xlat4.xyz;
    u_xlat6.x = dot((-u_xlat3.xyz), u_xlat2.xyz);
    u_xlat2.xyz = (-u_xlat6.xxx) * u_xlat2.xyz + (-u_xlat3.xyz);
    u_xlat6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat6.x = inversesqrt(u_xlat6.x);
    u_xlat2.xyz = u_xlat6.xxx * u_xlat2.xyz;
    u_xlat6.x = dot(u_xlat1.xyz, u_xlat2.xyz);
    u_xlat12.x = dot(u_xlat1.xyz, (-u_xlat3.xyz));
    u_xlat12.x = (-u_xlat6.x) + u_xlat12.x;
    u_xlat6.x = abs(u_xlat3.z) * u_xlat12.x + u_xlat6.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat12.x;
    u_xlat12.x = log2(u_xlat6.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb6 = !!((-u_xlat6.x)>=0.0);
#else
    u_xlatb6 = (-u_xlat6.x)>=0.0;
#endif
    u_xlat1.x = min(abs(u_xlat3.z), 1.0);
    u_xlat18 = u_xlat1.x * u_xlat18 + _FresnelPow;
    u_xlat12.x = u_xlat12.x * u_xlat18;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat12.x = min(u_xlat12.x, 1.0);
    u_xlat6.x = (u_xlatb6) ? 0.0 : u_xlat12.x;
    u_xlat12.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = vs_TEXCOORD2.w * u_xlat12.x + u_xlat6.x;
    u_xlat12.x = (-u_xlat6.x) + 1.00100005;
    u_xlat18 = vs_TEXCOORD2.w;
#ifdef UNITY_ADRENO_ES3
    u_xlat18 = min(max(u_xlat18, 0.0), 1.0);
#else
    u_xlat18 = clamp(u_xlat18, 0.0, 1.0);
#endif
    u_xlat12.x = u_xlat18 * u_xlat12.x + u_xlat6.x;
    u_xlat6.x = (-u_xlat12.x) + u_xlat6.x;
    u_xlat18 = (-vs_TEXCOORD2.w) + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat6.x + u_xlat12.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = u_xlat3.z + -1.0;
    u_xlat12.x = log2(abs(u_xlat3.z));
    u_xlat12.x = u_xlat12.x * 10.0;
    u_xlat12.x = exp2(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * -0.5;
#ifdef UNITY_ADRENO_ES3
    u_xlat6.x = min(max(u_xlat6.x, 0.0), 1.0);
#else
    u_xlat6.x = clamp(u_xlat6.x, 0.0, 1.0);
#endif
    u_xlat1.x = u_xlat6.x * -2.0 + 3.0;
    u_xlat6.x = u_xlat6.x * u_xlat6.x;
    u_xlat6.x = u_xlat6.x * u_xlat1.x;
    u_xlat6.x = min(u_xlat6.x, 1.0);
    u_xlat1.x = u_xlat6.x * -2.0 + 1.0;
    u_xlat6.x = u_xlat18 * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat1 = _VLB_NoiseGlobal + (-_NoiseLocal);
    u_xlat1 = _NoiseParam.yyyz * u_xlat1 + _NoiseLocal;
    u_xlat1.xyz = u_xlat1.xyz * _Time.yyy;
    u_xlat1.xyz = vs_TEXCOORD1.xyz * u_xlat1.www + u_xlat1.xyz;
    u_xlat1.xyz = fract(u_xlat1.xyz);
    u_xlat10_6 = texture(_VLB_NoiseTex3D, u_xlat1.xyz).w;
    u_xlat16_6 = u_xlat10_6 + -1.0;
    u_xlat6.x = _NoiseParam.x * u_xlat16_6 + 1.0;
    u_xlat1.x = (-u_xlat6.x) + 1.0;
    u_xlat6.x = u_xlat12.x * u_xlat1.x + u_xlat6.x;
    u_xlat0 = u_xlat6.x * u_xlat0;
    u_xlat6.x = vs_TEXCOORD6.x * 0.5 + 0.5;
    u_xlat12.x = u_xlat6.x * 15.0;
    u_xlatu1 = uint(u_xlat12.x);
    u_xlat12.x = trunc(u_xlat12.x);
    u_xlat6.x = u_xlat6.x * 15.0 + (-u_xlat12.x);
    u_xlatu12 = min(u_xlatu1, 14u);
    u_xlatu1 = u_xlatu12 >> 2u;
    u_xlati7 = int(u_xlatu12 & 3u);
    u_xlatu12 = u_xlatu12 + 1u;
    u_xlat2.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati7]);
    u_xlat2.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati7]);
    u_xlat1.x = dot(u_xlat2, ImmCB_0_0_0[int(u_xlatu1)]);
    u_xlat7.xy = u_xlat1.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb7 = !!(u_xlat7.x>=(-u_xlat7.x));
#else
    u_xlatb7 = u_xlat7.x>=(-u_xlat7.x);
#endif
    u_xlat13 = floor(u_xlat7.y);
    u_xlat7.xz = (bool(u_xlatb7)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat1.x = u_xlat7.z * u_xlat1.x;
    u_xlat1.x = fract(u_xlat1.x);
    u_xlat2.w = u_xlat1.x * u_xlat7.x;
    u_xlat1.xy = vec2(u_xlat13) * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat7.x = floor(u_xlat1.y);
    u_xlat1.xw = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat13 = u_xlat1.w * u_xlat13;
    u_xlat13 = fract(u_xlat13);
    u_xlat2.z = u_xlat13 * u_xlat1.x;
    u_xlat1.xz = u_xlat7.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(u_xlat1.x>=(-u_xlat1.x));
#else
    u_xlatb1 = u_xlat1.x>=(-u_xlat1.x);
#endif
    u_xlat2.x = floor(u_xlat1.z);
    u_xlat1.xz = (bool(u_xlatb1)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat7.x = u_xlat1.z * u_xlat7.x;
    u_xlat7.x = fract(u_xlat7.x);
    u_xlat2.y = u_xlat7.x * u_xlat1.x;
    u_xlat16_1 = u_xlat2 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149);
    u_xlatu2 = u_xlatu12 >> 2u;
    u_xlati12 = int(u_xlatu12 & 3u);
    u_xlat3.x = dot(hlslcc_mtx4x4_ColorGradientMatrix[0], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.y = dot(hlslcc_mtx4x4_ColorGradientMatrix[1], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.z = dot(hlslcc_mtx4x4_ColorGradientMatrix[2], ImmCB_0_0_0[u_xlati12]);
    u_xlat3.w = dot(hlslcc_mtx4x4_ColorGradientMatrix[3], ImmCB_0_0_0[u_xlati12]);
    u_xlat12.x = dot(u_xlat3, ImmCB_0_0_0[int(u_xlatu2)]);
    u_xlat2.xy = u_xlat12.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb2 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb2 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat8.x = floor(u_xlat2.y);
    u_xlat2.xz = (bool(u_xlatb2)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat12.x * u_xlat2.z;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.w = u_xlat12.x * u_xlat2.x;
    u_xlat2.xz = u_xlat8.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat2.x>=(-u_xlat2.x));
#else
    u_xlatb12 = u_xlat2.x>=(-u_xlat2.x);
#endif
    u_xlat2.x = floor(u_xlat2.z);
    u_xlat14.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat14.y * u_xlat8.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.z = u_xlat12.x * u_xlat14.x;
    u_xlat8.xy = u_xlat2.xx * vec2(8.0, 0.125);
#ifdef UNITY_ADRENO_ES3
    u_xlatb12 = !!(u_xlat8.x>=(-u_xlat8.x));
#else
    u_xlatb12 = u_xlat8.x>=(-u_xlat8.x);
#endif
    u_xlat3.x = floor(u_xlat8.y);
    u_xlat8.xy = (bool(u_xlatb12)) ? vec2(8.0, 0.125) : vec2(-8.0, -0.125);
    u_xlat12.x = u_xlat8.y * u_xlat2.x;
    u_xlat12.x = fract(u_xlat12.x);
    u_xlat3.y = u_xlat12.x * u_xlat8.x;
    u_xlat2 = u_xlat3 * vec4(0.142857149, 0.142857149, 0.142857149, 0.142857149) + (-u_xlat16_1);
    u_xlat1 = u_xlat6.xxxx * u_xlat2 + u_xlat16_1;
    u_xlat2 = vec4(u_xlat0) * u_xlat1;
    u_xlat16_5.xyz = u_xlat1.www * u_xlat2.xyz;
    u_xlat16_0 = (-_AlphaInside) + _AlphaOutside;
    u_xlat0 = u_xlat18 * u_xlat16_0 + _AlphaInside;
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat16_5.xyz;
    SV_Target0 = u_xlat2;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_HIGH" }
""
}
SubProgram "gles3 " {
Keywords { "VLB_DEPTH_BLEND" "VLB_NOISE_3D" "VLB_CLIPPING_PLANE" "VLB_COLOR_GRADIENT_VERTICAL" "VLB_COLOR_GRADIENT_MATRIX_LOW" }
""
}
}
}
}
}