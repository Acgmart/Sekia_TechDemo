//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/Projector/VisionPuzzle_Pattern" {
Properties {
_MainColor ("MainColor", Color) = (1,1,1,1)
_CutOff ("CutOff", Range(0, 1)) = 0
_PatternMask ("PatternMask", 2D) = "white" { }
_PatternMaskR_UVSet ("PatternMaskR_UVSet", Vector) = (1,1,0,0)
_PatternMaskB_UVSet ("PatternMaskB_UVSet", Vector) = (1,1,0,0)
_Normal ("Normal", 2D) = "bump" { }
_NormalIntensity ("NormalIntensity", Range(-1, 1)) = 1
_EmissionColor ("EmissionColor", Color) = (1,1,1,1)
_PuzzleStep ("PuzzleStep", Range(0, 4)) = 0
[Toggle(ENABLE_MULTIPLY_ALBEDO_ON)] _MultiplyAlbedo ("Multiply Albedo Buffer", Float) = 0
[Enum(UnityEngine.Rendering.BlendMode)] _DecalSrcBlend ("SrcBlend", Float) = 1
[Enum(UnityEngine.Rendering.BlendMode)] _DecalDstBlend ("DstBlend", Float) = 10
_AngleLimit ("Half-shadow Angle Limit", Float) = 0.5
}
SubShader {
 Pass {
  Tags { "LIGHTMODE" = "PREPASSDECALFINAL" }
  ZTest GEqual
  ZWrite Off
  Cull Front
  GpuProgramID 1232
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb32 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb32) ? u_xlat31 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb35 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb35) ? u_xlat34 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb31 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat32 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb31) ? u_xlat32 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = float(1.0) / _AngleLimit;
    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat34 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb34 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat35 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb34) ? u_xlat35 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = float(1.0) / _AngleLimit;
    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat34 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb32 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb32) ? u_xlat31 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb35 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb35) ? u_xlat34 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb31 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat32 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb31) ? u_xlat32 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb34 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat35 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb34) ? u_xlat35 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
lowp vec3 u_xlat10_4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_6.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec2 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat10_3.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_7.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb32 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb32) ? u_xlat31 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb35 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb35) ? u_xlat34 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb31 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat32 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb31) ? u_xlat32 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = float(1.0) / _AngleLimit;
    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat34 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
lowp vec3 u_xlat10_4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb34 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat35 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb34) ? u_xlat35 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = float(1.0) / _AngleLimit;
    u_xlat34 = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat3.xyz = vec3(u_xlat34) * u_xlat4.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat34 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec2 u_xlat4;
lowp vec4 u_xlat10_4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat10_4.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec2 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _CameraNormalsTexture;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat10_5.xyz = texture(_CameraNormalsTexture, u_xlat1.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
mediump vec4 u_xlat16_3;
vec2 u_xlat4;
lowp vec3 u_xlat10_4;
uvec4 u_xlatu4;
bool u_xlatb4;
mediump vec3 u_xlat16_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat10;
mediump vec3 u_xlat16_10;
bool u_xlatb10;
mediump vec3 u_xlat16_12;
mediump float u_xlat16_14;
vec2 u_xlat19;
lowp vec2 u_xlat10_19;
float u_xlat27;
lowp float u_xlat10_27;
bool u_xlatb27;
mediump float u_xlat16_30;
mediump float u_xlat16_32;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat27 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat27 = _ZBufferParams.x * u_xlat27 + _ZBufferParams.y;
    u_xlat27 = float(1.0) / u_xlat27;
    u_xlat0.xyz = vec3(u_xlat27) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat19.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb27 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb27 = u_xlatb2.z || u_xlatb27;
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat27 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb4 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb4 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb4) ? u_xlat27 : u_xlat2.y;
    u_xlat10_27 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat27 = u_xlat10_27 + _DeferredProj_OcclusionParams.w;
    u_xlat27 = (-u_xlat2.z) + u_xlat27;
    u_xlat27 = u_xlat27 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat27<0.0);
#else
    u_xlatb27 = u_xlat27<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat19.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_27 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_3.x = u_xlat10_27 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat19.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xyz = texture(_Normal, u_xlat19.xy).xyz;
    u_xlat16_12.xyz = u_xlat10_4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_19.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_32 = u_xlat10_27 * u_xlat16_5.x;
    u_xlat16_3.x = u_xlat10_19.x * u_xlat16_3.x + (-u_xlat16_32);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb27 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb27) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat27 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat27 = inversesqrt(u_xlat27);
    u_xlat2.xyz = vec3(u_xlat27) * u_xlat2.xyz;
    u_xlat4.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_27 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_6.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_6.xyz, u_xlat2.xyz);
    u_xlat10 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat10 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat10 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat19.x = u_xlat10 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat10;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat19.x<0.0);
#else
    u_xlatb10 = u_xlat19.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_5.x = u_xlat16_3.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_3.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb10 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb10 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb10) * int(0xffffffffu))!=0){discard;}
    u_xlat16_3.x = ceil(u_xlat16_5.y);
    u_xlat16_3.x = u_xlat16_3.x * 3.0;
    u_xlat10 = u_xlat16_3.x * _Time.y;
    u_xlat16_3.x = sin(u_xlat10);
    u_xlat16_3.x = u_xlat16_3.x + 1.0;
    u_xlat16_3.x = u_xlat16_5.y * u_xlat16_3.x;
    u_xlat16_5.x = u_xlat16_3.x * 0.600000024;
    u_xlat16_3.x = (-u_xlat16_3.x) * 0.600000024 + 4.0;
    u_xlat16_14 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_14 = min(u_xlat16_14, 1.0);
    u_xlat16_3.x = u_xlat16_14 * u_xlat16_3.x + u_xlat16_5.x;
    u_xlat16_5.z = u_xlat16_5.z * (-u_xlat16_3.x) + u_xlat16_3.x;
    u_xlat16_5.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_5.z * _EmissionColor.x, u_xlat16_5.z * _EmissionColor.y, u_xlat16_5.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_5.xyz * u_xlat16_7.xyz;
    u_xlat16_5.xyz = u_xlat10_19.yyy * u_xlat16_5.xyz;
    u_xlat16_12.xy = u_xlat16_12.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_3.x = dot(u_xlat16_12.xyz, u_xlat16_12.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz;
    u_xlat16_7.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_7.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_7.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_7.xyz);
    u_xlat16_8.xyz = u_xlat16_3.yyy * u_xlat16_7.xyz;
    u_xlat16_10.xyz = u_xlat16_6.zxy * u_xlat16_7.yzx;
    u_xlat16_10.xyz = u_xlat16_6.yzx * u_xlat16_7.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyw = u_xlat16_3.xxx * u_xlat16_10.xyz + u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_3.zzz * u_xlat16_6.xyz + u_xlat16_3.xyw;
    u_xlat16_3.xyz = (-u_xlat16_6.xyz) + u_xlat16_3.xyz;
    u_xlat16_30 = min(u_xlat1.x, 1.0);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz + u_xlat16_6.xyz;
    u_xlat16_30 = dot(u_xlat16_3.xyz, u_xlat16_3.xyz);
    u_xlat16_30 = inversesqrt(u_xlat16_30);
    u_xlat16_3.xyz = vec3(u_xlat16_30) * u_xlat16_3.xyz;
    u_xlat10 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat10);
    u_xlat16_3.x = dot(u_xlat16_3.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_3.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_27) * u_xlat16_0.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_12.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_12.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_3.xyz = u_xlat16_0.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
vec3 u_xlat1;
vec4 u_xlat2;
bvec3 u_xlatb2;
vec3 u_xlat3;
uvec4 u_xlatu3;
mediump vec4 u_xlat16_4;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat11;
mediump vec3 u_xlat16_11;
bool u_xlatb11;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat21;
lowp vec2 u_xlat10_21;
float u_xlat30;
lowp float u_xlat10_30;
int u_xlati30;
bool u_xlatb30;
bool u_xlatb33;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati30 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati30 = u_xlati30 << 3;
    u_xlat2 = u_xlat0.yyyy * DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati30 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat3.xyz = (-u_xlat0.xyz) + unity_Builtins0Array[u_xlati30 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_4.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat21.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat0.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat30 = (-u_xlat2.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat2.w = (u_xlatb33) ? u_xlat30 : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat2.xy).z;
    u_xlat16_4.x = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat2.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_21.xy = texture(_PatternMask, u_xlat2.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_30 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_21.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb30 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat3.xyz;
    u_xlat3.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat10_30 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat1.xy = floor(u_xlat3.xy);
    u_xlatu3.xy = uvec2(ivec2(u_xlat1.xy));
    u_xlatu3.z = uint(uint(0u));
    u_xlatu3.w = uint(uint(0u));
    u_xlat1.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu3.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat1.x = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat11 = float(1.0) / _AngleLimit;
    u_xlat1.x = u_xlat11 * u_xlat1.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
    u_xlat11 = u_xlat1.x * -2.0 + 3.0;
    u_xlat1.x = u_xlat1.x * u_xlat1.x;
    u_xlat21.x = u_xlat11 * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat11;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat21.x<0.0);
#else
    u_xlatb11 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat1.x + -0.00100000005;
    u_xlat1.x = u_xlat1.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb11 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb11) * int(0xffffffffu))!=0){discard;}
    u_xlat16_4.x = ceil(u_xlat16_6.y);
    u_xlat16_4.x = u_xlat16_4.x * 3.0;
    u_xlat11 = u_xlat16_4.x * _Time.y;
    u_xlat16_4.x = sin(u_xlat11);
    u_xlat16_4.x = u_xlat16_4.x + 1.0;
    u_xlat16_4.x = u_xlat16_6.y * u_xlat16_4.x;
    u_xlat16_6.x = u_xlat16_4.x * 0.600000024;
    u_xlat16_4.x = (-u_xlat16_4.x) * 0.600000024 + 4.0;
    u_xlat16_16 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_16 = min(u_xlat16_16, 1.0);
    u_xlat16_4.x = u_xlat16_16 * u_xlat16_4.x + u_xlat16_6.x;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_4.x) + u_xlat16_4.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat10_21.yyy * u_xlat16_6.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_11.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_11.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_11.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_11.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat1.x, 1.0);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz;
    u_xlat11 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat11);
    u_xlat16_4.x = dot(u_xlat16_4.xyz, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = u_xlat16_4.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_30) * u_xlat16_0.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat1.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat1.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump vec3 u_xlat16_10;
mediump vec3 u_xlat16_14;
mediump vec3 u_xlat16_16;
vec2 u_xlat20;
mediump float u_xlat16_20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
bool u_xlatb32;
mediump float u_xlat16_34;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb32 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb32 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb32) ? u_xlat31 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat20.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat20.x = inversesqrt(u_xlat20.x);
    u_xlat3.xyz = u_xlat20.xxx * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat20.x = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat31 = float(1.0) / _AngleLimit;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_4.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_4.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_4.xyw = u_xlat16_4.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_4.xyz = u_xlat16_4.zzz * u_xlat16_7.xyz + u_xlat16_4.xyw;
    u_xlat16_4.xyz = (-u_xlat16_7.xyz) + u_xlat16_4.xyz;
    u_xlat16_34 = min(u_xlat20.x, 1.0);
    u_xlat16_6.x = u_xlat20.x * _mhyRainNoiseParam1.x;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat16_34 = dot(u_xlat16_4.xyz, u_xlat16_4.xyz);
    u_xlat16_34 = inversesqrt(u_xlat16_34);
    u_xlat16_20 = u_xlat16_4.y * u_xlat16_34 + -0.800000012;
    u_xlat16_20 = u_xlat16_20 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_20 = min(max(u_xlat16_20, 0.0), 1.0);
#else
    u_xlat16_20 = clamp(u_xlat16_20, 0.0, 1.0);
#endif
    u_xlat16_20 = u_xlat16_20 * 0.949999988 + 0.0500000007;
    u_xlat16_31 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_20 = u_xlat16_20 * u_xlat16_31 + 0.0500000007;
    u_xlat31 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat31);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_20) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_4.xyz * vec3(u_xlat16_34) + u_xlat3.xyz;
    u_xlat10.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat3.xyz = u_xlat10.xxx * u_xlat3.xyz;
    u_xlat10.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10.x = u_xlat10.x + u_xlat10.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat10.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_14.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_14.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_7.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_4.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat10.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
    u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
    u_xlat16_34 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_34 = u_xlat10.x * u_xlat16_34 + 0.0299999993;
    u_xlat16_4.xyz = vec3(u_xlat16_34) * u_xlat16_7.xyz + u_xlat16_4.xyz;
    u_xlat16_34 = ceil(u_xlat16_6.y);
    u_xlat16_34 = u_xlat16_34 * 3.0;
    u_xlat10.x = u_xlat16_34 * _Time.y;
    u_xlat16_34 = sin(u_xlat10.x);
    u_xlat16_34 = u_xlat16_34 + 1.0;
    u_xlat16_34 = u_xlat16_6.y * u_xlat16_34;
    u_xlat16_16.x = u_xlat16_34 * 0.600000024;
    u_xlat16_34 = (-u_xlat16_34) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_34 = u_xlat16_36 * u_xlat16_34 + u_xlat16_16.x;
    u_xlat16_7.z = u_xlat16_6.z * (-u_xlat16_34) + u_xlat16_34;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_16.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_16.xyz = u_xlat16_7.xyz * u_xlat16_16.xyz;
    u_xlat16_16.xyz = u_xlat10_20.yyy * u_xlat16_16.xyz;
    u_xlat10.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10.x = inversesqrt(u_xlat10.x);
    u_xlat10.xyz = u_xlat10.xxx * u_xlat2.xyz;
    u_xlat16_34 = dot(u_xlat3.xyz, u_xlat10.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_10.xyz = vec3(u_xlat16_34) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_10.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_16.xyz;
    SV_Target0.xyz = u_xlat16_6.xxx * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_6.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_16;
mediump vec3 u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
bool u_xlatb35;
mediump float u_xlat16_38;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = (-u_xlat3.y) + 1.0;
#ifdef UNITY_ADRENO_ES3
    u_xlatb35 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb35 = _ProjectionParams.x<0.0;
#endif
    u_xlat3.w = (u_xlatb35) ? u_xlat34 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_5.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_5.x = inversesqrt(u_xlat16_5.x);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_5.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_5.xyw = u_xlat16_5.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_5.xyz = u_xlat16_5.zzz * u_xlat16_8.xyz + u_xlat16_5.xyw;
    u_xlat16_5.xyz = (-u_xlat16_8.xyz) + u_xlat16_5.xyz;
    u_xlat16_38 = min(u_xlat22.x, 1.0);
    u_xlat16_7.x = u_xlat22.x * _mhyRainNoiseParam1.x;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_5.xyz + u_xlat16_8.xyz;
    u_xlat16_38 = dot(u_xlat16_5.xyz, u_xlat16_5.xyz);
    u_xlat16_38 = inversesqrt(u_xlat16_38);
    u_xlat16_22 = u_xlat16_5.y * u_xlat16_38 + -0.800000012;
    u_xlat16_22 = u_xlat16_22 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_22 = min(max(u_xlat16_22, 0.0), 1.0);
#else
    u_xlat16_22 = clamp(u_xlat16_22, 0.0, 1.0);
#endif
    u_xlat16_22 = u_xlat16_22 * 0.949999988 + 0.0500000007;
    u_xlat16_34 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_22 = u_xlat16_22 * u_xlat16_34 + 0.0500000007;
    u_xlat34 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat34);
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_22) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_5.xyz * vec3(u_xlat16_38) + u_xlat3.xyz;
    u_xlat11.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat3.xyz = u_xlat11.xxx * u_xlat3.xyz;
    u_xlat11.x = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11.x = u_xlat11.x + u_xlat11.x;
    u_xlat1.xyz = u_xlat3.xyz * (-u_xlat11.xxx) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_5.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_16.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_5.xyz = u_xlat16_5.xxx * u_xlat16_16.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_5.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_1.xyz;
    u_xlat16_5.xyz = u_xlat16_5.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat11.x = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11.x = min(max(u_xlat11.x, 0.0), 1.0);
#else
    u_xlat11.x = clamp(u_xlat11.x, 0.0, 1.0);
#endif
    u_xlat16_38 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_38 = u_xlat11.x * u_xlat16_38 + 0.0299999993;
    u_xlat16_5.xyz = vec3(u_xlat16_38) * u_xlat16_8.xyz + u_xlat16_5.xyz;
    u_xlat16_38 = ceil(u_xlat16_7.y);
    u_xlat16_38 = u_xlat16_38 * 3.0;
    u_xlat11.x = u_xlat16_38 * _Time.y;
    u_xlat16_38 = sin(u_xlat11.x);
    u_xlat16_38 = u_xlat16_38 + 1.0;
    u_xlat16_38 = u_xlat16_7.y * u_xlat16_38;
    u_xlat16_18.x = u_xlat16_38 * 0.600000024;
    u_xlat16_38 = (-u_xlat16_38) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_38 = u_xlat16_40 * u_xlat16_38 + u_xlat16_18.x;
    u_xlat16_8.z = u_xlat16_7.z * (-u_xlat16_38) + u_xlat16_38;
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_18.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_18.xyz = u_xlat16_8.xyz * u_xlat16_18.xyz;
    u_xlat16_18.xyz = u_xlat10_22.yyy * u_xlat16_18.xyz;
    u_xlat11.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11.x = inversesqrt(u_xlat11.x);
    u_xlat11.xyz = u_xlat11.xxx * u_xlat2.xyz;
    u_xlat16_38 = dot(u_xlat3.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_38 = min(max(u_xlat16_38, 0.0), 1.0);
#else
    u_xlat16_38 = clamp(u_xlat16_38, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_38) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_11.xyz;
    u_xlat16_5.xyz = u_xlat16_0.xyz * u_xlat16_5.xyz + u_xlat16_18.xyz;
    SV_Target0.xyz = u_xlat16_7.xxx * u_xlat16_5.xyz;
    SV_Target0.w = u_xlat16_7.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
mediump vec4 u_xlat16_4;
vec3 u_xlat5;
lowp vec3 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
mediump vec3 u_xlat16_14;
mediump float u_xlat16_16;
vec2 u_xlat20;
lowp vec2 u_xlat10_20;
bool u_xlatb20;
mediump float u_xlat16_24;
float u_xlat30;
float u_xlat31;
mediump float u_xlat16_31;
lowp float u_xlat10_31;
bool u_xlatb31;
float u_xlat32;
mediump float u_xlat16_32;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat20.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat20.x = _ZBufferParams.x * u_xlat20.x + _ZBufferParams.y;
    u_xlat20.x = float(1.0) / u_xlat20.x;
    u_xlat30 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat30) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat20.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat20.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb31 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb31 = u_xlatb3.z || u_xlatb31;
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb31 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat32 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb31) ? u_xlat32 : u_xlat3.y;
    u_xlat10_31 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat31 = u_xlat10_31 + _DeferredProj_OcclusionParams.w;
    u_xlat31 = (-u_xlat3.z) + u_xlat31;
    u_xlat31 = u_xlat31 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat31<0.0);
#else
    u_xlatb31 = u_xlat31<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat20.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_31 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_4.x = u_xlat10_31 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat20.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xyz = texture(_Normal, u_xlat20.xy).xyz;
    u_xlat16_14.xyz = u_xlat10_5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_20.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_36 = u_xlat10_31 * u_xlat16_6.x;
    u_xlat16_4.x = u_xlat10_20.x * u_xlat16_4.x + (-u_xlat16_36);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb20 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb20 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb20) * int(0xffffffffu))!=0){discard;}
    u_xlat20.x = float(1.0) / _AngleLimit;
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat31 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat3.xyz = vec3(u_xlat31) * u_xlat3.xyz;
    u_xlat5.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat5.xy = floor(u_xlat5.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat5.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat31 = dot(u_xlat16_7.xyz, u_xlat3.xyz);
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat20.x = min(max(u_xlat20.x, 0.0), 1.0);
#else
    u_xlat20.x = clamp(u_xlat20.x, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat20.x * -2.0 + 3.0;
    u_xlat20.x = u_xlat20.x * u_xlat20.x;
    u_xlat32 = u_xlat31 * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat32<0.0);
#else
    u_xlatb31 = u_xlat32<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat16_6.x = u_xlat16_4.x * u_xlat20.x + -0.00100000005;
    u_xlat20.x = u_xlat20.x * u_xlat16_4.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb31 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb31 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb31) * int(0xffffffffu))!=0){discard;}
    u_xlat31 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat31 = inversesqrt(u_xlat31);
    u_xlat1.xyz = vec3(u_xlat31) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat31 = u_xlat3.z * -14.4269505;
    u_xlat32 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat31 = exp2(u_xlat31);
    u_xlat31 = u_xlat32 * u_xlat31;
#ifdef UNITY_ADRENO_ES3
    u_xlat31 = min(max(u_xlat31, 0.0), 1.0);
#else
    u_xlat31 = clamp(u_xlat31, 0.0, 1.0);
#endif
    u_xlat31 = u_xlat31 + -0.800000012;
    u_xlat31 = u_xlat31 * 5.0;
    u_xlat31 = max(u_xlat31, 0.0);
    u_xlat16_4.x = u_xlat31 * u_xlat31;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_31 = u_xlat16_4.x * u_xlat16_4.x + -0.0500000007;
    u_xlat16_4.x = u_xlat16_4.x * u_xlat16_4.x;
    u_xlat16_14.xy = u_xlat16_14.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_14.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx;
    u_xlat16_8.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_8.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_8.xyz);
    u_xlat16_9.xyz = u_xlat16_14.yyy * u_xlat16_8.xyz;
    u_xlat16_3.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_3.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_3.xyz);
    u_xlat16_8.xyz = u_xlat16_14.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_14.xyz = u_xlat16_14.zzz * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_14.xyz = (-u_xlat16_7.xyz) + u_xlat16_14.xyz;
    u_xlat16_6.x = min(u_xlat20.x, 1.0);
    u_xlat16_14.xyz = u_xlat16_6.xxx * u_xlat16_14.xyz + u_xlat16_7.xyz;
    u_xlat16_6.x = dot(u_xlat16_14.xyz, u_xlat16_14.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_32 = u_xlat16_14.y * u_xlat16_6.x + -0.800000012;
    u_xlat16_32 = u_xlat16_32 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_32 = min(max(u_xlat16_32, 0.0), 1.0);
#else
    u_xlat16_32 = clamp(u_xlat16_32, 0.0, 1.0);
#endif
    u_xlat16_31 = u_xlat16_32 * u_xlat16_31 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_31 = u_xlat16_31 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_32 = u_xlat16_4.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_7.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_31) * u_xlat16_7.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_14.xyz * u_xlat16_6.xxx + u_xlat3.xyz;
    u_xlat10 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat3.xyz = vec3(u_xlat10) * u_xlat3.xyz;
    u_xlat10 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat10 = u_xlat10 + u_xlat10;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat10)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_14.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_14.x = u_xlat16_4.x * u_xlat16_14.x + 1.0;
    u_xlat16_4.x = u_xlat16_4.x * 0.0299999993;
    u_xlat16_24 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_24 = min(max(u_xlat16_24, 0.0), 1.0);
#else
    u_xlat16_24 = clamp(u_xlat16_24, 0.0, 1.0);
#endif
    u_xlat16_7.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_7.xyz = vec3(u_xlat16_24) * u_xlat16_7.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_8.xyz = (-u_xlat16_7.xyz) * u_xlat16_14.xxx + u_xlat10_1.xyz;
    u_xlat16_7.xyz = u_xlat16_14.xxx * u_xlat16_7.xyz;
    u_xlat16_14.x = u_xlat20.x * u_xlat16_14.x;
    u_xlat16_24 = u_xlat16_32 * 0.400000006 + (-u_xlat16_4.x);
    u_xlat10 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat10 = min(max(u_xlat10, 0.0), 1.0);
#else
    u_xlat10 = clamp(u_xlat10, 0.0, 1.0);
#endif
    u_xlat16_4.x = u_xlat10 * u_xlat16_24 + u_xlat16_4.x;
    u_xlat16_4.xzw = u_xlat16_4.xxx * u_xlat16_8.xyz + u_xlat16_7.xyz;
    u_xlat10 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat10 = inversesqrt(u_xlat10);
    u_xlat1.xyz = vec3(u_xlat10) * u_xlat2.xyz;
    u_xlat16_6.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_6.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_6.x = ceil(u_xlat16_6.y);
    u_xlat16_6.x = u_xlat16_6.x * 3.0;
    u_xlat1.x = u_xlat16_6.x * _Time.y;
    u_xlat16_6.x = sin(u_xlat1.x);
    u_xlat16_6.x = u_xlat16_6.x + 1.0;
    u_xlat16_6.x = u_xlat16_6.y * u_xlat16_6.x;
    u_xlat16_16 = u_xlat16_6.x * 0.600000024;
    u_xlat16_6.x = (-u_xlat16_6.x) * 0.600000024 + 4.0;
    u_xlat16_36 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_6.x = u_xlat16_36 * u_xlat16_6.x + u_xlat16_16;
    u_xlat16_6.z = u_xlat16_6.z * (-u_xlat16_6.x) + u_xlat16_6.x;
    u_xlat16_6.xy = _EmissionColor.zz;
    u_xlat16_7.xyz = vec3(u_xlat16_6.z * _EmissionColor.x, u_xlat16_6.z * _EmissionColor.y, u_xlat16_6.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_6.xyz * u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat10_20.yyy * u_xlat16_6.xyz;
    u_xlat16_4.xzw = u_xlat16_0.xyz * u_xlat16_4.xzw + u_xlat16_6.xyz;
    SV_Target0.xyz = u_xlat16_14.xxx * u_xlat16_4.xzw;
    SV_Target0.w = u_xlat16_14.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec2 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec2 u_xlat10_3;
bvec3 u_xlatb3;
vec3 u_xlat4;
uvec4 u_xlatu4;
mediump vec4 u_xlat16_5;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
float u_xlat11;
mediump vec3 u_xlat16_16;
mediump float u_xlat16_18;
vec2 u_xlat22;
lowp vec2 u_xlat10_22;
int u_xlati22;
bool u_xlatb22;
mediump float u_xlat16_27;
float u_xlat33;
float u_xlat34;
mediump float u_xlat16_34;
lowp float u_xlat10_34;
bool u_xlatb34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat22.x = texture(_CameraDepthTexture, u_xlat0.xy).x;
    u_xlat22.x = _ZBufferParams.x * u_xlat22.x + _ZBufferParams.y;
    u_xlat22.x = float(1.0) / u_xlat22.x;
    u_xlat33 = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat1.xyz = vec3(u_xlat33) * vs_TEXCOORD2.xyz;
    u_xlat2.xyz = u_xlat22.xxx * u_xlat1.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati22 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlati22 = u_xlati22 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati22 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat4.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati22 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat16_5.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_5.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlat22.xy = u_xlat16_5.xy + vec2(0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb34 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb34 = u_xlatb3.z || u_xlatb34;
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb34 = _ProjectionParams.x<0.0;
#endif
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat35 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb34) ? u_xlat35 : u_xlat3.y;
    u_xlat10_34 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat34 = u_xlat10_34 + _DeferredProj_OcclusionParams.w;
    u_xlat34 = (-u_xlat3.z) + u_xlat34;
    u_xlat34 = u_xlat34 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat34<0.0);
#else
    u_xlatb34 = u_xlat34<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat3.xy = u_xlat22.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_34 = texture(_PatternMask, u_xlat3.xy).z;
    u_xlat16_5.x = u_xlat10_34 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat3.xy = u_xlat22.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_6.xyz = texture(_Normal, u_xlat22.xy).xyz;
    u_xlat16_16.xyz = u_xlat10_6.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_22.xy = texture(_PatternMask, u_xlat3.xy).xy;
    u_xlat16_7.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.xyz = min(max(u_xlat16_7.xyz, 0.0), 1.0);
#else
    u_xlat16_7.xyz = clamp(u_xlat16_7.xyz, 0.0, 1.0);
#endif
    u_xlat16_7.x = u_xlat16_7.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_40 = u_xlat10_34 * u_xlat16_7.x;
    u_xlat16_5.x = u_xlat10_22.x * u_xlat16_5.x + (-u_xlat16_40);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_7.x = (-u_xlat16_7.x) + u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb22 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb22 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb22) * int(0xffffffffu))!=0){discard;}
    u_xlat22.x = dot(u_xlat4.xyz, u_xlat4.xyz);
    u_xlat22.x = inversesqrt(u_xlat22.x);
    u_xlat3.xyz = u_xlat22.xxx * u_xlat4.xyz;
    u_xlat4.xy = u_xlat0.xy * _ScreenParams.xy;
    u_xlat4.xy = floor(u_xlat4.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat4.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat22.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat34 = float(1.0) / _AngleLimit;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
    u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat22.x * -2.0 + 3.0;
    u_xlat22.x = u_xlat22.x * u_xlat22.x;
    u_xlat35 = u_xlat34 * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat35<0.0);
#else
    u_xlatb34 = u_xlat35<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.x = u_xlat16_5.x * u_xlat22.x + -0.00100000005;
    u_xlat22.x = u_xlat22.x * u_xlat16_5.x;
#ifdef UNITY_ADRENO_ES3
    u_xlatb34 = !!(u_xlat16_7.x<0.0);
#else
    u_xlatb34 = u_xlat16_7.x<0.0;
#endif
    if((int(u_xlatb34) * int(0xffffffffu))!=0){discard;}
    u_xlat34 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat34 = inversesqrt(u_xlat34);
    u_xlat1.xyz = vec3(u_xlat34) * u_xlat1.xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat2.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = u_xlat3.z * -14.4269505;
    u_xlat35 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat34 = exp2(u_xlat34);
    u_xlat34 = u_xlat35 * u_xlat34;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_5.x = u_xlat34 * u_xlat34;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_34 = u_xlat16_5.x * u_xlat16_5.x + -0.0500000007;
    u_xlat16_5.x = u_xlat16_5.x * u_xlat16_5.x;
    u_xlat16_16.xy = u_xlat16_16.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_16.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx;
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_10.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_10.xyz = u_xlat16_16.yyy * u_xlat16_9.xyz;
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_16.xxx * u_xlat16_3.xyz + u_xlat16_10.xyz;
    u_xlat16_16.xyz = u_xlat16_16.zzz * u_xlat16_8.xyz + u_xlat16_9.xyz;
    u_xlat16_16.xyz = (-u_xlat16_8.xyz) + u_xlat16_16.xyz;
    u_xlat16_7.x = min(u_xlat22.x, 1.0);
    u_xlat16_16.xyz = u_xlat16_7.xxx * u_xlat16_16.xyz + u_xlat16_8.xyz;
    u_xlat16_7.x = dot(u_xlat16_16.xyz, u_xlat16_16.xyz);
    u_xlat16_7.x = inversesqrt(u_xlat16_7.x);
    u_xlat16_35 = u_xlat16_16.y * u_xlat16_7.x + -0.800000012;
    u_xlat16_35 = u_xlat16_35 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_35 = min(max(u_xlat16_35, 0.0), 1.0);
#else
    u_xlat16_35 = clamp(u_xlat16_35, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_35 * u_xlat16_34 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat16_35 = u_xlat16_5.x * u_xlat16_3.y + 0.0500000007;
    u_xlat3.x = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat3.xy = u_xlat0.xy * _mhyRainNoiseParam0.xx + u_xlat3.xx;
    u_xlat10_0 = texture(_ShadowMapTexture, u_xlat0.xy).x;
    u_xlat10_3.xy = texture(_mhyRainNoiseNormal, u_xlat3.xy).xy;
    u_xlat16_8.xy = u_xlat10_3.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat3.xyz = u_xlat16_16.xyz * u_xlat16_7.xxx + u_xlat3.xyz;
    u_xlat11 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat3.xyz = vec3(u_xlat11) * u_xlat3.xyz;
    u_xlat11 = dot((-u_xlat1.xyz), u_xlat3.xyz);
    u_xlat11 = u_xlat11 + u_xlat11;
    u_xlat1.xyz = u_xlat3.xyz * (-vec3(u_xlat11)) + (-u_xlat1.xyz);
    u_xlat10_1.xyz = texture(_mhyRainRefCube, u_xlat1.xyz).xyz;
    u_xlat16_16.x = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_16.x = u_xlat16_5.x * u_xlat16_16.x + 1.0;
    u_xlat16_5.x = u_xlat16_5.x * 0.0299999993;
    u_xlat16_27 = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_27 = min(max(u_xlat16_27, 0.0), 1.0);
#else
    u_xlat16_27 = clamp(u_xlat16_27, 0.0, 1.0);
#endif
    u_xlat16_8.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_8.xyz = vec3(u_xlat16_27) * u_xlat16_8.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat16_9.xyz = (-u_xlat16_8.xyz) * u_xlat16_16.xxx + u_xlat10_1.xyz;
    u_xlat16_8.xyz = u_xlat16_16.xxx * u_xlat16_8.xyz;
    u_xlat16_16.x = u_xlat22.x * u_xlat16_16.x;
    u_xlat16_27 = u_xlat16_35 * 0.400000006 + (-u_xlat16_5.x);
    u_xlat11 = u_xlat3.y;
#ifdef UNITY_ADRENO_ES3
    u_xlat11 = min(max(u_xlat11, 0.0), 1.0);
#else
    u_xlat11 = clamp(u_xlat11, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat11 * u_xlat16_27 + u_xlat16_5.x;
    u_xlat16_5.xzw = u_xlat16_5.xxx * u_xlat16_9.xyz + u_xlat16_8.xyz;
    u_xlat11 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat11 = inversesqrt(u_xlat11);
    u_xlat1.xyz = vec3(u_xlat11) * u_xlat2.xyz;
    u_xlat16_7.x = dot(u_xlat3.xyz, u_xlat1.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_7.x = min(max(u_xlat16_7.x, 0.0), 1.0);
#else
    u_xlat16_7.x = clamp(u_xlat16_7.x, 0.0, 1.0);
#endif
    u_xlat16_1.xyz = u_xlat16_7.xxx * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_0) * u_xlat16_1.xyz;
    u_xlat16_7.x = ceil(u_xlat16_7.y);
    u_xlat16_7.x = u_xlat16_7.x * 3.0;
    u_xlat1.x = u_xlat16_7.x * _Time.y;
    u_xlat16_7.x = sin(u_xlat1.x);
    u_xlat16_7.x = u_xlat16_7.x + 1.0;
    u_xlat16_7.x = u_xlat16_7.y * u_xlat16_7.x;
    u_xlat16_18 = u_xlat16_7.x * 0.600000024;
    u_xlat16_7.x = (-u_xlat16_7.x) * 0.600000024 + 4.0;
    u_xlat16_40 = u_xlat16_7.z + u_xlat16_7.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_7.x = u_xlat16_40 * u_xlat16_7.x + u_xlat16_18;
    u_xlat16_7.z = u_xlat16_7.z * (-u_xlat16_7.x) + u_xlat16_7.x;
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_8.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_7.xyz = u_xlat16_7.xyz * u_xlat16_8.xyz;
    u_xlat16_7.xyz = u_xlat10_22.yyy * u_xlat16_7.xyz;
    u_xlat16_5.xzw = u_xlat16_0.xyz * u_xlat16_5.xzw + u_xlat16_7.xyz;
    SV_Target0.xyz = u_xlat16_16.xxx * u_xlat16_5.xzw;
    SV_Target0.w = u_xlat16_16.x;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec4 u_xlat0;
mediump float u_xlat16_0;
lowp float u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
float u_xlat10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
mediump float u_xlat16_20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
lowp float u_xlat10_30;
bool u_xlatb30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat30 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat30 = _ZBufferParams.x * u_xlat30 + _ZBufferParams.y;
    u_xlat30 = float(1.0) / u_xlat30;
    u_xlat0.xyz = vec3(u_xlat30) * u_xlat0.xyz;
    u_xlat2.xyz = u_xlat0.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat0.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat0.xxx + u_xlat2.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat0.zzz + u_xlat0.xyw;
    u_xlat0.xyz = u_xlat0.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb30 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb30 = u_xlatb2.z || u_xlatb30;
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat0.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat0.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat0.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb30 = _ProjectionParams.x<0.0;
#endif
    u_xlat21.x = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb30) ? u_xlat21.x : u_xlat2.y;
    u_xlat10_30 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat30 = u_xlat10_30 + _DeferredProj_OcclusionParams.w;
    u_xlat30 = (-u_xlat2.z) + u_xlat30;
    u_xlat30 = u_xlat30 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat0.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat30 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat30 = inversesqrt(u_xlat30);
    u_xlat2.xyz = vec3(u_xlat30) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_30 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_30 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_30 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat30 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat30);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb30 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat30 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat30 = u_xlat30 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat30 = min(max(u_xlat30, 0.0), 1.0);
#else
    u_xlat30 = clamp(u_xlat30, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat30 * -2.0 + 3.0;
    u_xlat30 = u_xlat30 * u_xlat30;
    u_xlat31 = u_xlat30 * u_xlat21.x;
    u_xlat30 = u_xlat21.x * u_xlat30 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(u_xlat30<0.0);
#else
    u_xlatb30 = u_xlat30<0.0;
#endif
    if((int(u_xlatb30) * int(0xffffffffu))!=0){discard;}
    u_xlat30 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat30, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat0.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat0.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat10 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat10 = sqrt(u_xlat10);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat10);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat10;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat0.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat0.xz = u_xlat0.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_0 = textureLod(_ElementViewSceneWaveTex, u_xlat0.xz, 0.0).x;
        u_xlat16_0 = u_xlat10_0 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat10 * _ElementViewParamsHalf2.z + u_xlat16_0;
        u_xlat0.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat0.x = fract(u_xlat0.x);
        u_xlat0.x = u_xlat0.x + -0.5;
        u_xlat16_20 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat0.x = u_xlat16_20 * abs(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat20 = u_xlat0.x * -2.0 + 3.0;
        u_xlat0.x = u_xlat0.x * u_xlat0.x;
        u_xlat0.x = (-u_xlat20) * u_xlat0.x + 1.0;
        u_xlat20 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.w;
        u_xlat20 = fract(u_xlat20);
        u_xlat20 = u_xlat20 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat20) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat0.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat0.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat0.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat0.x + u_xlat10;
        u_xlat10 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat10;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat30) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat30;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
float u_xlat0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp float u_xlat10_1;
bool u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
bvec3 u_xlatb2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
lowp vec4 u_xlat10_4;
uvec4 u_xlatu4;
mediump vec3 u_xlat16_5;
mediump vec4 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
vec3 u_xlat10;
mediump float u_xlat16_10;
lowp float u_xlat10_10;
vec3 u_xlat11;
mediump vec3 u_xlat16_11;
mediump vec3 u_xlat16_13;
mediump float u_xlat16_15;
mediump vec3 u_xlat16_16;
float u_xlat20;
vec2 u_xlat21;
lowp float u_xlat10_21;
bool u_xlatb21;
vec2 u_xlat24;
float u_xlat30;
mediump float u_xlat16_30;
float u_xlat31;
mediump float u_xlat16_33;
mediump float u_xlat16_35;
mediump float u_xlat16_36;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat10.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat10.xyz = u_xlat10.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat21.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat21.x = _ZBufferParams.x * u_xlat21.x + _ZBufferParams.y;
    u_xlat21.x = float(1.0) / u_xlat21.x;
    u_xlat10.xyz = u_xlat10.xyz * u_xlat21.xxx;
    u_xlat2.xyz = u_xlat10.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat10.xxx + u_xlat2.xyz;
    u_xlat10.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat10.zzz + u_xlat2.xyz;
    u_xlat10.xyz = u_xlat10.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat2 = u_xlat10.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_3.xyz = u_xlat2.xyz / u_xlat2.www;
    u_xlat2.xyz = -abs(u_xlat16_3.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb2.xyz = lessThan(u_xlat2.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb21 = u_xlatb2.y || u_xlatb2.x;
    u_xlatb21 = u_xlatb2.z || u_xlatb21;
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat2 = u_xlat10.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat10.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat10.zzzz + u_xlat2;
    u_xlat2 = u_xlat2 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat2.xyz = u_xlat2.xyz / u_xlat2.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb21 = _ProjectionParams.x<0.0;
#endif
    u_xlat31 = (-u_xlat2.y) + 1.0;
    u_xlat2.w = (u_xlatb21) ? u_xlat31 : u_xlat2.y;
    u_xlat10_21 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat2.xw).x;
    u_xlat21.x = u_xlat10_21 + _DeferredProj_OcclusionParams.w;
    u_xlat21.x = (-u_xlat2.z) + u_xlat21.x;
    u_xlat21.x = u_xlat21.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat21.x<0.0);
#else
    u_xlatb21 = u_xlat21.x<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat21.xy = u_xlat16_3.xy + vec2(0.5, 0.5);
    u_xlat2.xyz = (-u_xlat10.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0 = inversesqrt(u_xlat0);
    u_xlat2.xyz = vec3(u_xlat0) * u_xlat2.xyz;
    u_xlat16_3.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_3.x = min(max(u_xlat16_3.x, 0.0), 1.0);
#else
    u_xlat16_3.x = clamp(u_xlat16_3.x, 0.0, 1.0);
#endif
    u_xlat16_13.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_3.xyz = u_xlat16_3.xxx * u_xlat16_13.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat4.xy = u_xlat21.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_4.xy = texture(_PatternMask, u_xlat4.xy).xy;
    u_xlat24.xy = u_xlat21.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat24.xy).z;
    u_xlat16_33 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_5.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.xyz = min(max(u_xlat16_5.xyz, 0.0), 1.0);
#else
    u_xlat16_5.xyz = clamp(u_xlat16_5.xyz, 0.0, 1.0);
#endif
    u_xlat16_5.x = u_xlat16_5.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_5.x = min(max(u_xlat16_5.x, 0.0), 1.0);
#else
    u_xlat16_5.x = clamp(u_xlat16_5.x, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat10_0 * u_xlat16_5.x;
    u_xlat16_33 = u_xlat10_4.x * u_xlat16_33 + (-u_xlat16_35);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat10_4.xzw = texture(_Normal, u_xlat21.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_4.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_35 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_35 = inversesqrt(u_xlat16_35);
    u_xlat16_6.xyz = vec3(u_xlat16_35) * u_xlat16_6.xyz;
    u_xlat16_35 = ceil(u_xlat16_5.y);
    u_xlat16_35 = u_xlat16_35 * 3.0;
    u_xlat0 = u_xlat16_35 * _Time.y;
    u_xlat16_35 = sin(u_xlat0);
    u_xlat16_35 = u_xlat16_35 + 1.0;
    u_xlat16_15 = u_xlat16_5.y * u_xlat16_35;
    u_xlat16_35 = u_xlat16_15 * 0.600000024;
    u_xlat16_36 = u_xlat16_5.z + u_xlat16_5.z;
    u_xlat16_36 = min(u_xlat16_36, 1.0);
    u_xlat16_15 = (-u_xlat16_15) * 0.600000024 + 4.0;
    u_xlat16_15 = u_xlat16_36 * u_xlat16_15 + u_xlat16_35;
    u_xlat16_7.z = u_xlat16_5.z * (-u_xlat16_15) + u_xlat16_15;
    u_xlat16_5.x = (-u_xlat16_5.x) + u_xlat16_33;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_5.x<0.0);
#else
    u_xlatb0 = u_xlat16_5.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_7.xy = _EmissionColor.zz;
    u_xlat16_5.xyz = vec3(u_xlat16_7.z * _EmissionColor.x, u_xlat16_7.z * _EmissionColor.y, u_xlat16_7.y * _EmissionColor.z);
    u_xlat16_5.xyz = u_xlat16_7.xyz * u_xlat16_5.xyz;
    u_xlat16_5.xyz = u_xlat10_4.yyy * u_xlat16_5.xyz;
    u_xlat21.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat21.xy = floor(u_xlat21.xy);
    u_xlatu4.xy = uvec2(ivec2(u_xlat21.xy));
    u_xlatu4.z = uint(uint(0u));
    u_xlatu4.w = uint(uint(0u));
    u_xlat4.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu4.xy), 0).xyz;
    u_xlat16_7.xyz = u_xlat4.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0 = dot(u_xlat16_7.xyz, u_xlat2.xyz);
    u_xlat21.x = float(1.0) / _AngleLimit;
    u_xlat0 = u_xlat0 * u_xlat21.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0 = min(max(u_xlat0, 0.0), 1.0);
#else
    u_xlat0 = clamp(u_xlat0, 0.0, 1.0);
#endif
    u_xlat21.x = u_xlat0 * -2.0 + 3.0;
    u_xlat0 = u_xlat0 * u_xlat0;
    u_xlat31 = u_xlat0 * u_xlat21.x;
    u_xlat0 = u_xlat21.x * u_xlat0 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0<0.0);
#else
    u_xlatb0 = u_xlat0<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0 = u_xlat31 * u_xlat16_33;
    u_xlat16_33 = u_xlat16_33 * u_xlat31 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb21 = !!(u_xlat16_33<0.0);
#else
    u_xlatb21 = u_xlat16_33<0.0;
#endif
    if((int(u_xlatb21) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_9.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_8.xyz = u_xlat16_8.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_9.xyz);
    u_xlat16_2.xyz = u_xlat16_7.zxy * u_xlat16_8.yzx;
    u_xlat16_2.xyz = u_xlat16_7.yzx * u_xlat16_8.zxy + (-u_xlat16_2.xyz);
    u_xlat16_8.xyz = u_xlat16_6.yyy * u_xlat16_8.xyz;
    u_xlat16_6.xyw = u_xlat16_6.xxx * u_xlat16_2.xyz + u_xlat16_8.xyz;
    u_xlat16_6.xyz = u_xlat16_6.zzz * u_xlat16_7.xyz + u_xlat16_6.xyw;
    u_xlat16_33 = min(u_xlat0, 1.0);
    u_xlat16_6.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz + u_xlat16_7.xyz;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat16_6.xyz);
    u_xlat16_33 = inversesqrt(u_xlat16_33);
    u_xlat16_6.xyz = vec3(u_xlat16_33) * u_xlat16_6.xyz;
    u_xlat10_1 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat11.xyz = (-u_xlat10.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat2.x = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat2.x = inversesqrt(u_xlat2.x);
    u_xlat11.xyz = u_xlat11.xyz * u_xlat2.xxx;
    u_xlat16_33 = dot(u_xlat16_6.xyz, u_xlat11.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
    u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
    u_xlat16_11.xyz = vec3(u_xlat16_33) * _LightColor0.xyz;
    u_xlat16_1.xyz = vec3(u_xlat10_1) * u_xlat16_11.xyz;
    u_xlat16_3.xyz = u_xlat16_1.xyz * u_xlat16_3.xyz + u_xlat16_5.xyz;
    u_xlat1.xyz = u_xlat10.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat20 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat20 = sqrt(u_xlat20);
#ifdef UNITY_ADRENO_ES3
    u_xlatb1 = !!(_ElementViewParamsFloat1.y>=u_xlat20);
#else
    u_xlatb1 = _ElementViewParamsFloat1.y>=u_xlat20;
#endif
    if(u_xlatb1){
        u_xlat16_5.xyz = vec3(u_xlat16_3.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_3.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_3.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat1.xy = u_xlat10.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat2.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat2.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat21.x = dot(u_xlat2.xy, u_xlat2.xy);
        u_xlat21.x = inversesqrt(u_xlat21.x);
        u_xlat2.xy = u_xlat21.xx * u_xlat2.xy;
        u_xlat2.z = (-u_xlat2.y);
        u_xlat4.x = dot(u_xlat1.yx, u_xlat2.xz);
        u_xlat4.y = dot(u_xlat1.xy, u_xlat2.xy);
        u_xlat1.xy = u_xlat4.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_1 = texture(_ElementViewScenePatternTex, u_xlat1.xy).x;
        u_xlat16_11.x = max(u_xlat16_6.y, 0.0);
        u_xlat16_1.x = u_xlat16_11.x * u_xlat10_1;
        u_xlat10.xz = u_xlat10.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_10 = textureLod(_ElementViewSceneWaveTex, u_xlat10.xz, 0.0).x;
        u_xlat16_10 = u_xlat10_10 * _ElementViewParamsHalf1.x;
        u_xlat16_33 = u_xlat20 * _ElementViewParamsHalf2.z + u_xlat16_10;
        u_xlat10.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_33;
        u_xlat10.x = fract(u_xlat10.x);
        u_xlat10.x = u_xlat10.x + -0.5;
        u_xlat16_30 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat10.x = u_xlat16_30 * abs(u_xlat10.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat30 = u_xlat10.x * -2.0 + 3.0;
        u_xlat10.x = u_xlat10.x * u_xlat10.x;
        u_xlat10.x = (-u_xlat30) * u_xlat10.x + 1.0;
        u_xlat30 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.w;
        u_xlat30 = fract(u_xlat30);
        u_xlat30 = u_xlat30 * _ElementViewParamsFloat1.y;
        u_xlat16_33 = (-u_xlat30) * _ElementViewParamsHalf2.z + u_xlat16_33;
        u_xlat16_35 = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_33 = abs(u_xlat16_33) * u_xlat16_35;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_33 = min(max(u_xlat16_33, 0.0), 1.0);
#else
        u_xlat16_33 = clamp(u_xlat16_33, 0.0, 1.0);
#endif
        u_xlat16_35 = u_xlat16_33 * -2.0 + 3.0;
        u_xlat16_33 = u_xlat16_33 * u_xlat16_33;
        u_xlat16_33 = (-u_xlat16_35) * u_xlat16_33 + 1.0;
        u_xlat16_35 = u_xlat10.x + u_xlat16_33;
        u_xlat16_35 = u_xlat16_35 + 0.5;
        u_xlat16_35 = 0.5 / u_xlat16_35;
        u_xlat16_6.x = log2(u_xlat16_1.x);
        u_xlat16_35 = u_xlat16_35 * u_xlat16_6.x;
        u_xlat16_35 = exp2(u_xlat16_35);
        u_xlat16_6.x = dot(u_xlat16_5.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_6.x = u_xlat16_6.x * 10.0 + 1.0;
        u_xlat16_16.x = u_xlat10.x * _ElementViewParamsHalf3.y;
        u_xlat16_35 = u_xlat16_35 * _ElementViewParamsHalf2.x + u_xlat16_16.x;
        u_xlat16_33 = u_xlat16_33 * _ElementViewParamsHalf3.z + u_xlat16_35;
        u_xlat16_16.xyz = vec3(u_xlat16_33) * _ElementViewSceneLightColor.xyz;
        u_xlat16_5.xyz = u_xlat16_16.xyz * u_xlat16_6.xxx + u_xlat16_5.xyz;
        u_xlat10.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat10.x = (-_ElementViewParamsFloat1.y) * u_xlat10.x + u_xlat20;
        u_xlat20 = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat10.x = u_xlat10.x / u_xlat20;
#ifdef UNITY_ADRENO_ES3
        u_xlat10.x = min(max(u_xlat10.x, 0.0), 1.0);
#else
        u_xlat10.x = clamp(u_xlat10.x, 0.0, 1.0);
#endif
        u_xlat10.x = u_xlat10.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_5.xyz;
        u_xlat16_3.xyz = u_xlat10.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat0) * u_xlat16_3.xyz;
    SV_Target0.w = u_xlat0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat33 * _mhyRainNoiseParam1.x;
    u_xlat33 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat33 = u_xlat33 + u_xlat33;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat33)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0.x = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0.x * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0.x * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_34 = u_xlat16_34 * 0.949999988 + 0.0500000007;
    u_xlat16_35 = _mhyRainNoiseParam0.z + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat3.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat3.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat3.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_7.xyz = u_xlat16_4.xyz * _mhyRainNoiseParam1.xxx;
    u_xlat16_37 = u_xlat0.x * _mhyRainNoiseParam1.x;
    u_xlat0.x = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat0.x = u_xlat0.x + u_xlat0.x;
    u_xlat0.xyz = u_xlat1.xyw * (-u_xlat0.xxx) + (-u_xlat11.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat33 = max(u_xlat1.y, 0.0);
    u_xlat35 = min(u_xlat33, 1.0);
    u_xlat16_39 = _mhyRainNoiseParam0.w * 0.400000006 + -0.0299999993;
    u_xlat16_39 = u_xlat35 * u_xlat16_39 + 0.0299999993;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * _mhyRainNoiseParam1.xxx + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_39 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
    u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_39) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat23.x = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat23.x = inversesqrt(u_xlat23.x);
        u_xlat1.xy = u_xlat23.xx * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat33 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_39 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_39;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_39 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_39;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_39 = abs(u_xlat16_39) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_39 = min(max(u_xlat16_39, 0.0), 1.0);
#else
        u_xlat16_39 = clamp(u_xlat16_39, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_39 * -2.0 + 3.0;
        u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
        u_xlat16_39 = (-u_xlat16_7.x) * u_xlat16_39 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_39;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_39 = u_xlat16_39 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_39) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_37;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat0.zw;
    vs_TEXCOORD1.xy = u_xlat1.zz + u_xlat1.xw;
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[1].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].xxx + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].zzz + u_xlat0.xyz;
    u_xlat0.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[1].www + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[0].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[2].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat0.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].yyy * hlslcc_mtx4x4unity_MatrixV[1].xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * hlslcc_mtx4x4unity_ObjectToWorld[3].www + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat0.xyz;
    vs_TEXCOORD2.xyz = u_xlat0.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[2].xyz, hlslcc_mtx4x4unity_ObjectToWorld[2].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat0.xyz;
    u_xlat0.x = dot(hlslcc_mtx4x4unity_ObjectToWorld[0].xyz, hlslcc_mtx4x4unity_ObjectToWorld[0].xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat0.xyz = u_xlat0.xxx * hlslcc_mtx4x4unity_ObjectToWorld[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec3 u_xlat10_0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec2 u_xlat11;
lowp float u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
lowp float u_xlat10_33;
bool u_xlatb33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlat0.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat0.xyz = u_xlat0.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat33 = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat33 = _ZBufferParams.x * u_xlat33 + _ZBufferParams.y;
    u_xlat33 = float(1.0) / u_xlat33;
    u_xlat2.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb33 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb33 = u_xlatb3.z || u_xlatb33;
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb33 = _ProjectionParams.x<0.0;
#endif
    u_xlat23.x = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb33) ? u_xlat23.x : u_xlat3.y;
    u_xlat10_33 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat33 = u_xlat10_33 + _DeferredProj_OcclusionParams.w;
    u_xlat33 = (-u_xlat3.z) + u_xlat33;
    u_xlat33 = u_xlat33 * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + hlslcc_mtx4x4unity_ObjectToWorld[3].xyz;
    u_xlat33 = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat3.xyz = vec3(u_xlat33) * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_33 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_33 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_33 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat33 = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat33);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb33 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat33 = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat33 = u_xlat33 * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat33 = min(max(u_xlat33, 0.0), 1.0);
#else
    u_xlat33 = clamp(u_xlat33, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat33 * -2.0 + 3.0;
    u_xlat33 = u_xlat33 * u_xlat33;
    u_xlat34 = u_xlat33 * u_xlat23.x;
    u_xlat33 = u_xlat23.x * u_xlat33 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb33 = !!(u_xlat33<0.0);
#else
    u_xlatb33 = u_xlat33<0.0;
#endif
    if((int(u_xlatb33) * int(0xffffffffu))!=0){discard;}
    u_xlat33 = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat33, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat0.xyz = u_xlat0.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat33 * u_xlat16_37;
    u_xlat16_33 = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat0.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat0.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat0.xyz);
    u_xlat10_0.xyz = texture(_mhyRainRefCube, u_xlat0.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_33 * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_0.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11 = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixV[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out mediump vec3 vs_TEXCOORD3;
out mediump vec3 vs_TEXCOORD4;
out highp vec3 vs_TEXCOORD6;
flat out highp uint vs_SV_InstanceID0;
vec3 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    u_xlat3.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat2.w = u_xlat3.x * 0.5;
    u_xlat2.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD1.zw = u_xlat1.zw;
    vs_TEXCOORD1.xy = u_xlat2.zz + u_xlat2.xw;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yyy;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].zzz + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].www + u_xlat3.xyz;
    u_xlat3.xyz = u_xlat3.xyz * in_POSITION0.yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.xxx + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.zzz + u_xlat3.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[1].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].yyy;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[0].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xxx + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[2].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].zzz + u_xlat1.xyz;
    u_xlat1.xyz = hlslcc_mtx4x4unity_MatrixV[3].xyz * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].www + u_xlat1.xyz;
    u_xlat3.xyz = u_xlat1.xyz * in_POSITION0.www + u_xlat3.xyz;
    vs_TEXCOORD2.xyz = u_xlat3.xyz * vec3(-1.0, -1.0, 1.0);
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat3.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].xyz;
    vs_TEXCOORD3.xyz = u_xlat3.xyz;
    u_xlat3.x = dot(unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz);
    u_xlat3.x = inversesqrt(u_xlat3.x);
    u_xlat0.xyz = u_xlat3.xxx * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].xyz;
    vs_TEXCOORD4.xyz = u_xlat0.xyz;
    vs_TEXCOORD6.xyz = vec3(0.0, 0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

precision highp int;
uniform 	vec4 _Time;
uniform 	vec3 _WorldSpaceCameraPos;
uniform 	vec4 _ProjectionParams;
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	vec4 hlslcc_mtx4x4unity_WorldToCamera[4];
uniform 	vec4 hlslcc_mtx4x4unity_CameraToWorld[4];
uniform 	vec4 _WorldSpaceLightPos0;
uniform 	int unity_BaseInstanceID;
uniform 	vec4 hlslcc_mtx4x4_WorldToRainOccluder[4];
uniform 	mediump vec4 _mhyRainNoiseParam0;
uniform 	mediump vec4 _mhyRainNoiseParam1;
uniform 	mediump vec3 _ElementViewSceneBackgroundColor;
uniform 	mediump vec3 _ElementViewSceneLightColor;
uniform 	vec4 _ElementViewParamsFloat1;
uniform 	vec4 _ElementViewParamsFloat2;
uniform 	vec4 _ElementViewParamsFloat3;
uniform 	mediump vec4 _ElementViewParamsHalf1;
uniform 	mediump vec4 _ElementViewParamsHalf2;
uniform 	mediump vec4 _ElementViewParamsHalf3;
uniform 	vec4 hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[4];
uniform 	vec4 _DeferredProj_OcclusionParams;
uniform 	float _AngleLimit;
uniform 	mediump vec4 _LightColor0;
uniform 	mediump vec4 _MainColor;
uniform 	mediump float _PuzzleStep;
uniform 	mediump vec4 _PatternMaskR_UVSet;
uniform 	mediump vec4 _PatternMaskB_UVSet;
uniform 	mediump float _CutOff;
uniform 	mediump float _NormalIntensity;
uniform 	mediump vec4 _EmissionColor;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
struct DeferredprojectorFragPropsArray_Type {
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjector[4];
	vec4 hlslcc_mtx4x4_DeferredProj_WorldToProjectorClip[4];
};
layout(std140) uniform UnityInstancing_DeferredprojectorFragProps {
	DeferredprojectorFragPropsArray_Type DeferredprojectorFragPropsArray[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
uniform highp sampler2D _CameraDepthTexture;
uniform lowp sampler2D _DeferredProj_OcclusoinShadowMap;
uniform lowp sampler2D _PatternMask;
uniform lowp sampler2D _Normal;
uniform lowp sampler2D _ShadowMapTexture;
uniform highp sampler2D _RainOccluderDepthBlurTexture;
uniform lowp sampler2D _mhyRainNoiseNormal;
uniform lowp samplerCube _mhyRainRefCube;
uniform lowp sampler2D _ElementViewScenePatternTex;
uniform lowp sampler2D _ElementViewSceneWaveTex;
uniform lowp sampler2DMS _CameraNormalsTexture;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in mediump vec3 vs_TEXCOORD3;
in mediump vec3 vs_TEXCOORD4;
flat in highp uint vs_SV_InstanceID0;
layout(location = 0) out mediump vec4 SV_Target0;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp float u_xlat10_0;
int u_xlati0;
bool u_xlatb0;
vec4 u_xlat1;
lowp vec2 u_xlat10_1;
vec4 u_xlat2;
vec4 u_xlat3;
mediump vec3 u_xlat16_3;
bvec3 u_xlatb3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
lowp vec4 u_xlat10_5;
uvec4 u_xlatu5;
mediump vec3 u_xlat16_6;
mediump vec4 u_xlat16_7;
mediump vec3 u_xlat16_8;
mediump vec3 u_xlat16_9;
mediump vec3 u_xlat16_10;
vec3 u_xlat11;
lowp vec3 u_xlat10_11;
bool u_xlatb11;
mediump vec3 u_xlat16_15;
mediump float u_xlat16_17;
mediump float u_xlat16_18;
vec2 u_xlat22;
mediump float u_xlat16_22;
lowp float u_xlat10_22;
vec2 u_xlat23;
lowp float u_xlat10_23;
bool u_xlatb23;
vec2 u_xlat27;
mediump float u_xlat16_29;
float u_xlat33;
mediump float u_xlat16_33;
float u_xlat34;
mediump float u_xlat16_34;
float u_xlat35;
mediump float u_xlat16_35;
mediump float u_xlat16_37;
mediump float u_xlat16_39;
mediump float u_xlat16_40;
void main()
{
    u_xlati0 = int(vs_SV_InstanceID0) + unity_BaseInstanceID;
    u_xlat11.x = _ProjectionParams.z / vs_TEXCOORD2.z;
    u_xlat11.xyz = u_xlat11.xxx * vs_TEXCOORD2.xyz;
    u_xlat1.xy = vs_TEXCOORD1.xy / vs_TEXCOORD1.ww;
    u_xlat23.x = texture(_CameraDepthTexture, u_xlat1.xy).x;
    u_xlat23.x = _ZBufferParams.x * u_xlat23.x + _ZBufferParams.y;
    u_xlat23.x = float(1.0) / u_xlat23.x;
    u_xlat2.xyz = u_xlat11.xyz * u_xlat23.xxx;
    u_xlat3.xyz = u_xlat2.yyy * hlslcc_mtx4x4unity_CameraToWorld[1].xyz;
    u_xlat2.xyw = hlslcc_mtx4x4unity_CameraToWorld[0].xyz * u_xlat2.xxx + u_xlat3.xyz;
    u_xlat2.xyz = hlslcc_mtx4x4unity_CameraToWorld[2].xyz * u_xlat2.zzz + u_xlat2.xyw;
    u_xlat2.xyz = u_xlat2.xyz + hlslcc_mtx4x4unity_CameraToWorld[3].xyz;
    u_xlati0 = u_xlati0 << 3;
    u_xlat3 = u_xlat2.yyyy * DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[1];
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + DeferredprojectorFragPropsArray[u_xlati0 / 8].hlslcc_mtx4x4_DeferredProj_WorldToProjector[3];
    u_xlat16_4.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat3.xyz = -abs(u_xlat16_4.xyz) + vec3(0.5, 0.5, 0.5);
    u_xlatb3.xyz = lessThan(u_xlat3.xyzx, vec4(0.0, 0.0, 0.0, 0.0)).xyz;
    u_xlatb23 = u_xlatb3.y || u_xlatb3.x;
    u_xlatb23 = u_xlatb3.z || u_xlatb23;
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[1];
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_DeferredProj_WorldToOcclusion[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(_ProjectionParams.x<0.0);
#else
    u_xlatb23 = _ProjectionParams.x<0.0;
#endif
    u_xlat34 = (-u_xlat3.y) + 1.0;
    u_xlat3.w = (u_xlatb23) ? u_xlat34 : u_xlat3.y;
    u_xlat10_23 = texture(_DeferredProj_OcclusoinShadowMap, u_xlat3.xw).x;
    u_xlat23.x = u_xlat10_23 + _DeferredProj_OcclusionParams.w;
    u_xlat23.x = (-u_xlat3.z) + u_xlat23.x;
    u_xlat23.x = u_xlat23.x * _DeferredProj_OcclusionParams.z;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat23.x<0.0);
#else
    u_xlatb23 = u_xlat23.x<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat23.xy = u_xlat16_4.xy + vec2(0.5, 0.5);
    u_xlat3.xyz = (-u_xlat2.xyz) + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat16_4.x = _PuzzleStep;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_4.x = min(max(u_xlat16_4.x, 0.0), 1.0);
#else
    u_xlat16_4.x = clamp(u_xlat16_4.x, 0.0, 1.0);
#endif
    u_xlat16_15.xyz = _MainColor.xyz + vec3(-0.514705896, -0.514705896, -0.514705896);
    u_xlat16_4.xyz = u_xlat16_4.xxx * u_xlat16_15.xyz + vec3(0.514705896, 0.514705896, 0.514705896);
    u_xlat5.xy = u_xlat23.xy * _PatternMaskR_UVSet.xy + _PatternMaskR_UVSet.zw;
    u_xlat10_5.xy = texture(_PatternMask, u_xlat5.xy).xy;
    u_xlat27.xy = u_xlat23.xy * _PatternMaskB_UVSet.xy + _PatternMaskB_UVSet.zw;
    u_xlat10_0 = texture(_PatternMask, u_xlat27.xy).z;
    u_xlat16_37 = u_xlat10_0 * 4.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_6.xyz = vec3(_PuzzleStep) + vec3(-2.5, -1.0, -2.0);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.xyz = min(max(u_xlat16_6.xyz, 0.0), 1.0);
#else
    u_xlat16_6.xyz = clamp(u_xlat16_6.xyz, 0.0, 1.0);
#endif
    u_xlat16_6.x = u_xlat16_6.x + _CutOff;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_6.x = min(max(u_xlat16_6.x, 0.0), 1.0);
#else
    u_xlat16_6.x = clamp(u_xlat16_6.x, 0.0, 1.0);
#endif
    u_xlat16_39 = u_xlat10_0 * u_xlat16_6.x;
    u_xlat16_37 = u_xlat10_5.x * u_xlat16_37 + (-u_xlat16_39);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat10_5.xzw = texture(_Normal, u_xlat23.xy).xyz;
    u_xlat16_7.xyz = u_xlat10_5.xzw * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_NormalIntensity, _NormalIntensity));
    u_xlat16_39 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_39 = inversesqrt(u_xlat16_39);
    u_xlat16_7.xyz = vec3(u_xlat16_39) * u_xlat16_7.xyz;
    u_xlat16_39 = ceil(u_xlat16_6.y);
    u_xlat16_39 = u_xlat16_39 * 3.0;
    u_xlat0.x = u_xlat16_39 * _Time.y;
    u_xlat16_39 = sin(u_xlat0.x);
    u_xlat16_39 = u_xlat16_39 + 1.0;
    u_xlat16_17 = u_xlat16_6.y * u_xlat16_39;
    u_xlat16_39 = u_xlat16_17 * 0.600000024;
    u_xlat16_40 = u_xlat16_6.z + u_xlat16_6.z;
    u_xlat16_40 = min(u_xlat16_40, 1.0);
    u_xlat16_17 = (-u_xlat16_17) * 0.600000024 + 4.0;
    u_xlat16_17 = u_xlat16_40 * u_xlat16_17 + u_xlat16_39;
    u_xlat16_8.z = u_xlat16_6.z * (-u_xlat16_17) + u_xlat16_17;
    u_xlat16_6.x = (-u_xlat16_6.x) + u_xlat16_37;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat16_6.x<0.0);
#else
    u_xlatb0 = u_xlat16_6.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat16_8.xy = _EmissionColor.zz;
    u_xlat16_6.xyz = vec3(u_xlat16_8.z * _EmissionColor.x, u_xlat16_8.z * _EmissionColor.y, u_xlat16_8.y * _EmissionColor.z);
    u_xlat16_6.xyz = u_xlat16_8.xyz * u_xlat16_6.xyz;
    u_xlat16_6.xyz = u_xlat10_5.yyy * u_xlat16_6.xyz;
    u_xlat23.xy = u_xlat1.xy * _ScreenParams.xy;
    u_xlat23.xy = floor(u_xlat23.xy);
    u_xlatu5.xy = uvec2(ivec2(u_xlat23.xy));
    u_xlatu5.z = uint(uint(0u));
    u_xlatu5.w = uint(uint(0u));
    u_xlat5.xyz = texelFetch(_CameraNormalsTexture, ivec2(u_xlatu5.xy), 0).xyz;
    u_xlat16_8.xyz = u_xlat5.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat0.x = dot(u_xlat16_8.xyz, u_xlat3.xyz);
    u_xlat23.x = float(1.0) / _AngleLimit;
    u_xlat0.x = u_xlat0.x * u_xlat23.x;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat23.x = u_xlat0.x * -2.0 + 3.0;
    u_xlat0.x = u_xlat0.x * u_xlat0.x;
    u_xlat34 = u_xlat0.x * u_xlat23.x;
    u_xlat0.x = u_xlat23.x * u_xlat0.x + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(u_xlat0.x<0.0);
#else
    u_xlatb0 = u_xlat0.x<0.0;
#endif
    if((int(u_xlatb0) * int(0xffffffffu))!=0){discard;}
    u_xlat0.x = u_xlat34 * u_xlat16_37;
    u_xlat16_37 = u_xlat16_37 * u_xlat34 + -0.00100000005;
#ifdef UNITY_ADRENO_ES3
    u_xlatb23 = !!(u_xlat16_37<0.0);
#else
    u_xlatb23 = u_xlat16_37<0.0;
#endif
    if((int(u_xlatb23) * int(0xffffffffu))!=0){discard;}
    u_xlat16_9.xyz = vs_TEXCOORD3.yzx * vec3(1.0, -1.0, 1.0);
    u_xlat16_10.xyz = vs_TEXCOORD3.zxy * vec3(-1.0, 1.0, 1.0);
    u_xlat16_10.xyz = u_xlat16_10.xyz * vs_TEXCOORD4.yzx;
    u_xlat16_9.xyz = u_xlat16_9.xyz * vs_TEXCOORD4.zxy + (-u_xlat16_10.xyz);
    u_xlat16_3.xyz = u_xlat16_8.zxy * u_xlat16_9.yzx;
    u_xlat16_3.xyz = u_xlat16_8.yzx * u_xlat16_9.zxy + (-u_xlat16_3.xyz);
    u_xlat16_9.xyz = u_xlat16_7.yyy * u_xlat16_9.xyz;
    u_xlat16_7.xyw = u_xlat16_7.xxx * u_xlat16_3.xyz + u_xlat16_9.xyz;
    u_xlat16_7.xyz = u_xlat16_7.zzz * u_xlat16_8.xyz + u_xlat16_7.xyw;
    u_xlat16_37 = min(u_xlat0.x, 1.0);
    u_xlat16_7.xyz = (-u_xlat16_8.xyz) + u_xlat16_7.xyz;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_7.xyz + u_xlat16_8.xyz;
    u_xlat16_37 = dot(u_xlat16_7.xyz, u_xlat16_7.xyz);
    u_xlat16_37 = inversesqrt(u_xlat16_37);
    u_xlat10_23 = texture(_ShadowMapTexture, u_xlat1.xy).x;
    u_xlat3 = u_xlat2.yyyy * hlslcc_mtx4x4_WorldToRainOccluder[1];
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[0] * u_xlat2.xxxx + u_xlat3;
    u_xlat3 = hlslcc_mtx4x4_WorldToRainOccluder[2] * u_xlat2.zzzz + u_xlat3;
    u_xlat3 = u_xlat3 + hlslcc_mtx4x4_WorldToRainOccluder[3];
    u_xlat3.xyz = u_xlat3.xyz / u_xlat3.www;
    u_xlat34 = texture(_RainOccluderDepthBlurTexture, u_xlat3.xy).x;
    u_xlat35 = u_xlat3.z * -14.4269505;
    u_xlat35 = exp2(u_xlat35);
    u_xlat34 = u_xlat34 * u_xlat35;
#ifdef UNITY_ADRENO_ES3
    u_xlat34 = min(max(u_xlat34, 0.0), 1.0);
#else
    u_xlat34 = clamp(u_xlat34, 0.0, 1.0);
#endif
    u_xlat34 = u_xlat34 + -0.800000012;
    u_xlat34 = u_xlat34 * 5.0;
    u_xlat34 = max(u_xlat34, 0.0);
    u_xlat16_39 = u_xlat34 * u_xlat34;
    u_xlat16_39 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_40 = u_xlat16_39 * u_xlat16_39;
    u_xlat16_34 = u_xlat16_7.y * u_xlat16_37 + -0.800000012;
    u_xlat16_34 = u_xlat16_34 * 5.0;
#ifdef UNITY_ADRENO_ES3
    u_xlat16_34 = min(max(u_xlat16_34, 0.0), 1.0);
#else
    u_xlat16_34 = clamp(u_xlat16_34, 0.0, 1.0);
#endif
    u_xlat16_35 = u_xlat16_39 * u_xlat16_39 + -0.0500000007;
    u_xlat16_34 = u_xlat16_34 * u_xlat16_35 + 0.0500000007;
    u_xlat16_3.xy = vec2(_mhyRainNoiseParam0.z + float(-0.0500000007), _mhyRainNoiseParam0.w + float(-0.0500000007));
    u_xlat16_34 = u_xlat16_34 * u_xlat16_3.x + 0.0500000007;
    u_xlat35 = _Time.y * _mhyRainNoiseParam0.y;
    u_xlat1.xy = u_xlat1.xy * _mhyRainNoiseParam0.xx + vec2(u_xlat35);
    u_xlat10_1.xy = texture(_mhyRainNoiseNormal, u_xlat1.xy).xy;
    u_xlat16_8.xy = u_xlat10_1.xy * vec2(2.0, 2.0) + vec2(-1.0, -1.0);
    u_xlat5.xy = vec2(u_xlat16_34) * u_xlat16_8.xy;
    u_xlat5.z = 0.0;
    u_xlat1.xyw = u_xlat16_7.xyz * vec3(u_xlat16_37) + u_xlat5.xyz;
    u_xlat35 = dot(u_xlat1.xyw, u_xlat1.xyw);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat1.xyw = u_xlat1.xyw * vec3(u_xlat35);
    u_xlat35 = dot(u_xlat11.xyz, u_xlat11.xyz);
    u_xlat35 = inversesqrt(u_xlat35);
    u_xlat11.xyz = u_xlat11.xyz * vec3(u_xlat35);
    u_xlat16_37 = _mhyRainNoiseParam1.x + -1.0;
    u_xlat16_37 = u_xlat16_40 * u_xlat16_37 + 1.0;
    u_xlat16_7.xyz = vec3(u_xlat16_37) * u_xlat16_4.xyz;
    u_xlat16_39 = u_xlat0.x * u_xlat16_37;
    u_xlat16_0.x = u_xlat16_40 * u_xlat16_3.y + 0.0500000007;
    u_xlat35 = dot((-u_xlat11.xyz), u_xlat1.xyw);
    u_xlat35 = u_xlat35 + u_xlat35;
    u_xlat11.xyz = u_xlat1.xyw * (-vec3(u_xlat35)) + (-u_xlat11.xyz);
    u_xlat10_11.xyz = texture(_mhyRainRefCube, u_xlat11.xyz).xyz;
    u_xlat35 = max(u_xlat1.y, 0.0);
    u_xlat3.x = min(u_xlat35, 1.0);
    u_xlat16_40 = u_xlat16_40 * 0.0299999993;
    u_xlat16_8.x = u_xlat16_0.x * 0.400000006 + (-u_xlat16_40);
    u_xlat16_40 = u_xlat3.x * u_xlat16_8.x + u_xlat16_40;
    u_xlat16_4.xyz = (-u_xlat16_4.xyz) * vec3(u_xlat16_37) + u_xlat10_11.xyz;
    u_xlat16_4.xyz = vec3(u_xlat16_40) * u_xlat16_4.xyz + u_xlat16_7.xyz;
    u_xlat0.xyz = (-u_xlat2.xyz) * _WorldSpaceLightPos0.www + _WorldSpaceLightPos0.xyz;
    u_xlat33 = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat33 = inversesqrt(u_xlat33);
    u_xlat0.xyz = vec3(u_xlat33) * u_xlat0.xyz;
    u_xlat16_37 = dot(u_xlat1.xyw, u_xlat0.xyz);
#ifdef UNITY_ADRENO_ES3
    u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
    u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
    u_xlat16_0.xyz = vec3(u_xlat16_37) * _LightColor0.xyz;
    u_xlat16_0.xyz = vec3(u_xlat10_23) * u_xlat16_0.xyz;
    u_xlat16_4.xyz = u_xlat16_0.xyz * u_xlat16_4.xyz + u_xlat16_6.xyz;
    u_xlat0.xyz = u_xlat2.xyz + (-_WorldSpaceCameraPos.xyz);
    u_xlat0.x = dot(u_xlat0.xyz, u_xlat0.xyz);
    u_xlat0.x = sqrt(u_xlat0.x);
#ifdef UNITY_ADRENO_ES3
    u_xlatb11 = !!(_ElementViewParamsFloat1.y>=u_xlat0.x);
#else
    u_xlatb11 = _ElementViewParamsFloat1.y>=u_xlat0.x;
#endif
    if(u_xlatb11){
        u_xlat16_6.xyz = vec3(u_xlat16_4.x * _ElementViewSceneBackgroundColor.xxyz.y, u_xlat16_4.y * _ElementViewSceneBackgroundColor.xxyz.z, u_xlat16_4.z * float(_ElementViewSceneBackgroundColor.z));
        u_xlat11.xy = u_xlat2.xz + (-_WorldSpaceCameraPos.xz);
        u_xlat1.x = hlslcc_mtx4x4unity_WorldToCamera[0].z + 0.00100000005;
        u_xlat1.y = hlslcc_mtx4x4unity_WorldToCamera[2].z + 0.00100000005;
        u_xlat33 = dot(u_xlat1.xy, u_xlat1.xy);
        u_xlat33 = inversesqrt(u_xlat33);
        u_xlat1.xy = vec2(u_xlat33) * u_xlat1.xy;
        u_xlat1.z = (-u_xlat1.y);
        u_xlat3.x = dot(u_xlat11.yx, u_xlat1.xz);
        u_xlat3.y = dot(u_xlat11.xy, u_xlat1.xy);
        u_xlat11.xy = u_xlat3.xy * _ElementViewParamsFloat2.yy;
        u_xlat10_11.x = texture(_ElementViewScenePatternTex, u_xlat11.xy).x;
        u_xlat11.x = u_xlat35 * u_xlat10_11.x;
        u_xlat22.xy = u_xlat2.xz * _ElementViewParamsFloat2.ww;
        u_xlat10_22 = textureLod(_ElementViewSceneWaveTex, u_xlat22.xy, 0.0).x;
        u_xlat16_22 = u_xlat10_22 * _ElementViewParamsHalf1.x;
        u_xlat16_37 = u_xlat0.x * _ElementViewParamsHalf2.z + u_xlat16_22;
        u_xlat22.x = (-_Time.y) * _ElementViewParamsFloat1.x + u_xlat16_37;
        u_xlat22.x = fract(u_xlat22.x);
        u_xlat22.x = u_xlat22.x + -0.5;
        u_xlat16_33 = float(1.0) / _ElementViewParamsHalf2.w;
        u_xlat22.x = u_xlat16_33 * abs(u_xlat22.x);
#ifdef UNITY_ADRENO_ES3
        u_xlat22.x = min(max(u_xlat22.x, 0.0), 1.0);
#else
        u_xlat22.x = clamp(u_xlat22.x, 0.0, 1.0);
#endif
        u_xlat33 = u_xlat22.x * -2.0 + 3.0;
        u_xlat22.x = u_xlat22.x * u_xlat22.x;
        u_xlat22.x = (-u_xlat33) * u_xlat22.x + 1.0;
        u_xlat33 = _Time.y + (-_ElementViewParamsFloat3.x);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.w;
        u_xlat33 = fract(u_xlat33);
        u_xlat33 = u_xlat33 * _ElementViewParamsFloat1.y;
        u_xlat16_37 = (-u_xlat33) * _ElementViewParamsHalf2.z + u_xlat16_37;
        u_xlat16_7.x = float(1.0) / _ElementViewParamsHalf3.w;
        u_xlat16_37 = abs(u_xlat16_37) * u_xlat16_7.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_37 = min(max(u_xlat16_37, 0.0), 1.0);
#else
        u_xlat16_37 = clamp(u_xlat16_37, 0.0, 1.0);
#endif
        u_xlat16_7.x = u_xlat16_37 * -2.0 + 3.0;
        u_xlat16_37 = u_xlat16_37 * u_xlat16_37;
        u_xlat16_37 = (-u_xlat16_7.x) * u_xlat16_37 + 1.0;
        u_xlat16_7.x = u_xlat22.x + u_xlat16_37;
        u_xlat16_7.x = u_xlat16_7.x + 0.5;
        u_xlat16_7.x = 0.5 / u_xlat16_7.x;
        u_xlat16_18 = log2(u_xlat11.x);
        u_xlat16_7.x = u_xlat16_18 * u_xlat16_7.x;
        u_xlat16_7.x = exp2(u_xlat16_7.x);
        u_xlat16_18 = dot(u_xlat16_6.xyz, vec3(0.0396819152, 0.45802179, 0.00609653955));
        u_xlat16_18 = u_xlat16_18 * 10.0 + 1.0;
        u_xlat16_29 = u_xlat22.x * _ElementViewParamsHalf3.y;
        u_xlat16_7.x = u_xlat16_7.x * _ElementViewParamsHalf2.x + u_xlat16_29;
        u_xlat16_37 = u_xlat16_37 * _ElementViewParamsHalf3.z + u_xlat16_7.x;
        u_xlat16_7.xzw = vec3(u_xlat16_37) * _ElementViewSceneLightColor.xyz;
        u_xlat16_6.xyz = u_xlat16_7.xzw * vec3(u_xlat16_18) + u_xlat16_6.xyz;
        u_xlat11.x = (-_ElementViewParamsFloat1.z) + 1.0;
        u_xlat0.x = (-_ElementViewParamsFloat1.y) * u_xlat11.x + u_xlat0.x;
        u_xlat11.x = _ElementViewParamsFloat1.z * _ElementViewParamsFloat1.y;
        u_xlat0.x = u_xlat0.x / u_xlat11.x;
#ifdef UNITY_ADRENO_ES3
        u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
        u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
        u_xlat0.x = u_xlat0.x * (-_ElementViewParamsHalf3.x) + _ElementViewParamsHalf3.x;
        u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_6.xyz;
        u_xlat16_4.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat16_4.xyz;
    //ENDIF
    }
    SV_Target0.xyz = vec3(u_xlat16_39) * u_xlat16_4.xyz;
    SV_Target0.w = u_xlat16_39;
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_HDR_ON" "INSTANCING_ON" "RAIN_OCCLUDER_ENABLE" "MSAA_INTERPOLATION" "ELEMENT_VIEW_ON" "RAIN_EFFECT_ON" "PROJECTOR_OCCLUSION" }
""
}
}
}
}
}