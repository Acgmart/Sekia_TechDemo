//////////////////////////////////////////
//
// NOTE: This is *not* a valid shader file
//
///////////////////////////////////////////
Shader "miHoYo/UnityBuiltin/Legacy Shaders/Bumped Specular Veretx Color Mix" {
Properties {
_Color ("Main Color", Color) = (1,1,1,1)
_SpecColor ("Specular Color", Color) = (0.5,0.5,0.5,1)
_Shininess ("Shininess", Range(0.03, 1)) = 0.078125
_MainTex ("Base (RGB) Gloss (A)", 2D) = "white" { }
_BumpMap ("Normalmap", 2D) = "bump" { }
_BumpScale ("Normal map Scale", Float) = 1
_SecondaryTex ("Secondary (RGB) Gloss (A)", 2D) = "white" { }
_SecondaryTexMul ("Secondary Mul", Float) = 1
_SecondaryBumpMap ("Secondary Normalmap", 2D) = "bump" { }
_SecondaryBumpScale ("Secondary Normalmap scale", Float) = 1
[Enum(R,0,G,1,B,2)] _MixColorChannel ("MixColorChannel", Float) = 0
_DetailMask ("Mask (R)", 2D) = "white" { }
_DetailMaskScale ("Mask Scake", Range(0, 10)) = 5
[Toggle(_USINGDEPTHBLEND_ON)] _UsingDepthBlend ("Enable Depth blend", Float) = 1
_DepthBiasScaled ("Depth bias scaled", Range(0, 16)) = 0.6
[Toggle(_USEASAO_ON)] _UseAsAO ("Use AO(Alpha Channel)", Float) = 0
_AOColor ("AO Color", Color) = (1,1,1,1)
_SSAO_Intensity ("SSAO Intensity", Range(0, 1)) = 0.6
_MaterialShadowBias ("Shadow Bias", Range(0, 1)) = 0
}
SubShader {
 LOD 400
 Tags { "RenderType" = "Opaque" }
 Pass {
  Name "HYBRIDDEFERRED"
  LOD 400
  Tags { "DebugView" = "On" "LIGHTMODE" = "HYBRIDDEFERRED" "RenderType" = "Opaque" }
  GpuProgramID 53743
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_2.xyz) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat3.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_3.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat3.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_2.xyz) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat3.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_3.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_6.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_6.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
vec3 u_xlat8;
mediump vec3 u_xlat16_8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_8.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat8.xyz = vs_COLOR0.www * u_xlat16_8.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat8.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat8.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat8.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_6.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat7.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_5.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat10_8.xyz;
    u_xlat0.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_5.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_11;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2 = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat0.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat0.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_8.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_5.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_6.xyz = u_xlat10_5.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_8.xyz);
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_6.xyz + u_xlat10_8.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat3.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_2.xyz) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat3.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_3.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_7.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
vec3 u_xlat9;
mediump vec3 u_xlat16_9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9.x / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9.x = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9.x);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9.x = inversesqrt(u_xlat9.x);
                    u_xlat0.x = u_xlat9.x * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9.x = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9.x;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9.x) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9.x * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_9.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat9.xyz = vs_COLOR0.www * u_xlat16_9.xyz + u_xlat16_7.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat9.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat9.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat9.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat3.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat0.xyz = (-u_xlat10_2.xyz) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
lowp vec3 u_xlat10_9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_6.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_6.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat0.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat0.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_9.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_2.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_8.xyz = u_xlat10_2.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_9.xyz);
    u_xlat16_8.xyz = u_xlat0.xxx * u_xlat16_8.xyz + u_xlat10_9.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat3.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_3.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_3.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat6.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat1.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat6.xy = u_xlat6.xy + u_xlat1.xy;
    u_xlat1.xy = (-u_xlat6.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat6.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = (int(gl_SampleID) != 0) ? u_xlat1.xy : u_xlat6.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat6.xy, 0.0).xyz;
    u_xlat10_6.xyz = textureLod(_SecondaryTex, u_xlat6.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_1.xyz;
    u_xlat1.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_13;
vec2 u_xlat18;
int u_xlati18;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_2;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat18.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_31 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_31 = u_xlat18.x * u_xlat16_31 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + u_xlat16_5.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_4.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat6.xyz;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_13 = u_xlat16_5.y + u_xlat16_5.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_13 * u_xlat28 + u_xlat27;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat10_1.xyz;
        u_xlat6.xyz = u_xlat6.xyz * u_xlat16_4.xxx + (-u_xlat16_8.xyz);
        u_xlat5.xyz = vec3(u_xlat27) * u_xlat6.xyz + u_xlat16_8.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_31);
    SV_Target0.xyz = u_xlat16_5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_6.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_11;
vec2 u_xlat16;
int u_xlati16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat16.x = _MixColorChannel + 0.100000001;
    u_xlati16 = int(u_xlat16.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x * u_xlat16_2;
    u_xlat16.x = u_xlat16.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat16.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_5.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_5.xyz);
    u_xlat16_6.xyz = u_xlat16.xxx * u_xlat16_6.xyz + u_xlat10_5.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat6.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat1.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat6.xy = u_xlat6.xy + u_xlat1.xy;
    u_xlat1.xy = (-u_xlat6.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat6.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = (int(gl_SampleID) != 0) ? u_xlat1.xy : u_xlat6.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat6.xy, 0.0).xyz;
    u_xlat10_6.xyz = textureLod(_SecondaryTex, u_xlat6.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_1.xyz;
    u_xlat1.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_11;
vec2 u_xlat16;
int u_xlati16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat16.x = _MixColorChannel + 0.100000001;
    u_xlati16 = int(u_xlat16.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x * u_xlat16_2;
    u_xlat16.x = u_xlat16.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat16.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat16_3.xxx * u_xlat6.xyz;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_5.xyz = u_xlat16.xxx * u_xlat16_5.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_1.xyz;
        u_xlat6.xyz = u_xlat6.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat16_5.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_6.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_13;
vec2 u_xlat18;
int u_xlati18;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_2;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat18.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_31 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_31 = u_xlat18.x * u_xlat16_31 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat10_6.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_7.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_8.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_7.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_13 = u_xlat16_5.y + u_xlat16_5.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_13 * u_xlat28 + u_xlat27;
        u_xlat8.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat8.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx + (-u_xlat16_7.xyz);
        u_xlat5.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_31);
    SV_Target0.xyz = u_xlat16_5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat6.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat1.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat6.xy = u_xlat6.xy + u_xlat1.xy;
    u_xlat1.xy = (-u_xlat6.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat6.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = (int(gl_SampleID) != 0) ? u_xlat1.xy : u_xlat6.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat6.xy, 0.0).xyz;
    u_xlat10_6.xyz = textureLod(_SecondaryTex, u_xlat6.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_1.xyz;
    u_xlat1.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump vec3 u_xlat16_8;
mediump float u_xlat16_13;
vec2 u_xlat18;
int u_xlati18;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_2;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_5.xyz = u_xlat18.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_31 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_31 = u_xlat18.x * u_xlat16_31 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + u_xlat16_5.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_4.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_5.xyz = u_xlat16_4.xxx * u_xlat6.xyz;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_13 = u_xlat16_5.y + u_xlat16_5.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_13 * u_xlat28 + u_xlat27;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat27) * u_xlat7.xyz + u_xlat10_1.xyz;
        u_xlat6.xyz = u_xlat6.xyz * u_xlat16_4.xxx + (-u_xlat16_8.xyz);
        u_xlat5.xyz = vec3(u_xlat27) * u_xlat6.xyz + u_xlat16_8.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_31);
    SV_Target0.xyz = u_xlat16_5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_6.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
lowp vec3 u_xlat10_5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_11;
vec2 u_xlat16;
int u_xlati16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat16.x = _MixColorChannel + 0.100000001;
    u_xlati16 = int(u_xlat16.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x * u_xlat16_2;
    u_xlat16.x = u_xlat16.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat16.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_3.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_3.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_3.xyz);
    u_xlat16_3.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat1.xyz * u_xlat16_3.xxx;
    u_xlat10_5.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_6.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_5.xyz);
    u_xlat16_6.xyz = u_xlat16.xxx * u_xlat16_6.xyz + u_xlat10_5.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_6.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat5.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat5.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat5.xy).xyz;
        u_xlat16_6.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_5.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat5.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_5.xyz);
        u_xlat5.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_5.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_3.xxx + (-u_xlat16_6.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat1.xyz + u_xlat16_6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_5.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_5.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec4 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_3;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump float u_xlat16_20;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_2.xy = u_xlat16_2.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat10_3 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_4.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_20 = (-u_xlat10_1.w) + u_xlat10_3.w;
    u_xlat16_20 = u_xlat0.x * u_xlat16_20 + u_xlat10_1.w;
    SV_Target2.w = sqrt(u_xlat16_20);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_2.xyz) + u_xlat16_4.xyz;
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_5.xyz + u_xlat16_2.xyz;
    u_xlat16_6.xyz = (-u_xlat16_4.xyz) + u_xlat16_2.xyz;
    u_xlat6.xyz = vs_COLOR0.www * u_xlat16_6.xyz + u_xlat16_4.xyz;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat6.xyz);
    u_xlat16_2.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_2.x = inversesqrt(u_xlat16_2.x);
    u_xlat16_2.xyz = u_xlat1.xyz * u_xlat16_2.xxx;
    SV_Target0.xyz = u_xlat16_2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat6.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat1.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat6.xy = u_xlat6.xy + u_xlat1.xy;
    u_xlat1.xy = (-u_xlat6.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = u_xlat6.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat6.xy = (int(gl_SampleID) != 0) ? u_xlat1.xy : u_xlat6.xy;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat6.xy, 0.0).xyz;
    u_xlat10_6.xyz = textureLod(_SecondaryTex, u_xlat6.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_1.xyz;
    u_xlat1.xyz = (-u_xlat10_6.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat0.xyz = u_xlat10_6.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat1.xyz + u_xlat0.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_6.z;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
vec3 u_xlat4;
mediump vec3 u_xlat16_4;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
lowp vec3 u_xlat10_7;
mediump float u_xlat16_11;
vec2 u_xlat16;
int u_xlati16;
float u_xlat24;
bool u_xlatb24;
float u_xlat25;
mediump float u_xlat16_27;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat16.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat16.xy + u_xlat0.xy;
    u_xlat16.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat16.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat16.x = _MixColorChannel + 0.100000001;
    u_xlati16 = int(u_xlat16.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati16]);
    u_xlat16.x = (-u_xlat16.x) + 1.0;
    u_xlat16.x = u_xlat16.x * u_xlat16_2;
    u_xlat16.x = u_xlat16.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat16.x = min(max(u_xlat16.x, 0.0), 1.0);
#else
    u_xlat16.x = clamp(u_xlat16.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_5.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_3.xyz = u_xlat16.xxx * u_xlat16_5.xyz + u_xlat16_3.xyz;
    u_xlat16_27 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_27 = u_xlat16.x * u_xlat16_27 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_4.xyz) + u_xlat16_3.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_4.xyz;
    u_xlat6.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat6.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat6.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_3.x = dot(u_xlat6.xyz, u_xlat6.xyz);
    u_xlat16_3.x = inversesqrt(u_xlat16_3.x);
    u_xlat16_4.xyz = u_xlat16_3.xxx * u_xlat6.xyz;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_5.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_5.xyz = u_xlat16.xxx * u_xlat16_5.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_5.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb24 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb24){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat24 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat24 = _ZBufferParams.z * u_xlat24 + _ZBufferParams.w;
        u_xlat24 = float(1.0) / u_xlat24;
        u_xlat24 = u_xlat24 + (-vs_TEXCOORD7.w);
        u_xlat24 = abs(u_xlat24) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat24 = min(max(u_xlat24, 0.0), 1.0);
#else
        u_xlat24 = clamp(u_xlat24, 0.0, 1.0);
#endif
        u_xlat24 = sqrt(u_xlat24);
        u_xlat10_7.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_5.xyz = u_xlat10_7.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_11 = u_xlat16_4.y + u_xlat16_4.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_11 = min(max(u_xlat16_11, 0.0), 1.0);
#else
        u_xlat16_11 = clamp(u_xlat16_11, 0.0, 1.0);
#endif
        u_xlat25 = (-u_xlat24) + 1.0;
        u_xlat25 = u_xlat16_11 * u_xlat25 + u_xlat24;
        u_xlat7.xyz = u_xlat0.xyz * vec3(u_xlat25) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat24) * u_xlat7.xyz + u_xlat10_1.xyz;
        u_xlat6.xyz = u_xlat6.xyz * u_xlat16_3.xxx + (-u_xlat16_5.xyz);
        u_xlat4.xyz = vec3(u_xlat24) * u_xlat6.xyz + u_xlat16_5.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_4.xyz = u_xlat4.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_6.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_6.xyz = vec3(_Shininess) * u_xlat16_6.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_27);
    SV_Target0.xyz = u_xlat16_4.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb24 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb24 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb24) ? 0.0 : u_xlat16_6.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_6.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
vec3 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
mediump float u_xlat16_2;
lowp vec4 u_xlat10_2;
mediump vec3 u_xlat16_3;
mediump vec3 u_xlat16_4;
vec3 u_xlat5;
mediump vec3 u_xlat16_5;
vec3 u_xlat6;
mediump vec3 u_xlat16_6;
lowp vec3 u_xlat10_6;
mediump vec3 u_xlat16_7;
vec3 u_xlat8;
lowp vec3 u_xlat10_8;
mediump float u_xlat16_13;
vec2 u_xlat18;
int u_xlati18;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
mediump float u_xlat16_31;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_2 = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_2;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_3.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_3.xy = u_xlat16_3.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_4.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_4.xy = u_xlat16_4.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_4.xyz = (-u_xlat16_3.xyz) + u_xlat16_4.xyz;
    u_xlat16_4.xyz = u_xlat18.xxx * u_xlat16_4.xyz + u_xlat16_3.xyz;
    u_xlat16_31 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_31 = u_xlat18.x * u_xlat16_31 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_4.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_4.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_4.xyz);
    u_xlat16_4.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_4.x = inversesqrt(u_xlat16_4.x);
    u_xlat16_5.xyz = u_xlat1.xyz * u_xlat16_4.xxx;
    u_xlat10_6.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_6.xyz);
    u_xlat16_7.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat10_6.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_7.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat6.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat6.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_8.xyz = texture(_CameraDepthBlendNormTexture, u_xlat6.xy).xyz;
        u_xlat16_7.xyz = u_xlat10_8.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_6.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat6.xy).xyz;
        u_xlat16_13 = u_xlat16_5.y + u_xlat16_5.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_13 = min(max(u_xlat16_13, 0.0), 1.0);
#else
        u_xlat16_13 = clamp(u_xlat16_13, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_13 * u_xlat28 + u_xlat27;
        u_xlat8.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_6.xyz);
        u_xlat6.xyz = vec3(u_xlat27) * u_xlat8.xyz + u_xlat10_6.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_4.xxx + (-u_xlat16_7.xyz);
        u_xlat5.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_7.xyz;
        u_xlat16_6.xyz = u_xlat6.xyz;
        u_xlat16_5.xyz = u_xlat5.xyz;
    } else {
        u_xlat16_6.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_6.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_31);
    SV_Target0.xyz = u_xlat16_5.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_7.xyz;
    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat16_6.xxx;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat2.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_7.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_7.xyz;
    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat16_6.xxx;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_1.xyz;
        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat16_8.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_2.xyz = vec3(_Shininess) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_2.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_2.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_2.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_2.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_2.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_7.xyz;
    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_6.xyz = u_xlat2.xyz * u_xlat16_6.xxx;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat2.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_7.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_7.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_7.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_6.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_8.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat16_1.xyz = (-u_xlat16_7.xyz) + u_xlat16_6.xyz;
    u_xlat1.xyz = vs_COLOR0.www * u_xlat16_1.xyz + u_xlat16_7.xyz;
    u_xlat2.x = dot(vs_TEXCOORD2.xyz, u_xlat1.xyz);
    u_xlat2.y = dot(vs_TEXCOORD3.xyz, u_xlat1.xyz);
    u_xlat2.z = dot(vs_TEXCOORD4.xyz, u_xlat1.xyz);
    u_xlat16_6.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat2.xyz * u_xlat16_6.xxx;
    u_xlat10_1.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat3.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul);
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_1.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_1.xyz;
    u_xlat0.xyz = (-u_xlat10_0.xyw) * vec3(_SecondaryTexMul) + u_xlat16_8.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat3.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat1.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat1.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat1.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_1.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat1.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_1.xyz);
        u_xlat1.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_1.xyz;
        u_xlat2.xyz = u_xlat2.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat16_8.xyz;
        u_xlat16_1.xyz = u_xlat1.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_1.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_1.xyz * _Color.xyz;
    u_xlat16_2.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_2.xyz = vec3(_Shininess) * u_xlat16_2.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_2.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_2.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	vec4 _ZBufferParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	float _DepthBiasScaled;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _BumpScale;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	float _SecondaryBumpScale;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform 	mediump vec4 _AOColor;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _BumpMap;
uniform lowp sampler2D _SecondaryBumpMap;
uniform lowp sampler2D _SecondaryTex;
uniform highp sampler2D _CameraDepthBlendTexture;
uniform lowp sampler2D _CameraDepthBlendNormTexture;
uniform lowp sampler2D _CameraDepthBlendDiffTexture;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec4 vs_TEXCOORD2;
in highp vec4 vs_TEXCOORD3;
in highp vec4 vs_TEXCOORD4;
in highp vec4 vs_TEXCOORD7;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
mediump vec3 u_xlat16_0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec4 u_xlat10_1;
bvec2 u_xlatb1;
vec4 u_xlat2;
mediump vec3 u_xlat16_2;
lowp vec4 u_xlat10_2;
bvec4 u_xlatb2;
vec3 u_xlat3;
lowp vec3 u_xlat10_3;
vec3 u_xlat4;
vec3 u_xlat5;
mediump vec3 u_xlat16_6;
vec3 u_xlat7;
mediump vec3 u_xlat16_7;
mediump vec3 u_xlat16_8;
float u_xlat9;
bool u_xlatb9;
vec3 u_xlat10;
vec3 u_xlat11;
bvec3 u_xlatb11;
float u_xlat12;
mediump float u_xlat16_15;
vec2 u_xlat18;
int u_xlati18;
vec2 u_xlat19;
bvec2 u_xlatb19;
vec2 u_xlat20;
float u_xlat21;
float u_xlat27;
bool u_xlatb27;
float u_xlat28;
bool u_xlatb28;
float u_xlat29;
mediump float u_xlat16_33;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat18.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat18.x = dot(u_xlat18.xy, u_xlat18.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat18.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat9 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat9 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb9 = !!(256.0<u_xlat0.x);
#else
        u_xlatb9 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb9)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat2.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat19.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat3.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb19.xy = lessThan(u_xlat19.xyxy, u_xlat3.xyxy).xy;
        u_xlatb19.x = u_xlatb19.y || u_xlatb19.x;
        u_xlat2.xy = _SecondaryTex_TexelSize.zw;
        u_xlat0 = (u_xlatb19.x) ? u_xlat2 : u_xlat0;
        u_xlat1.xy = (u_xlatb19.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat2.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
        u_xlat19.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat19.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat2.xy = _DetailMask_TexelSize.zw;
        u_xlat0 = (u_xlatb1.x) ? u_xlat2 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
            u_xlat1.zw = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
            u_xlat11.x = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat2.x = max(u_xlat11.x, u_xlat2.x);
            u_xlat2.x = log2(u_xlat2.x);
            u_xlat2.x = u_xlat2.x * 0.5;
            u_xlat2.x = max(u_xlat2.x, 0.0);
            u_xlat2.x = u_xlat2.x + 1.0;
            u_xlat11.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat1 = u_xlat1 * u_xlat11.xxxx;
            u_xlat1 = u_xlat1 / u_xlat2.xxxx;
            u_xlat10.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
            u_xlat10.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat2.xy = sqrt(u_xlat10.zx);
            u_xlat10.z = inversesqrt(u_xlat10.z);
            u_xlat10.x = inversesqrt(u_xlat10.x);
            u_xlat1.xz = u_xlat10.xz * abs(u_xlat1.xz);
            u_xlat1.x = u_xlat1.x * u_xlat1.z;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat10.x = u_xlat2.y * u_xlat2.x;
            u_xlat19.x = u_xlat1.x * u_xlat10.x;
            u_xlat2.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
            u_xlat28 = fract((-u_xlat2.x));
            u_xlat28 = u_xlat28 + 0.5;
            u_xlat28 = floor(u_xlat28);
            u_xlat2.xy = fract(u_xlat2.xy);
            u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
            u_xlat2.xy = floor(u_xlat2.xy);
            u_xlat28 = u_xlat28 + (-u_xlat2.x);
            u_xlat28 = u_xlat28 * u_xlat2.y + u_xlat2.x;
            u_xlat2.x = (-u_xlat10.x) * u_xlat1.x + 1.0;
            u_xlat11.xyz = (-vec3(u_xlat28)) + vec3(0.5, 0.0, 1.0);
            u_xlat3.xyz = u_xlat2.xxx * u_xlat11.xyz + vec3(u_xlat28);
            u_xlatb2.xy = lessThan(u_xlat19.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
            u_xlat4.xyz = vec3(u_xlat28) * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat10.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat1.xyz = u_xlat1.xxx * u_xlat11.zyy + vec3(u_xlat28);
            u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
            u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
        } else {
#ifdef UNITY_ADRENO_ES3
            u_xlatb28 = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb28 = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb28){
                u_xlat2 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                u_xlat3.xy = dFdx(u_xlat2.xy);
                u_xlat2.xy = dFdy(u_xlat2.xy);
                u_xlat28 = dot(u_xlat3.xy, u_xlat3.xy);
                u_xlat21 = dot(u_xlat2.xy, u_xlat2.xy);
                u_xlat28 = max(u_xlat28, u_xlat21);
                u_xlat28 = log2(u_xlat28);
                u_xlat28 = u_xlat28 * 0.5;
                u_xlat28 = max(u_xlat28, 0.0);
                u_xlat28 = u_xlat28 + 1.0;
                u_xlat21 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat3.xy = vec2(u_xlat21) * u_xlat3.xy;
                u_xlat2.xy = u_xlat2.xy * vec2(u_xlat21);
                u_xlat3.xy = u_xlat3.xy / vec2(u_xlat28);
                u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                u_xlat28 = dot(abs(u_xlat3.xy), abs(u_xlat3.xy));
                u_xlat11.x = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                u_xlat12 = sqrt(u_xlat28);
                u_xlat21 = sqrt(u_xlat11.x);
                u_xlat28 = inversesqrt(u_xlat28);
                u_xlat28 = u_xlat28 * abs(u_xlat3.x);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat2.x = u_xlat11.x * abs(u_xlat2.x);
                u_xlat28 = u_xlat28 * u_xlat2.x;
                u_xlat28 = (-u_xlat28) * u_xlat28 + 1.0;
                u_xlat28 = sqrt(u_xlat28);
                u_xlat2.x = u_xlat21 * u_xlat12;
                u_xlat11.x = u_xlat28 * u_xlat2.x;
                u_xlat3.x = fract((-u_xlat2.z));
                u_xlat3.x = u_xlat3.x + 0.5;
                u_xlat3.x = floor(u_xlat3.x);
                u_xlat20.xy = fract(u_xlat2.zw);
                u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                u_xlat20.xy = floor(u_xlat20.xy);
                u_xlat3.x = (-u_xlat20.x) + u_xlat3.x;
                u_xlat20.x = u_xlat3.x * u_xlat20.y + u_xlat20.x;
                u_xlat29 = (-u_xlat2.x) * u_xlat28 + 1.0;
                u_xlat3.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = vec3(u_xlat29) * u_xlat3.xyz + u_xlat20.xxx;
                u_xlatb11.xz = lessThan(u_xlat11.xxxx, vec4(1.0, 0.0, 2.0, 2.0)).xz;
                u_xlat5.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                u_xlat28 = u_xlat2.x * u_xlat28 + -4.0;
                u_xlat28 = exp2(u_xlat28);
                u_xlat28 = u_xlat28 + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat28 = min(max(u_xlat28, 0.0), 1.0);
#else
                u_xlat28 = clamp(u_xlat28, 0.0, 1.0);
#endif
                u_xlat3.xyz = vec3(u_xlat28) * u_xlat3.zyy + u_xlat20.xxx;
                u_xlat2.xzw = (u_xlatb11.z) ? u_xlat5.xyz : u_xlat3.xyz;
                u_xlat1.xyz = (u_xlatb11.x) ? u_xlat4.xyz : u_xlat2.xzw;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb28 = !!(u_xlat0.x>=4096.0);
#else
                u_xlatb28 = u_xlat0.x>=4096.0;
#endif
                if(u_xlatb28){
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat18.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat2.x = fract((-u_xlat18.x));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat18.xy);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                } else {
                    u_xlat0 = vs_TEXCOORD0.xyxy * vec4(4096.0, 4096.0, 3.0, 3.0);
                    u_xlat2.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat28 = dot(u_xlat2.xy, u_xlat2.xy);
                    u_xlat20.x = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat28 = max(u_xlat28, u_xlat20.x);
                    u_xlat28 = log2(u_xlat28);
                    u_xlat28 = u_xlat28 * 0.5;
                    u_xlat28 = max(u_xlat28, 0.0);
                    u_xlat28 = u_xlat28 + 1.0;
                    u_xlat20.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat2.xy = u_xlat20.xx * u_xlat2.xy;
                    u_xlat0.xy = u_xlat0.xy * u_xlat20.xx;
                    u_xlat2.xy = u_xlat2.xy / vec2(u_xlat28);
                    u_xlat0.xy = u_xlat0.xy / vec2(u_xlat28);
                    u_xlat28 = dot(abs(u_xlat2.xy), abs(u_xlat2.xy));
                    u_xlat9 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat11.x = sqrt(u_xlat28);
                    u_xlat20.x = sqrt(u_xlat9);
                    u_xlat28 = inversesqrt(u_xlat28);
                    u_xlat28 = u_xlat28 * abs(u_xlat2.x);
                    u_xlat9 = inversesqrt(u_xlat9);
                    u_xlat0.x = u_xlat9 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat28;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat9 = u_xlat20.x * u_xlat11.x;
                    u_xlat28 = u_xlat0.x * u_xlat9;
                    u_xlat2.x = fract((-u_xlat0.z));
                    u_xlat2.x = u_xlat2.x + 0.5;
                    u_xlat2.x = floor(u_xlat2.x);
                    u_xlat18.xy = fract(u_xlat0.zw);
                    u_xlat18.xy = u_xlat18.xy + vec2(0.5, 0.5);
                    u_xlat18.xy = floor(u_xlat18.xy);
                    u_xlat2.x = (-u_xlat18.x) + u_xlat2.x;
                    u_xlat18.x = u_xlat2.x * u_xlat18.y + u_xlat18.x;
                    u_xlat27 = (-u_xlat9) * u_xlat0.x + 1.0;
                    u_xlat2.xyz = (-u_xlat18.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = vec3(u_xlat27) * u_xlat2.xyz + u_xlat18.xxx;
                    u_xlatb2.xw = lessThan(vec4(u_xlat28), vec4(1.0, 0.0, 0.0, 2.0)).xw;
                    u_xlat4.xyz = u_xlat18.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat9 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat2.zyy + u_xlat18.xxx;
                    u_xlat0.xyz = (u_xlatb2.w) ? u_xlat4.xyz : u_xlat0.xyz;
                    u_xlat1.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat1.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat0.xy = dFdx(vs_TEXCOORD0.xy);
    u_xlat18.xy = dFdy(vs_TEXCOORD0.xy);
    u_xlat0.xy = u_xlat18.xy + u_xlat0.xy;
    u_xlat18.xy = (-u_xlat0.xy) * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = u_xlat0.xy * vec2(0.25, 0.25) + vs_TEXCOORD0.xy;
    u_xlat0.xy = (int(gl_SampleID) != 0) ? u_xlat18.xy : u_xlat0.xy;
    u_xlat10_1 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat18.x = _MixColorChannel + 0.100000001;
    u_xlati18 = int(u_xlat18.x);
    u_xlat16_6.x = dot(u_xlat10_1, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati18]);
    u_xlat18.x = (-u_xlat18.x) + 1.0;
    u_xlat18.x = u_xlat18.x * u_xlat16_6.x;
    u_xlat18.x = u_xlat18.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat18.x = min(max(u_xlat18.x, 0.0), 1.0);
#else
    u_xlat18.x = clamp(u_xlat18.x, 0.0, 1.0);
#endif
    u_xlat10_1 = texture(_BumpMap, vs_TEXCOORD0.xy);
    u_xlat10_2 = texture(_SecondaryBumpMap, vs_TEXCOORD0.xy);
    u_xlat16_6.xyz = u_xlat10_1.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_6.xy = u_xlat16_6.xy * vec2(vec2(_BumpScale, _BumpScale));
    u_xlat16_7.xyz = u_xlat10_2.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
    u_xlat16_7.xy = u_xlat16_7.xy * vec2(vec2(_SecondaryBumpScale, _SecondaryBumpScale));
    u_xlat16_7.xyz = (-u_xlat16_6.xyz) + u_xlat16_7.xyz;
    u_xlat16_6.xyz = u_xlat18.xxx * u_xlat16_7.xyz + u_xlat16_6.xyz;
    u_xlat16_33 = (-u_xlat10_1.w) + u_xlat10_2.w;
    u_xlat16_33 = u_xlat18.x * u_xlat16_33 + u_xlat10_1.w;
    u_xlat1.x = dot(vs_TEXCOORD2.xyz, u_xlat16_6.xyz);
    u_xlat1.y = dot(vs_TEXCOORD3.xyz, u_xlat16_6.xyz);
    u_xlat1.z = dot(vs_TEXCOORD4.xyz, u_xlat16_6.xyz);
    u_xlat16_6.x = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat16_6.x = inversesqrt(u_xlat16_6.x);
    u_xlat16_7.xyz = u_xlat1.xyz * u_xlat16_6.xxx;
    u_xlat10_2.xyz = textureLod(_MainTex, u_xlat0.xy, 0.0).xyz;
    u_xlat10_0.xyw = textureLod(_SecondaryTex, u_xlat0.xy, 0.0).xyz;
    u_xlat16_8.xyz = u_xlat10_0.xyw * vec3(_SecondaryTexMul) + (-u_xlat10_2.xyz);
    u_xlat16_8.xyz = u_xlat18.xxx * u_xlat16_8.xyz + u_xlat10_2.xyz;
    u_xlat16_0.xyz = (-_AOColor.xyz) + vec3(1.0, 1.0, 1.0);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat16_0.xyz + _AOColor.xyz;
    u_xlat0.xyz = u_xlat0.xyz * u_xlat16_8.xyz;
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vs_TEXCOORD7.w<100.0);
#else
    u_xlatb27 = vs_TEXCOORD7.w<100.0;
#endif
    if(u_xlatb27){
        u_xlat2.xy = vs_TEXCOORD7.xy / vs_TEXCOORD7.ww;
        u_xlat27 = texture(_CameraDepthBlendTexture, u_xlat2.xy).x;
        u_xlat27 = _ZBufferParams.z * u_xlat27 + _ZBufferParams.w;
        u_xlat27 = float(1.0) / u_xlat27;
        u_xlat27 = u_xlat27 + (-vs_TEXCOORD7.w);
        u_xlat27 = abs(u_xlat27) * _DepthBiasScaled;
#ifdef UNITY_ADRENO_ES3
        u_xlat27 = min(max(u_xlat27, 0.0), 1.0);
#else
        u_xlat27 = clamp(u_xlat27, 0.0, 1.0);
#endif
        u_xlat27 = sqrt(u_xlat27);
        u_xlat10_3.xyz = texture(_CameraDepthBlendNormTexture, u_xlat2.xy).xyz;
        u_xlat16_8.xyz = u_xlat10_3.xyz * vec3(2.0, 2.0, 2.0) + vec3(-1.0, -1.0, -1.0);
        u_xlat10_2.xyz = texture(_CameraDepthBlendDiffTexture, u_xlat2.xy).xyz;
        u_xlat16_15 = u_xlat16_7.y + u_xlat16_7.y;
#ifdef UNITY_ADRENO_ES3
        u_xlat16_15 = min(max(u_xlat16_15, 0.0), 1.0);
#else
        u_xlat16_15 = clamp(u_xlat16_15, 0.0, 1.0);
#endif
        u_xlat28 = (-u_xlat27) + 1.0;
        u_xlat28 = u_xlat16_15 * u_xlat28 + u_xlat27;
        u_xlat3.xyz = u_xlat0.xyz * vec3(u_xlat28) + (-u_xlat10_2.xyz);
        u_xlat2.xyz = vec3(u_xlat27) * u_xlat3.xyz + u_xlat10_2.xyz;
        u_xlat1.xyz = u_xlat1.xyz * u_xlat16_6.xxx + (-u_xlat16_8.xyz);
        u_xlat7.xyz = vec3(u_xlat27) * u_xlat1.xyz + u_xlat16_8.xyz;
        u_xlat16_2.xyz = u_xlat2.xyz;
        u_xlat16_7.xyz = u_xlat7.xyz;
    } else {
        u_xlat16_2.xyz = u_xlat0.xyz;
    //ENDIF
    }
    u_xlat0.xyz = u_xlat16_2.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.w = sqrt(u_xlat16_33);
    SV_Target0.xyz = u_xlat16_7.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb27 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb27 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb27) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat1 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat0.xyz = hlslcc_mtx4x4unity_ObjectToWorld[3].xyz * in_POSITION0.www + u_xlat0.xyz;
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    vs_TEXCOORD2.w = u_xlat0.x;
    u_xlat2.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * hlslcc_mtx4x4unity_ObjectToWorld[1].yzx;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = hlslcc_mtx4x4unity_ObjectToWorld[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat0.y;
    vs_TEXCOORD4.w = u_xlat0.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 unity_WorldTransformParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec4 in_TANGENT0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec4 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD3;
out highp vec4 vs_TEXCOORD4;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
vec3 u_xlat3;
vec3 u_xlat4;
vec3 u_xlat5;
float u_xlat17;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat2 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat5.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3].xyz * in_POSITION0.www + u_xlat1.xyz;
    u_xlat1 = u_xlat2.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat2.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat2.zzzz + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat2.wwww + u_xlat1;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat17 = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat17 = inversesqrt(u_xlat17);
    u_xlat2.xyz = vec3(u_xlat17) * u_xlat2.xyz;
    u_xlat3.xyz = in_TANGENT0.yyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1].yzx;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0].yzx * in_TANGENT0.xxx + u_xlat3.xyz;
    u_xlat3.xyz = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2].yzx * in_TANGENT0.zzz + u_xlat3.xyz;
    u_xlat0.x = dot(u_xlat3.xyz, u_xlat3.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    u_xlat3.xyz = u_xlat0.xxx * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.xyz * u_xlat3.xyz;
    u_xlat4.xyz = u_xlat2.zxy * u_xlat3.yzx + (-u_xlat4.xyz);
    u_xlat0.x = in_TANGENT0.w * unity_WorldTransformParams.w;
    u_xlat4.xyz = u_xlat0.xxx * u_xlat4.xyz;
    vs_TEXCOORD2.y = u_xlat4.x;
    vs_TEXCOORD2.x = u_xlat3.z;
    vs_TEXCOORD2.z = u_xlat2.y;
    vs_TEXCOORD2.w = u_xlat5.x;
    vs_TEXCOORD3.x = u_xlat3.x;
    vs_TEXCOORD4.x = u_xlat3.y;
    vs_TEXCOORD3.z = u_xlat2.z;
    vs_TEXCOORD4.z = u_xlat2.x;
    vs_TEXCOORD3.w = u_xlat5.y;
    vs_TEXCOORD4.w = u_xlat5.z;
    vs_TEXCOORD3.y = u_xlat4.y;
    vs_TEXCOORD4.y = u_xlat4.z;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USINGDEPTHBLEND_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" "_USEASAO_ON" "_USINGDEPTHBLEND_ON" }
""
}
}
}
 Pass {
  Name "HYBRIDDEFERRED"
  LOD 400
  Tags { "DebugView" = "On" "LIGHTMODE" = "HYBRIDDEFERRED" "RenderType" = "Opaque" "ShaderLod" = "true" }
  GpuProgramID 109135
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = texture(_MainTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat10_1.xyz = texture(_SecondaryTex, vs_TEXCOORD0.xy, -1.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec3 u_xlat0;
lowp vec4 u_xlat10_0;
bool u_xlatb0;
vec3 u_xlat1;
lowp vec3 u_xlat10_1;
int u_xlati1;
mediump vec3 u_xlat16_2;
mediump vec3 u_xlat16_3;
lowp vec3 u_xlat10_3;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
    SV_Target0.w = 0.0;
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_2.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_2.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_3.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat16_2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_3.xyz);
    u_xlat16_2.xyz = u_xlat0.xxx * u_xlat16_2.xyz + u_xlat10_3.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_2.xyz;
    u_xlat1.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat1.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
#ifdef UNITY_ADRENO_ES3
    u_xlatb0 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb0 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    u_xlat16_3.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_3.xyz = vec3(_Shininess) * u_xlat16_3.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target2.z = (u_xlatb0) ? 0.0 : u_xlat16_3.z;
    SV_Target2.xy = u_xlat16_3.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
vec4 ImmCB_0_0_0[4];
uniform 	vec4 _ScreenParams;
uniform 	mediump vec4 _SpecColor;
uniform 	mediump float _ElementViewEleDrawOn;
uniform 	vec4 unity_DebugViewInfo;
uniform 	float _LODIndex;
uniform 	float _DebugTexelDensityScreenSize;
uniform 	float _DebugTexelDensityViewMode;
uniform 	vec4 _BumpMap_TexelSize;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _MainTex_TexelSize;
uniform 	mediump float _Shininess;
uniform 	vec4 _Color;
uniform 	mediump float _SSAO_Intensity;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _SecondaryTex_TexelSize;
uniform 	vec4 _SecondaryBumpMap_TexelSize;
uniform 	vec4 _DetailMask_ST;
uniform 	vec4 _DetailMask_TexelSize;
uniform 	float _SecondaryTexMul;
uniform 	mediump float _DetailMaskScale;
uniform 	float _MixColorChannel;
uniform lowp sampler2D _MainTex;
uniform lowp sampler2D _DetailMask;
uniform lowp sampler2D _SecondaryTex;
in highp vec4 vs_TEXCOORD0;
in highp vec4 vs_TEXCOORD1;
in highp vec3 vs_TEXCOORD2;
in highp vec4 vs_COLOR0;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
vec4 u_xlat0;
lowp vec4 u_xlat10_0;
bvec3 u_xlatb0;
vec4 u_xlat1;
mediump vec3 u_xlat16_1;
lowp vec3 u_xlat10_1;
int u_xlati1;
bvec2 u_xlatb1;
vec4 u_xlat2;
bvec2 u_xlatb2;
vec4 u_xlat3;
bvec2 u_xlatb3;
vec4 u_xlat4;
vec3 u_xlat5;
bvec3 u_xlatb5;
vec3 u_xlat6;
bvec2 u_xlatb6;
vec3 u_xlat7;
vec3 u_xlat8;
mediump vec3 u_xlat16_9;
float u_xlat10;
lowp vec3 u_xlat10_10;
bool u_xlatb10;
vec3 u_xlat11;
vec3 u_xlat12;
vec3 u_xlat13;
vec3 u_xlat15;
vec2 u_xlat20;
vec2 u_xlat21;
bvec2 u_xlatb21;
float u_xlat25;
vec2 u_xlat26;
float u_xlat30;
bool u_xlatb30;
float u_xlat31;
float u_xlat35;
bool u_xlatb35;
void main()
{
	ImmCB_0_0_0[0] = vec4(1.0, 0.0, 0.0, 0.0);
	ImmCB_0_0_0[1] = vec4(0.0, 1.0, 0.0, 0.0);
	ImmCB_0_0_0[2] = vec4(0.0, 0.0, 1.0, 0.0);
	ImmCB_0_0_0[3] = vec4(0.0, 0.0, 0.0, 1.0);
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==5.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==5.0;
#endif
    if(u_xlatb0.x){
        u_xlatb0.xyz = lessThan(vec4(2.9000001, 1.89999998, 0.899999976, 0.0), vec4(_LODIndex)).xyz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 0.0, 1.0);
        u_xlat1 = (u_xlatb0.y) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (u_xlatb0.x) ? vec4(0.0, 1.0, 0.0, 1.0) : u_xlat1;
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==6.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==6.0;
#endif
    if(u_xlatb0.x){
        u_xlat10_0.xyz = texture(_MainTex, vs_TEXCOORD0.xy).xyz;
        SV_Target0.xyz = u_xlat10_0.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==7.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==7.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.x = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = max(u_xlat0.x, 8.0);
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==8.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==8.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.xy = vec2(vs_TEXCOORD0.x * _MainTex_TexelSize.z, vs_TEXCOORD0.y * _MainTex_TexelSize.w);
        u_xlat20.xy = dFdx(u_xlat0.xy);
        u_xlat0.xy = dFdy(u_xlat0.xy);
        u_xlat20.x = dot(u_xlat20.xy, u_xlat20.xy);
        u_xlat0.x = dot(u_xlat0.xy, u_xlat0.xy);
        u_xlat0.x = max(u_xlat0.x, u_xlat20.x);
        u_xlat0.x = log2(u_xlat0.x);
        u_xlat0.x = u_xlat0.x * 0.5;
        u_xlat0.x = max(u_xlat0.x, 0.0);
        u_xlat0.x = u_xlat0.x + 1.0;
        u_xlat10 = max(_MainTex_TexelSize.w, _MainTex_TexelSize.z);
        u_xlat0.x = u_xlat10 / u_xlat0.x;
#ifdef UNITY_ADRENO_ES3
        u_xlatb10 = !!(256.0<u_xlat0.x);
#else
        u_xlatb10 = 256.0<u_xlat0.x;
#endif
        u_xlatb0.xz = greaterThanEqual(vec4(512.0, 0.0, 1024.0, 0.0), u_xlat0.xxxx).xz;
        u_xlat1 = (u_xlatb0.z) ? vec4(1.0, 0.0, 0.0, 1.0) : vec4(0.0, 0.0, 1.0, 1.0);
        u_xlat1 = (u_xlatb0.x) ? vec4(1.0, 1.0, 0.0, 1.0) : u_xlat1;
        u_xlat0 = (bool(u_xlatb10)) ? u_xlat1 : vec4(0.0, 1.0, 0.0, 1.0);
        SV_Target0 = u_xlat0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
#ifdef UNITY_ADRENO_ES3
    u_xlatb0.x = !!(unity_DebugViewInfo.x==51.0);
#else
    u_xlatb0.x = unity_DebugViewInfo.x==51.0;
#endif
    if(u_xlatb0.x){
        u_xlat0.zw = vec2(vs_TEXCOORD0.x + (-_MainTex_ST.z), vs_TEXCOORD0.y + (-_MainTex_ST.w));
        u_xlat1.xy = vec2(_MainTex_ST.x * _MainTex_TexelSize.z, _MainTex_ST.y * _MainTex_TexelSize.w);
        u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat0.xy = _MainTex_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
        u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
        u_xlat3.zw = vec2(vs_TEXCOORD0.x + (-_SecondaryTex_ST.z), vs_TEXCOORD0.y + (-_SecondaryTex_ST.w));
        u_xlat21.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat4.xy = vec2(_SecondaryTex_ST.x * _SecondaryTex_TexelSize.z, _SecondaryTex_ST.y * _SecondaryTex_TexelSize.w);
        u_xlatb21.xy = lessThan(u_xlat21.xyxy, u_xlat4.xyxy).xy;
        u_xlatb21.x = u_xlatb21.y || u_xlatb21.x;
        u_xlat3.xy = _SecondaryTex_TexelSize.zw;
        u_xlat2 = (u_xlatb21.x) ? u_xlat3 : u_xlat2;
        u_xlat1.xy = (u_xlatb21.x) ? _SecondaryTex_ST.xy : u_xlat1.xy;
        u_xlat4.zw = vec2(vs_TEXCOORD1.x + (-_DetailMask_ST.z), vs_TEXCOORD1.y + (-_DetailMask_ST.w));
        u_xlat1.xy = u_xlat1.xy * u_xlat2.xy;
        u_xlat21.xy = vec2(_DetailMask_ST.x * _DetailMask_TexelSize.z, _DetailMask_ST.y * _DetailMask_TexelSize.w);
        u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
        u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
        u_xlat4.xy = _DetailMask_TexelSize.zw;
        u_xlat2 = (u_xlatb1.x) ? u_xlat4 : u_xlat2;
#ifdef UNITY_ADRENO_ES3
        u_xlatb1.x = !!(_DebugTexelDensityViewMode<0.5);
#else
        u_xlatb1.x = _DebugTexelDensityViewMode<0.5;
#endif
        if(u_xlatb1.x){
            u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
            u_xlat5.xy = dFdx(u_xlat1.xy);
            u_xlat1.xy = dFdy(u_xlat1.xy);
            u_xlat25 = dot(u_xlat5.xy, u_xlat5.xy);
            u_xlat35 = dot(u_xlat1.xy, u_xlat1.xy);
            u_xlat25 = max(u_xlat35, u_xlat25);
            u_xlat25 = log2(u_xlat25);
            u_xlat25 = u_xlat25 * 0.5;
            u_xlat25 = max(u_xlat25, 0.0);
            u_xlat25 = u_xlat25 + 1.0;
            u_xlat35 = _ScreenParams.x / _DebugTexelDensityScreenSize;
            u_xlat5.xy = vec2(u_xlat35) * u_xlat5.xy;
            u_xlat1.xy = u_xlat1.xy * vec2(u_xlat35);
            u_xlat5.xy = u_xlat5.xy / vec2(u_xlat25);
            u_xlat1.xy = u_xlat1.xy / vec2(u_xlat25);
            u_xlat15.x = dot(abs(u_xlat5.xy), abs(u_xlat5.xy));
            u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
            u_xlat25 = sqrt(u_xlat15.x);
            u_xlat35 = sqrt(u_xlat11.x);
            u_xlat15.x = inversesqrt(u_xlat15.x);
            u_xlat5.x = u_xlat15.x * abs(u_xlat5.x);
            u_xlat11.x = inversesqrt(u_xlat11.x);
            u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
            u_xlat1.x = u_xlat1.x * u_xlat5.x;
            u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
            u_xlat1.x = sqrt(u_xlat1.x);
            u_xlat11.x = u_xlat35 * u_xlat25;
            u_xlat5.x = u_xlat1.x * u_xlat11.x;
            u_xlat15.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
            u_xlat35 = fract((-u_xlat15.x));
            u_xlat15.z = u_xlat35 + 0.5;
            u_xlat15.xy = fract(u_xlat15.xy);
            u_xlat15.xy = u_xlat15.xy + vec2(0.5, 0.5);
            u_xlat15.xyz = floor(u_xlat15.xyz);
            u_xlat35 = (-u_xlat15.x) + u_xlat15.z;
            u_xlat15.x = u_xlat35 * u_xlat15.y + u_xlat15.x;
            u_xlat25 = (-u_xlat11.x) * u_xlat1.x + 1.0;
            u_xlat6.xyz = (-u_xlat15.xxx) + vec3(0.5, 0.0, 1.0);
            u_xlat7.xyz = vec3(u_xlat25) * u_xlat6.xyz + u_xlat15.xxx;
            u_xlatb5.xz = lessThan(u_xlat5.xxxx, vec4(1.0, 0.0, 2.0, 0.0)).xz;
            u_xlat8.xyz = u_xlat15.xxx * vec3(0.0, 1.0, 0.0);
            u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
            u_xlat1.x = exp2(u_xlat1.x);
            u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
            u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
            u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
            u_xlat6.xyz = u_xlat1.xxx * u_xlat6.zyy + u_xlat15.xxx;
            u_xlat15.xyz = (u_xlatb5.z) ? u_xlat8.xyz : u_xlat6.xyz;
            u_xlat5.xyz = (u_xlatb5.x) ? u_xlat7.xyz : u_xlat15.xyz;
        } else {
            u_xlat1.xy = vec2(_BumpMap_TexelSize.z * _MainTex_ST.x, _BumpMap_TexelSize.w * _MainTex_ST.y);
            u_xlatb1.xy = lessThan(vec4(1.0, 1.0, 0.0, 0.0), u_xlat1.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0.xy = _BumpMap_TexelSize.zw;
            u_xlat0 = (u_xlatb1.x) ? u_xlat0 : vec4(1.0, 1.0, 0.0, 0.0);
            u_xlat1.xy = (u_xlatb1.x) ? _MainTex_ST.xy : vec2(1.0, 1.0);
            u_xlat6.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlat26.xy = vec2(_SecondaryTex_ST.x * _SecondaryBumpMap_TexelSize.z, _SecondaryTex_ST.y * _SecondaryBumpMap_TexelSize.w);
            u_xlatb6.xy = lessThan(u_xlat6.xyxx, u_xlat26.xyxx).xy;
            u_xlatb35 = u_xlatb6.y || u_xlatb6.x;
            u_xlat3.xy = _SecondaryBumpMap_TexelSize.zw;
            u_xlat0 = (bool(u_xlatb35)) ? u_xlat3 : u_xlat0;
            u_xlat1.xy = (bool(u_xlatb35)) ? _SecondaryTex_ST.xy : u_xlat1.xy;
            u_xlat1.xy = u_xlat0.xy * u_xlat1.xy;
            u_xlatb1.xy = lessThan(u_xlat1.xyxx, u_xlat21.xyxx).xy;
            u_xlatb1.x = u_xlatb1.y || u_xlatb1.x;
            u_xlat0 = (u_xlatb1.x) ? u_xlat4 : u_xlat0;
#ifdef UNITY_ADRENO_ES3
            u_xlatb1.x = !!(_DebugTexelDensityViewMode<1.5);
#else
            u_xlatb1.x = _DebugTexelDensityViewMode<1.5;
#endif
            if(u_xlatb1.x){
                u_xlat1.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                u_xlat1.zw = dFdx(u_xlat1.xy);
                u_xlat1.xy = dFdy(u_xlat1.xy);
                u_xlat3.x = dot(u_xlat1.zw, u_xlat1.zw);
                u_xlat13.x = dot(u_xlat1.xy, u_xlat1.xy);
                u_xlat3.x = max(u_xlat13.x, u_xlat3.x);
                u_xlat3.x = log2(u_xlat3.x);
                u_xlat3.x = u_xlat3.x * 0.5;
                u_xlat3.x = max(u_xlat3.x, 0.0);
                u_xlat3.x = u_xlat3.x + 1.0;
                u_xlat13.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                u_xlat1 = u_xlat1 * u_xlat13.xxxx;
                u_xlat1 = u_xlat1 / u_xlat3.xxxx;
                u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                u_xlat3.xy = sqrt(u_xlat11.zx);
                u_xlat11.z = inversesqrt(u_xlat11.z);
                u_xlat11.x = inversesqrt(u_xlat11.x);
                u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                u_xlat1.x = u_xlat1.x * u_xlat1.z;
                u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                u_xlat1.x = sqrt(u_xlat1.x);
                u_xlat11.x = u_xlat3.y * u_xlat3.x;
                u_xlat21.x = u_xlat1.x * u_xlat11.x;
                u_xlat3.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                u_xlat31 = fract((-u_xlat3.x));
                u_xlat31 = u_xlat31 + 0.5;
                u_xlat31 = floor(u_xlat31);
                u_xlat3.xy = fract(u_xlat3.xy);
                u_xlat3.xy = u_xlat3.xy + vec2(0.5, 0.5);
                u_xlat3.xy = floor(u_xlat3.xy);
                u_xlat31 = u_xlat31 + (-u_xlat3.x);
                u_xlat31 = u_xlat31 * u_xlat3.y + u_xlat3.x;
                u_xlat3.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                u_xlat13.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                u_xlat4.xyz = u_xlat3.xxx * u_xlat13.xyz + vec3(u_xlat31);
                u_xlatb3.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                u_xlat6.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                u_xlat1.x = exp2(u_xlat1.x);
                u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                u_xlat1.xyz = u_xlat1.xxx * u_xlat13.zyy + vec3(u_xlat31);
                u_xlat1.xyz = (u_xlatb3.y) ? u_xlat6.xyz : u_xlat1.xyz;
                u_xlat5.xyz = (u_xlatb3.x) ? u_xlat4.xyz : u_xlat1.xyz;
            } else {
#ifdef UNITY_ADRENO_ES3
                u_xlatb1.x = !!(u_xlat2.x>=u_xlat0.x);
#else
                u_xlatb1.x = u_xlat2.x>=u_xlat0.x;
#endif
                if(u_xlatb1.x){
                    u_xlat1.xy = vec2(u_xlat2.x * u_xlat2.z, u_xlat2.y * u_xlat2.w);
                    u_xlat1.zw = dFdx(u_xlat1.xy);
                    u_xlat1.xy = dFdy(u_xlat1.xy);
                    u_xlat2.x = dot(u_xlat1.zw, u_xlat1.zw);
                    u_xlat12.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat2.x = max(u_xlat12.x, u_xlat2.x);
                    u_xlat2.x = log2(u_xlat2.x);
                    u_xlat2.x = u_xlat2.x * 0.5;
                    u_xlat2.x = max(u_xlat2.x, 0.0);
                    u_xlat2.x = u_xlat2.x + 1.0;
                    u_xlat12.x = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1 = u_xlat1 * u_xlat12.xxxx;
                    u_xlat1 = u_xlat1 / u_xlat2.xxxx;
                    u_xlat11.z = dot(abs(u_xlat1.zw), abs(u_xlat1.zw));
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat2.xy = sqrt(u_xlat11.zx);
                    u_xlat11.z = inversesqrt(u_xlat11.z);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.xz = u_xlat11.xz * abs(u_xlat1.xz);
                    u_xlat1.x = u_xlat1.x * u_xlat1.z;
                    u_xlat1.x = (-u_xlat1.x) * u_xlat1.x + 1.0;
                    u_xlat1.x = sqrt(u_xlat1.x);
                    u_xlat11.x = u_xlat2.y * u_xlat2.x;
                    u_xlat21.x = u_xlat1.x * u_xlat11.x;
                    u_xlat2.xy = vec2(u_xlat2.z * float(3.0), u_xlat2.w * float(3.0));
                    u_xlat31 = fract((-u_xlat2.x));
                    u_xlat31 = u_xlat31 + 0.5;
                    u_xlat31 = floor(u_xlat31);
                    u_xlat2.xy = fract(u_xlat2.xy);
                    u_xlat2.xy = u_xlat2.xy + vec2(0.5, 0.5);
                    u_xlat2.xy = floor(u_xlat2.xy);
                    u_xlat31 = u_xlat31 + (-u_xlat2.x);
                    u_xlat31 = u_xlat31 * u_xlat2.y + u_xlat2.x;
                    u_xlat2.x = (-u_xlat11.x) * u_xlat1.x + 1.0;
                    u_xlat12.xyz = (-vec3(u_xlat31)) + vec3(0.5, 0.0, 1.0);
                    u_xlat3.xyz = u_xlat2.xxx * u_xlat12.xyz + vec3(u_xlat31);
                    u_xlatb2.xy = lessThan(u_xlat21.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat4.xyz = vec3(u_xlat31) * vec3(0.0, 1.0, 0.0);
                    u_xlat1.x = u_xlat11.x * u_xlat1.x + -4.0;
                    u_xlat1.x = exp2(u_xlat1.x);
                    u_xlat1.x = u_xlat1.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat1.x = min(max(u_xlat1.x, 0.0), 1.0);
#else
                    u_xlat1.x = clamp(u_xlat1.x, 0.0, 1.0);
#endif
                    u_xlat1.xyz = u_xlat1.xxx * u_xlat12.zyy + vec3(u_xlat31);
                    u_xlat1.xyz = (u_xlatb2.y) ? u_xlat4.xyz : u_xlat1.xyz;
                    u_xlat5.xyz = (u_xlatb2.x) ? u_xlat3.xyz : u_xlat1.xyz;
                } else {
                    u_xlat0.xy = vec2(u_xlat0.x * u_xlat0.z, u_xlat0.y * u_xlat0.w);
                    u_xlat1.xy = dFdx(u_xlat0.xy);
                    u_xlat0.xy = dFdy(u_xlat0.xy);
                    u_xlat21.x = dot(u_xlat1.xy, u_xlat1.xy);
                    u_xlat31 = dot(u_xlat0.xy, u_xlat0.xy);
                    u_xlat21.x = max(u_xlat31, u_xlat21.x);
                    u_xlat21.x = log2(u_xlat21.x);
                    u_xlat21.x = u_xlat21.x * 0.5;
                    u_xlat21.x = max(u_xlat21.x, 0.0);
                    u_xlat21.x = u_xlat21.x + 1.0;
                    u_xlat31 = _ScreenParams.x / _DebugTexelDensityScreenSize;
                    u_xlat1.xy = vec2(u_xlat31) * u_xlat1.xy;
                    u_xlat0.xy = u_xlat0.xy * vec2(u_xlat31);
                    u_xlat1.xy = u_xlat1.xy / u_xlat21.xx;
                    u_xlat0.xy = u_xlat0.xy / u_xlat21.xx;
                    u_xlat11.x = dot(abs(u_xlat1.xy), abs(u_xlat1.xy));
                    u_xlat10 = dot(abs(u_xlat0.xy), abs(u_xlat0.xy));
                    u_xlat21.x = sqrt(u_xlat11.x);
                    u_xlat31 = sqrt(u_xlat10);
                    u_xlat11.x = inversesqrt(u_xlat11.x);
                    u_xlat1.x = u_xlat11.x * abs(u_xlat1.x);
                    u_xlat10 = inversesqrt(u_xlat10);
                    u_xlat0.x = u_xlat10 * abs(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x * u_xlat1.x;
                    u_xlat0.x = (-u_xlat0.x) * u_xlat0.x + 1.0;
                    u_xlat0.x = sqrt(u_xlat0.x);
                    u_xlat10 = u_xlat31 * u_xlat21.x;
                    u_xlat1.x = u_xlat0.x * u_xlat10;
                    u_xlat20.xy = vec2(u_xlat0.z * float(3.0), u_xlat0.w * float(3.0));
                    u_xlat11.x = fract((-u_xlat20.x));
                    u_xlat11.x = u_xlat11.x + 0.5;
                    u_xlat11.x = floor(u_xlat11.x);
                    u_xlat20.xy = fract(u_xlat20.xy);
                    u_xlat20.xy = u_xlat20.xy + vec2(0.5, 0.5);
                    u_xlat20.xy = floor(u_xlat20.xy);
                    u_xlat11.x = (-u_xlat20.x) + u_xlat11.x;
                    u_xlat20.x = u_xlat11.x * u_xlat20.y + u_xlat20.x;
                    u_xlat30 = (-u_xlat10) * u_xlat0.x + 1.0;
                    u_xlat11.xyz = (-u_xlat20.xxx) + vec3(0.5, 0.0, 1.0);
                    u_xlat2.xyz = vec3(u_xlat30) * u_xlat11.xyz + u_xlat20.xxx;
                    u_xlatb1.xy = lessThan(u_xlat1.xxxx, vec4(1.0, 2.0, 0.0, 0.0)).xy;
                    u_xlat3.xyz = u_xlat20.xxx * vec3(0.0, 1.0, 0.0);
                    u_xlat0.x = u_xlat10 * u_xlat0.x + -4.0;
                    u_xlat0.x = exp2(u_xlat0.x);
                    u_xlat0.x = u_xlat0.x + -0.25;
#ifdef UNITY_ADRENO_ES3
                    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
                    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
                    u_xlat0.xyz = u_xlat0.xxx * u_xlat11.zyy + u_xlat20.xxx;
                    u_xlat0.xyz = (u_xlatb1.y) ? u_xlat3.xyz : u_xlat0.xyz;
                    u_xlat5.xyz = (u_xlatb1.x) ? u_xlat2.xyz : u_xlat0.xyz;
                //ENDIF
                }
            //ENDIF
            }
        //ENDIF
        }
        SV_Target0.xyz = u_xlat5.xyz;
        SV_Target0.w = 1.0;
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(100.0, 102.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.200000003, 0.200000003, 0.200000003, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlatb0.xy = equal(unity_DebugViewInfo.xxxx, vec4(101.0, 103.0, 0.0, 0.0)).xy;
    u_xlatb0.x = u_xlatb0.y || u_xlatb0.x;
    if(u_xlatb0.x){
        SV_Target0 = vec4(0.400000006, 0.400000006, 0.400000006, 0.0);
        SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
        SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
        return;
    //ENDIF
    }
    u_xlat10_0 = texture(_DetailMask, vs_TEXCOORD1.xy, -1.0);
    u_xlat1.x = _MixColorChannel + 0.100000001;
    u_xlati1 = int(u_xlat1.x);
    u_xlat16_9.x = dot(u_xlat10_0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = dot(vs_COLOR0, ImmCB_0_0_0[u_xlati1]);
    u_xlat0.x = (-u_xlat0.x) + 1.0;
    u_xlat0.x = u_xlat0.x * u_xlat16_9.x;
    u_xlat0.x = u_xlat0.x * _DetailMaskScale;
#ifdef UNITY_ADRENO_ES3
    u_xlat0.x = min(max(u_xlat0.x, 0.0), 1.0);
#else
    u_xlat0.x = clamp(u_xlat0.x, 0.0, 1.0);
#endif
    u_xlat10_10.xyz = textureLod(_MainTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat10_1.xyz = textureLod(_SecondaryTex, vs_TEXCOORD0.xy, 0.0).xyz;
    u_xlat2.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul);
    u_xlat16_9.xyz = u_xlat10_1.xyz * vec3(_SecondaryTexMul) + (-u_xlat10_10.xyz);
    u_xlat16_9.xyz = u_xlat0.xxx * u_xlat16_9.xyz + u_xlat10_10.xyz;
    u_xlat0.xyz = (-u_xlat10_1.xyz) * vec3(_SecondaryTexMul) + u_xlat16_9.xyz;
    u_xlat0.xyz = vs_COLOR0.www * u_xlat0.xyz + u_xlat2.xyz;
    u_xlat0.xyz = u_xlat0.xyz * _Color.xyz;
    u_xlat16_1.xyz = _SpecColor.xyz + vec3(-0.0399999991, -0.0399999991, -0.0399999991);
    u_xlat16_1.xyz = vec3(_Shininess) * u_xlat16_1.xyz + vec3(0.0399999991, 0.0399999991, 0.0399999991);
    SV_Target0.xyz = vs_TEXCOORD2.xyz * vec3(0.5, 0.5, 0.5) + vec3(0.5, 0.5, 0.5);
#ifdef UNITY_ADRENO_ES3
    u_xlatb30 = !!(vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn));
#else
    u_xlatb30 = vec4(0.0, 0.0, 0.0, 0.0)!=vec4(_ElementViewEleDrawOn);
#endif
    SV_Target2.z = (u_xlatb30) ? 0.0 : u_xlat16_1.z;
    SV_Target0.w = 0.0;
    SV_Target1.xyz = u_xlat0.xyz;
    SV_Target1.w = _SSAO_Intensity;
    SV_Target2.xy = u_xlat16_1.xy;
    SV_Target2.w = 0.0;
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_WorldToObject[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
vec4 u_xlat0;
vec4 u_xlat1;
float u_xlat7;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    u_xlat0 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    gl_Position = u_xlat0;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat1.x = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[0].xyz);
    u_xlat1.y = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[1].xyz);
    u_xlat1.z = dot(in_NORMAL0.xyz, hlslcc_mtx4x4unity_WorldToObject[2].xyz);
    u_xlat7 = dot(u_xlat1.xyz, u_xlat1.xyz);
    u_xlat7 = inversesqrt(u_xlat7);
    vs_TEXCOORD2.xyz = vec3(u_xlat7) * u_xlat1.xyz;
    u_xlat0.y = u_xlat0.y * _ProjectionParams.x;
    u_xlat1.xzw = u_xlat0.xwy * vec3(0.5, 0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat0.zw;
    vs_TEXCOORD7.xy = u_xlat1.zz + u_xlat1.xw;
    vs_COLOR0 = in_COLOR0;
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 _ProjectionParams;
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
uniform 	vec4 _MainTex_ST;
uniform 	vec4 _SecondaryTex_ST;
uniform 	vec4 _DetailMask_ST;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
in highp vec3 in_NORMAL0;
in highp vec2 in_TEXCOORD0;
in highp vec4 in_COLOR0;
out highp vec4 vs_TEXCOORD0;
out highp vec4 vs_TEXCOORD1;
out highp vec3 vs_TEXCOORD2;
out highp vec4 vs_TEXCOORD7;
out highp vec4 vs_COLOR0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
vec4 u_xlat2;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat1 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat2 = u_xlat1.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat1.xxxx + u_xlat2;
    u_xlat2 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat1.zzzz + u_xlat2;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat1.wwww + u_xlat2;
    gl_Position = u_xlat1;
    vs_TEXCOORD0.xy = in_TEXCOORD0.xy * _MainTex_ST.xy + _MainTex_ST.zw;
    vs_TEXCOORD0.zw = in_TEXCOORD0.xy * _SecondaryTex_ST.xy + _SecondaryTex_ST.zw;
    vs_TEXCOORD1.xy = in_TEXCOORD0.xy * _DetailMask_ST.xy + _DetailMask_ST.zw;
    vs_TEXCOORD1.zw = vec2(0.0, 0.0);
    u_xlat2.x = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[0].xyz);
    u_xlat2.y = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[1].xyz);
    u_xlat2.z = dot(in_NORMAL0.xyz, unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_WorldToObjectArray[2].xyz);
    u_xlat0.x = dot(u_xlat2.xyz, u_xlat2.xyz);
    u_xlat0.x = inversesqrt(u_xlat0.x);
    vs_TEXCOORD2.xyz = u_xlat0.xxx * u_xlat2.xyz;
    u_xlat0.x = u_xlat1.y * _ProjectionParams.x;
    u_xlat0.w = u_xlat0.x * 0.5;
    u_xlat0.xz = u_xlat1.xw * vec2(0.5, 0.5);
    vs_TEXCOORD7.zw = u_xlat1.zw;
    vs_TEXCOORD7.xy = u_xlat0.zz + u_xlat0.xw;
    vs_COLOR0 = in_COLOR0;
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_Target0;
layout(location = 1) out mediump vec4 SV_Target1;
layout(location = 2) out mediump vec4 SV_Target2;
void main()
{
    SV_Target0 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target1 = vec4(0.0, 0.0, 0.0, 0.0);
    SV_Target2 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "LINE_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
SubProgram "gles3 " {
Keywords { "UNITY_DEBUG_VIEW_ON" "INSTANCING_ON" "MSAA_INTERPOLATION" "UNITY_DEBUG_VIEW_SIMPLE_COLOR_ON" }
""
}
}
}
 Pass {
  Name "BUMPSPECULAR"
  LOD 400
  Tags { "LIGHTMODE" = "DepthOnly" "RenderType" = "Opaque" }
  GpuProgramID 145221
Program "vp" {
SubProgram "gles3 " {
"#ifdef VERTEX
#version 300 es

uniform 	vec4 hlslcc_mtx4x4unity_ObjectToWorld[4];
uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
vec4 u_xlat0;
vec4 u_xlat1;
void main()
{
    u_xlat0 = in_POSITION0.yyyy * hlslcc_mtx4x4unity_ObjectToWorld[1];
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[0] * in_POSITION0.xxxx + u_xlat0;
    u_xlat0 = hlslcc_mtx4x4unity_ObjectToWorld[2] * in_POSITION0.zzzz + u_xlat0;
    u_xlat0 = u_xlat0 + hlslcc_mtx4x4unity_ObjectToWorld[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
"#ifdef VERTEX
#version 300 es
#ifndef UNITY_RUNTIME_INSTANCING_ARRAY_SIZE
	#define UNITY_RUNTIME_INSTANCING_ARRAY_SIZE 2
#endif

uniform 	vec4 hlslcc_mtx4x4unity_MatrixVP[4];
uniform 	int unity_BaseInstanceID;
struct unity_Builtins0Array_Type {
	vec4 hlslcc_mtx4x4unity_ObjectToWorldArray[4];
	vec4 hlslcc_mtx4x4unity_WorldToObjectArray[4];
};
layout(std140) uniform UnityInstancing_PerDraw0 {
	unity_Builtins0Array_Type unity_Builtins0Array[UNITY_RUNTIME_INSTANCING_ARRAY_SIZE];
};
in highp vec4 in_POSITION0;
out highp vec2 vs_TEXCOORD0;
flat out highp uint vs_SV_InstanceID0;
vec4 u_xlat0;
int u_xlati0;
vec4 u_xlat1;
void main()
{
    u_xlati0 = gl_InstanceID + unity_BaseInstanceID;
    u_xlati0 = u_xlati0 << 3;
    u_xlat1 = in_POSITION0.yyyy * unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[1];
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[0] * in_POSITION0.xxxx + u_xlat1;
    u_xlat1 = unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[2] * in_POSITION0.zzzz + u_xlat1;
    u_xlat0 = u_xlat1 + unity_Builtins0Array[u_xlati0 / 8].hlslcc_mtx4x4unity_ObjectToWorldArray[3];
    u_xlat1 = u_xlat0.yyyy * hlslcc_mtx4x4unity_MatrixVP[1];
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[0] * u_xlat0.xxxx + u_xlat1;
    u_xlat1 = hlslcc_mtx4x4unity_MatrixVP[2] * u_xlat0.zzzz + u_xlat1;
    gl_Position = hlslcc_mtx4x4unity_MatrixVP[3] * u_xlat0.wwww + u_xlat1;
    vs_TEXCOORD0.xy = vec2(0.0, 0.0);
    vs_SV_InstanceID0 = uint(gl_InstanceID);
    return;
}

#endif
#ifdef FRAGMENT
#version 300 es
#ifdef GL_OES_sample_variables
#extension GL_OES_sample_variables : enable
#endif

precision highp int;
layout(location = 0) out mediump vec4 SV_TARGET0;
void main()
{
    SV_TARGET0 = vec4(0.0, 0.0, 0.0, 0.0);
    return;
}

#endif
"
}
}
Program "fp" {
SubProgram "gles3 " {
""
}
SubProgram "gles3 " {
Keywords { "INSTANCING_ON" }
""
}
}
}
 UsePass "miHoYo/Shadow/ShadowMapPass/LSPSM"
}
Fallback "Legacy Shaders/Specular"
}